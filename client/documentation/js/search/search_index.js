var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.271,1,0.943]],["body/components/AppComponent.html",[0,0.497,1,1.661,2,1.394,3,0.128,4,0.11,5,1.232,6,1.232,7,1.232,8,1.232,9,0.11,10,3.76,11,2.038,12,1.91,13,1.185,14,1.983,15,3.795,16,1.449,17,6.422,18,1.449,19,5.733,20,0.222,21,0.61,22,2.879,23,0.262,24,0.015,25,0.537,26,1.332,27,1.281,28,4.971,29,0.937,30,4.336,31,0.462,32,0.617,33,0.128,34,0.646,35,0.937,36,1.628,37,1.628,38,1.054,39,1.941,40,1.232,41,1.043,42,1.232,43,1.054,44,1.232,45,1.054,46,1.232,47,1.054,48,1.014,49,1.628,50,1.054,51,1.014,52,1.232,53,0.975,54,1.232,55,0.937,56,1.506,57,1.232,58,0.937,59,0.937,60,1.232,61,1.014,62,1.232,63,0.975,64,1.34,65,1.054,66,1.232,67,1.014,68,1.232,69,0.901,70,1.096,71,0.832,72,1.824,73,1.054,74,1.232,75,1.054,76,1.096,77,1.232,78,1.014,79,1.232,80,0.937,81,1.054,82,1.232,83,0.937,84,1.506,85,0.901,86,0.937,87,0.866,88,1.014,89,1.232,90,1.014,91,1.139,92,1.232,93,0.937,94,1.232,95,0.937,96,1.506,97,1.232,98,1.232,99,0.937,100,0.975,101,1.096,102,1.185,103,1.014,104,1.185,105,1.232,106,0.008,107,0.011,108,0.008]],["title/modules/AppModule.html",[109,1.588,110,2.769]],["body/modules/AppModule.html",[1,1.85,3,0.107,4,0.092,9,0.092,11,1.706,12,1.562,24,0.016,31,0.835,32,0.517,33,0.107,34,0.756,35,0.785,41,0.825,64,0.849,106,0.007,107,0.009,108,0.007,109,2.4,110,5.6,111,1.792,112,1.886,113,3.405,114,3.214,115,2.952,116,1.991,117,3.147,118,3.147,119,3.147,120,3.147,121,4.581,122,4.581,123,4.28,124,4.581,125,4.581,126,2.952,127,1.424,128,2.639,129,3.629,130,3.688,131,5.078,132,5.078,133,3.959,134,5.078,135,4.403,136,2.829,137,2.952,138,3.629,139,3.629,140,5.078,141,3.629,142,2.829,143,2.829,144,2.829,145,1.706,146,3.959,147,2.592,148,1.257,149,5.078,150,5.078,151,2.244,152,5.078,153,3.147,154,3.629,155,3.629,156,3.629,157,1.706,158,3.361,159,3.147,160,3.629,161,2.829,162,3.629,163,3.298,164,1.627,165,2.592,166,3.629,167,3.147,168,2.402,169,3.629,170,3.629,171,3.629,172,3.629,173,3.629,174,3.629,175,3.629,176,3.629,177,3.629,178,2.244,179,3.959,180,3.629,181,3.629,182,3.629,183,1.554,184,6.345,185,5.858,186,5.078,187,5.078,188,3.361,189,5.078,190,2.277,191,3.627,192,2.829,193,3.147,194,3.629,195,3.629,196,3.629,197,5.078,198,5.078,199,5.078,200,3.629,201,3.629,202,3.629,203,3.629,204,3.629,205,3.629,206,3.629,207,3.629,208,3.629,209,3.629,210,3.629,211,3.629,212,3.147,213,1.257,214,3.629,215,3.629,216,1.257,217,1.424,218,3.629,219,3.629,220,1.031,221,3.629]],["title/modules/AppRoutingModule.html",[109,1.588,121,2.566]],["body/modules/AppRoutingModule.html",[0,0.547,3,0.131,4,0.113,9,0.113,24,0.016,31,0.837,32,0.634,33,0.131,34,0.663,51,1.365,53,1.463,61,1.365,63,1.312,64,1.042,65,1.419,67,1.365,78,1.365,88,1.365,90,1.365,91,1.171,106,0.008,107,0.011,108,0.008,111,2.199,116,2.444,121,3.863,130,2.59,137,3.392,157,2.094,158,4.571,159,3.863,164,1.997,168,2.949,183,2.499,188,3.863,191,3.182,193,3.863,222,4.456,223,4.456,224,5.06,225,4.647,226,4.456,227,5.836,228,5.836,229,4.456,230,5.836,231,3.182,232,3.863,233,2.949,234,3.863,235,4.167,236,3.863,237,4.456,238,3.863,239,4.456,240,1.997,241,7.866,242,5.643,243,4.456,244,4.456,245,3.863,246,3.182,247,3.473,248,4.456,249,3.473,250,4.456]],["title/guards/AuthGuard.html",[158,2.566,251,3.022]],["body/guards/AuthGuard.html",[3,0.142,4,0.122,9,0.122,15,3.197,20,0.247,23,0.371,24,0.015,29,1.329,31,0.8,32,0.688,33,0.142,34,0.719,41,0.998,106,0.009,107,0.011,108,0.009,157,2.27,158,4.069,163,3.968,164,2.165,216,2.129,220,1.372,242,6.374,252,4.83,253,4.188,254,1.382,255,1.174,256,4.188,257,4.368,258,3.589,259,4.83,260,1.554,261,1.554,262,4.83,263,7.119,264,6.763,265,7.119,266,4.83,267,6.148,268,1.086,269,5.272,270,3.573,271,3.573,272,6.763,273,3.195,274,1.742,275,4.83,276,4.83,277,1.895,278,3.449,279,1.221,280,1.319,281,2.756,282,3.449,283,4.83,284,4.83,285,3.197,286,3.449]],["title/interceptors/AuthInterceptor.html",[165,2.769,287,3.361]],["body/interceptors/AuthInterceptor.html",[3,0.149,4,0.128,9,0.128,20,0.258,23,0.417,24,0.015,29,1.491,31,0.793,32,0.718,33,0.149,34,0.751,41,1.12,106,0.009,107,0.012,108,0.009,151,3.118,163,3.948,164,2.26,165,4.511,216,2.187,254,1.42,255,1.226,260,1.744,261,1.744,268,1.42,269,5.805,273,3.283,274,1.819,277,1.978,279,1.274,280,1.377,281,3.092,288,5.042,289,4.372,290,6.317,291,6.317,292,5.042,293,5.042,294,6.317,295,7.231,296,5.042,297,2.26,298,6.317,299,7.231,300,6.898,301,7.231,302,5.042,303,2.766,304,5.042,305,6.317,306,5.042,307,5.042,308,5.042,309,5.042,310,5.042,311,5.042,312,5.042,313,5.042]],["title/modules/AuthModule.html",[109,1.588,122,2.566]],["body/modules/AuthModule.html",[2,1.423,3,0.132,4,0.114,9,0.114,11,2.104,24,0.015,31,0.838,32,0.637,33,0.132,34,0.667,35,0.968,53,1.656,63,1.656,64,1.369,65,1.423,67,1.722,78,1.722,90,1.722,91,1.176,106,0.008,107,0.011,108,0.008,109,2.672,111,3.22,112,2.327,113,3.791,114,2.456,115,2.602,116,2.456,122,5.262,126,3.403,127,1.756,128,2.327,130,3.791,137,3.403,144,4.564,145,2.104,153,5.076,157,2.104,164,2.007,224,5.076,231,3.197,232,3.882,233,2.964,234,3.882,235,3.197,236,3.882,247,5.393,314,3.882,315,3.882,316,4.477,317,4.181,318,4.564,319,3.875,320,2.769,321,5.076,322,3.197,323,5.854,324,5.076,325,5.854,326,4.181,327,5.076,328,4.181,329,4.564,330,4.477,331,4.564,332,3.197,333,3.197,334,4.477]],["title/injectables/AuthService.html",[258,1.822,273,2.015]],["body/injectables/AuthService.html",[3,0.162,4,0.139,9,0.139,15,3.636,20,0.281,21,0.709,23,0.332,24,0.015,26,1.687,27,2.117,29,1.549,31,0.585,32,0.782,33,0.162,34,0.818,41,0.892,106,0.01,107,0.012,108,0.01,216,1.902,220,1.892,254,1.497,258,3.13,260,1.389,261,1.389,268,1.497,271,4.436,273,3.461,278,3.923,335,3.923,336,4.763,337,7.167,338,7.451,339,6.66,340,5.494,341,6.66,342,5.494,343,1.619,344,5.494,345,6.66]],["title/interfaces/Authenticated.html",[285,2.566,346,0.216]],["body/interfaces/Authenticated.html",[3,0.18,4,0.154,9,0.154,20,0.312,21,0.753,23,0.368,24,0.015,33,0.18,106,0.011,107,0.013,108,0.011,271,4.35,285,5.256,346,0.339,347,1.48,348,5.278]],["title/injectables/DashboardService.html",[273,2.015,349,1.398]],["body/injectables/DashboardService.html",[3,0.065,4,0.056,9,0.056,15,1.461,20,0.113,23,0.43,24,0.016,25,0.956,29,1.642,31,0.783,32,0.314,33,0.065,34,0.329,41,1.155,48,0.516,59,0.477,71,1.102,85,0.459,87,0.699,106,0.004,107,0.007,108,0.004,151,1.365,216,2.69,217,1.373,220,2.138,240,1.95,254,0.787,255,0.537,260,1.798,261,1.798,268,1.7,269,6.231,273,1.819,274,0.796,278,1.576,280,0.603,285,1.461,335,1.576,349,1.263,350,1.913,351,3.5,352,3.5,353,4.951,354,4.951,355,3.5,356,3.5,357,2.728,358,3.5,359,3.5,360,4.951,361,4.951,362,3.5,363,3.5,364,4.951,365,3.5,366,3.5,367,4.951,368,4.951,369,4.951,370,4.951,371,4.951,372,3.5,373,3.5,374,3.5,375,1.913,376,4.102,377,2.207,378,3.5,379,2.207,380,1.404,381,3.5,382,2.207,383,3.5,384,2.207,385,2.207,386,3.5,387,2.207,388,3.5,389,3.5,390,2.207,391,3.5,392,3.5,393,2.207,394,3.5,395,2.207,396,4.885,397,3.5,398,2.207,399,2.207,400,2.207,401,3.5,402,2.207,403,3.859,404,3.5,405,2.207,406,2.207,407,3.5,408,2.207,409,3.5,410,2.207,411,3.391,412,2.207,413,2.207,414,2.207,415,2.207,416,2.207,417,3.5,418,2.207,419,3.035,420,3.5,421,3.277,422,2.207,423,4.951,424,3.5,425,3.535,426,2.207,427,3.5,428,2.207,429,1.147,430,2.207,431,2.207,432,1.147,433,2.207,434,1.576,435,1.461,436,4.951,437,1.461,438,1.913,439,1.461,440,2.165,441,1.72,442,1.461,443,1.576,444,4.35,445,2.879,446,0.904,447,2.207,448,2.207,449,1.461,450,3.5,451,1.461,452,1.365,453,2.207,454,1.037,455,2.207,456,2.207,457,2.207,458,2.207,459,5.376,460,2.207,461,2.207,462,4.35,463,6.245,464,2.207,465,2.207,466,3.5,467,2.207,468,4.35,469,2.207,470,2.207,471,2.207,472,2.207,473,2.207,474,2.207,475,2.207,476,2.207,477,1.461,478,2.207,479,2.207,480,2.207,481,2.207,482,2.207,483,2.165,484,1.72,485,1.913,486,2.207,487,1.283,488,2.207,489,2.207,490,3.5,491,3.5,492,3.5,493,2.207,494,2.207,495,2.207,496,2.207,497,2.207,498,2.207,499,2.207,500,2.207,501,2.207]],["title/interfaces/DashboardServiceProps.html",[346,0.216,502,2.566]],["body/interfaces/DashboardServiceProps.html",[3,0.111,4,0.095,9,0.095,20,0.193,21,0.554,23,0.361,24,0.015,25,0.739,31,0.636,33,0.154,41,1.289,59,0.813,71,0.999,81,1.452,85,0.782,87,1.04,100,1.171,101,1.71,106,0.007,107,0.01,108,0.007,148,1.803,192,2.933,240,1.687,346,0.21,347,0.915,380,1.67,403,2.933,429,3.35,432,1.956,434,3.719,440,3.221,454,2.448,477,2.491,502,3.953,503,2.933,504,2.933,505,4.369,506,3.111,507,5.024,508,3.986,509,4.516,510,2.043,511,1.956,512,1.958,513,3.719,514,3.221,515,3.719,516,4.06,517,3.719,518,1.611,519,2.933,520,2.687,521,2.687,522,4.633,523,2.687,524,5.589,525,5.303,526,4.516,527,6.07,528,6.07,529,4.915,530,6.342,531,4.915,532,5.457,533,2.687,534,4.656,535,4.265,536,2.687,537,3.263,538,3.263,539,2.687,540,2.687,541,2.933,542,3.263,543,2.491,544,3.263,545,3.263,546,4.833,547,2.687,548,5.024,549,3.35,550,3.35,551,2.687,552,3.263,553,3.263,554,4.656,555,2.687,556,3.263,557,3.263,558,2.327,559,3.263]],["title/interfaces/DashboardWidget.html",[346,0.216,560,1.521]],["body/interfaces/DashboardWidget.html",[3,0.139,4,0.119,9,0.119,20,0.24,21,0.643,23,0.365,24,0.015,25,0.924,29,1.016,31,0.826,33,0.197,41,0.981,55,1.306,56,1.587,58,1.306,59,1.016,69,1.255,70,1.188,71,1.158,75,1.142,80,1.306,81,1.142,83,1.306,84,1.587,85,1.255,86,1.306,87,1.206,93,1.306,95,1.306,96,1.587,99,1.306,100,1.358,106,0.009,107,0.011,108,0.009,240,2.106,254,1.358,260,1.188,261,1.188,268,1.056,343,1.468,346,0.337,347,1.142,380,1.639,429,2.442,432,2.442,454,2.839,508,2.906,523,3.355,525,3.355,529,3.11,531,3.11,533,3.355,536,3.355,540,3.355,547,3.355,551,3.355,555,3.355,560,2.37,561,4.313,562,3.355,563,2.982,564,2.708,565,1.772,566,4.698,567,3.735,568,5.682,569,3.735,570,3.11,571,3.662,572,3.11,573,3.662,574,3.11,575,3.662,576,2.906,577,4.074,578,3.11]],["title/components/FooterComponent.html",[0,0.271,43,0.943]],["body/components/FooterComponent.html",[0,0.446,1,1.04,2,1.381,3,0.126,4,0.108,5,1.214,6,1.214,7,1.214,8,1.214,9,0.108,12,1.903,13,1.168,14,1.981,16,1.436,18,1.436,20,0.219,24,0.015,29,1.228,31,0.455,32,0.609,33,0.126,34,0.637,35,0.924,36,1.613,37,1.613,38,1.04,39,1.93,40,1.214,41,1.036,42,1.214,43,1.652,44,1.214,45,1.04,46,1.214,47,1.04,48,1,49,1.613,50,1.04,51,1,52,1.214,53,0.961,54,1.214,55,0.924,56,1.492,57,1.214,58,0.924,59,0.924,60,1.214,61,1,62,1.214,63,0.961,64,1.328,65,1.04,66,1.214,67,1,68,1.214,69,0.888,70,1.081,71,0.82,72,1.811,73,1.04,74,1.214,75,1.04,76,1.081,77,1.214,78,1,79,1.214,80,0.924,81,1.04,82,1.214,83,0.924,84,1.492,85,0.888,86,0.924,87,0.854,88,1,89,1.214,90,1,91,1.124,92,1.214,93,0.924,94,1.214,95,0.924,96,1.492,97,1.214,98,1.214,99,0.924,100,0.961,101,1.081,102,1.168,103,1,104,1.168,105,1.214,106,0.008,107,0.011,108,0.008,254,1.277,255,1.55,268,0.961,279,1.436,343,1.381,579,3.708,580,2.038,581,5.68,582,6.377,583,5.68,584,2.171,585,4.276,586,4.276,587,5.68,588,5.68,589,5.68,590,5.68,591,5.68]],["title/components/GridComponent.html",[0,0.271,45,0.943]],["body/components/GridComponent.html",[0,0.349,1,0.668,2,1.008,3,0.081,4,0.07,5,0.78,6,0.78,7,0.78,8,0.78,9,0.07,12,1.825,13,0.751,14,1.903,16,1.048,18,1.048,20,0.141,23,0.336,24,0.015,25,0.618,26,0.844,27,0.811,29,1.537,31,0.694,32,0.391,33,0.081,34,0.409,35,0.594,36,1.178,37,1.178,38,0.668,39,1.58,40,0.78,41,1.09,42,0.78,43,0.668,44,0.78,45,1.353,46,0.78,47,0.668,48,1.168,49,1.178,50,0.668,51,0.642,52,0.78,53,0.618,54,0.78,55,0.594,56,1.09,57,0.78,58,0.594,59,0.594,60,0.78,61,0.642,62,0.78,63,0.618,64,0.97,65,0.668,66,0.78,67,0.642,68,0.78,69,0.571,70,0.694,71,0.527,72,1.419,73,0.668,74,0.78,75,0.668,76,0.694,77,0.78,78,0.642,79,0.78,80,0.594,81,0.668,82,0.78,83,0.594,84,1.09,85,0.571,86,0.594,87,0.549,88,0.642,89,0.78,90,0.642,91,0.722,92,0.78,93,0.594,94,0.78,95,0.594,96,1.09,97,0.78,98,0.78,99,0.594,100,0.618,101,0.694,102,0.751,103,0.642,104,0.751,105,0.78,106,0.005,107,0.008,108,0.005,213,0.951,216,2.258,240,2.678,254,0.932,255,0.668,260,1.407,261,1.407,268,1.466,271,2.903,279,1.048,280,0.751,281,1.232,343,1.752,349,2.352,380,1.343,483,3.089,502,2.745,506,2.573,508,4.248,519,2.142,520,2.962,522,1.819,529,1.819,531,1.819,534,3.233,549,1.428,565,1.67,580,1.596,584,1.778,592,2.382,593,2.046,594,4.996,595,4.147,596,4.147,597,4.147,598,2.28,599,5.565,600,4.147,601,5.565,602,4.147,603,4.332,604,4.996,605,2.747,606,4.485,607,2.747,608,4.147,609,5.565,610,5.445,611,3.974,612,3.974,613,2.093,614,2.747,615,4.147,616,2.807,617,4.147,618,2.747,619,2.747,620,2.747,621,2.747,622,4.147,623,2.747,624,2.747,625,2.747,626,2.747,627,2.747,628,2.747,629,2.747,630,2.747,631,2.382,632,3.596,633,3.596,634,1.819,635,1.962,636,2.747,637,2.747,638,2.747,639,1.126,640,2.747,641,4.147,642,2.747,643,2.747,644,4.147,645,2.747,646,4.147,647,2.747,648,2.747,649,4.147,650,2.747,651,2.747,652,2.747,653,1.033,654,2.747,655,2.747,656,2.747,657,2.747,658,2.382,659,4.147,660,2.747,661,2.747,662,4.147,663,2.747,664,2.747,665,2.962,666,2.747,667,2.747,668,2.747,669,2.747,670,2.747,671,4.147,672,2.747,673,2.747,674,2.747,675,2.747,676,2.747,677,3.596,678,4.147,679,4.147,680,4.147,681,4.147]],["title/components/GridHeaderComponent.html",[0,0.271,47,0.943]],["body/components/GridHeaderComponent.html",[0,0.39,1,0.805,2,1.157,3,0.098,4,0.084,5,0.94,6,0.94,7,0.94,8,0.94,9,0.084,12,1.861,13,0.905,14,1.94,16,1.203,18,1.203,20,0.169,21,0.507,23,0.406,24,0.015,25,0.589,26,1.017,27,0.978,29,1.531,31,0.648,32,0.471,33,0.098,34,0.493,35,0.716,36,1.352,37,1.352,38,0.805,39,1.73,40,0.94,41,1.171,42,0.94,43,0.805,44,0.94,45,0.805,46,0.94,47,1.481,48,1.686,49,1.352,50,0.805,51,0.774,52,0.94,53,0.745,54,0.94,55,0.716,56,1.25,57,0.94,58,0.716,59,0.716,60,0.94,61,0.774,62,0.94,63,0.745,64,1.113,65,0.805,66,0.94,67,0.774,68,0.94,69,0.688,70,0.837,71,0.635,72,1.582,73,1.157,74,1.352,75,1.354,76,1.698,77,0.94,78,0.774,79,0.94,80,0.716,81,0.805,82,0.94,83,0.716,84,1.25,85,0.688,86,0.716,87,0.661,88,0.774,89,0.94,90,0.774,91,0.87,92,0.94,93,0.716,94,0.94,95,0.716,96,1.25,97,0.94,98,0.94,99,0.716,100,0.745,101,0.837,102,0.905,103,0.774,104,0.905,105,0.94,106,0.006,107,0.009,108,0.006,145,1.556,148,2.109,217,1.867,240,1.484,254,1.07,255,0.805,260,0.837,261,0.837,268,1.07,280,0.905,343,1.481,510,1.299,511,2.473,512,1.245,549,1.721,565,1.157,613,2.29,665,2.365,682,5.621,683,5.621,684,2.871,685,4.83,686,4.83,687,4.126,688,6.09,689,6.09,690,3.71,691,4.759,692,5.57,693,5.57,694,3.311,695,6.09,696,3.311,697,4.759,698,3.311,699,3.311,700,6.451,701,3.311,702,3.311,703,3.311,704,3.311,705,2.192,706,5.57,707,5.57,708,5.57,709,4.83,710,3.311,711,5.57,712,2.365,713,2.871,714,3.311,715,2.581,716,2.237,717,3.311,718,5.57,719,3.311,720,2.871,721,3.311,722,3.311,723,3.311,724,2.581,725,1.925,726,2.581,727,3.311,728,2.871,729,2.365,730,3.311]],["title/modules/GridModule.html",[109,1.588,731,2.398]],["body/modules/GridModule.html",[2,1.213,3,0.104,4,0.09,9,0.09,11,1.664,24,0.015,31,0.842,32,0.504,33,0.104,34,0.527,35,0.765,45,1.842,47,1.669,48,1.606,55,1.484,58,1.484,59,0.765,69,1.427,71,0.957,73,1.669,75,1.213,76,1.262,80,1.484,83,1.484,85,1.037,86,1.484,87,0.996,93,1.484,95,1.484,99,1.484,100,1.122,103,1.606,106,0.007,107,0.009,108,0.007,109,2.368,111,2.854,112,1.84,113,3.36,114,2.738,115,2.058,116,3.171,126,2.901,127,1.389,128,1.84,130,3.36,137,2.901,144,3.891,145,1.664,317,3.564,318,4.893,319,3.304,320,2.19,321,4.328,322,2.529,324,4.328,326,3.564,327,4.328,328,3.564,329,3.891,331,3.891,332,2.529,333,2.529,454,2.346,549,2.594,567,3.087,568,5.159,569,3.087,570,2.344,571,2.76,572,2.344,573,2.76,574,2.344,575,2.76,576,2.19,634,2.344,635,2.529,683,2.76,712,2.529,713,3.07,731,5.005,732,3.07,733,3.07,734,3.07,735,3.541,736,4.991,737,3.541,738,4.328,739,3.541,740,4.328,741,4.991,742,4.991,743,4.991,744,4.991,745,3.564,746,1.943,747,2.344,748,4.991,749,4.991,750,4.991,751,3.541,752,3.541,753,3.541,754,2.76,755,3.541,756,3.541,757,3.541,758,3.541]],["title/injectables/GridService.html",[273,2.015,606,2.769]],["body/injectables/GridService.html",[3,0.111,4,0.096,9,0.096,15,2.497,20,0.306,21,0.555,23,0.423,24,0.016,26,1.603,27,1.541,29,1.553,31,0.721,32,0.537,33,0.154,34,0.562,41,0.971,48,0.882,106,0.007,107,0.01,108,0.007,127,2.532,213,1.807,216,1.307,220,2.079,240,2.681,254,1.173,255,0.917,260,1.512,261,1.512,268,1.451,273,2.712,278,2.694,280,1.031,297,2.339,335,2.694,343,1.779,349,2.527,380,1.523,419,3.272,421,3.454,441,4.662,445,3.454,483,3.699,603,5.186,606,3.726,611,2.694,612,2.694,613,1.419,616,1.773,632,5.186,633,6.075,634,2.497,635,2.694,639,1.546,653,1.962,720,5.595,759,2.941,760,5.981,761,5.218,762,5.218,763,6.453,764,1.773,765,5.218,766,5.218,767,5.981,768,6.453,769,5.981,770,3.773,771,3.272,772,5.218,773,3.773,774,3.773,775,3.773,776,5.218,777,5.218,778,5.218,779,6.453,780,5.218,781,5.218,782,5.218,783,5.218,784,5.218,785,5.218,786,5.218,787,6.453,788,5.218,789,5.218,790,5.218,791,5.218,792,5.218,793,3.773,794,3.272,795,3.773,796,2.941,797,3.272,798,3.773,799,3.773,800,3.773,801,3.773,802,3.773,803,3.773,804,3.773,805,3.773,806,3.773,807,3.773,808,3.773,809,3.773,810,3.773,811,3.773,812,2.452,813,3.773]],["title/components/HeaderComponent.html",[0,0.271,50,0.943]],["body/components/HeaderComponent.html",[0,0.401,1,0.708,2,1.053,3,0.086,4,0.074,5,0.827,6,0.827,7,0.827,8,0.827,9,0.074,12,1.837,13,0.796,14,1.915,16,1.095,18,1.095,20,0.149,21,0.461,22,2.568,23,0.312,24,0.015,26,1.331,27,1.28,29,1.324,31,0.727,32,0.415,33,0.086,34,0.434,35,0.63,36,1.231,37,1.231,38,0.708,39,1.627,40,0.827,41,0.931,42,0.827,43,0.708,44,0.827,45,0.708,46,0.827,47,0.708,48,0.681,49,1.231,50,1.393,51,0.681,52,0.827,53,0.655,54,0.827,55,0.63,56,1.138,57,0.827,58,0.63,59,0.63,60,0.827,61,0.681,62,0.827,63,0.655,64,1.013,65,0.708,66,0.827,67,0.681,68,0.827,69,0.605,70,0.736,71,0.559,72,1.469,73,0.708,74,0.827,75,0.708,76,0.736,77,0.827,78,0.681,79,0.827,80,0.63,81,0.708,82,0.827,83,0.63,84,1.138,85,0.605,86,0.63,87,1.282,88,0.681,89,0.827,90,0.681,91,0.765,92,0.827,93,0.63,94,0.827,95,0.63,96,1.138,97,0.827,98,0.827,99,0.63,100,0.655,101,0.736,102,0.796,103,0.681,104,0.796,105,0.827,106,0.005,107,0.008,108,0.005,128,2.978,145,1.369,178,2.68,213,1.009,216,1.009,220,1.231,254,0.974,255,0.708,260,0.736,261,0.736,268,0.974,271,2.518,279,1.095,280,0.796,281,1.306,343,1.053,349,2.398,411,3.377,485,3.757,505,3.007,511,2.252,541,4.033,550,3.336,580,1.653,584,1.831,616,2.431,639,1.193,677,2.526,685,4.486,686,4.486,687,3.757,724,2.271,726,3.377,729,4.092,746,1.598,771,2.526,814,2.526,815,5.173,816,5.173,817,5.729,818,2.913,819,5.729,820,2.913,821,4.333,822,2.913,823,2.913,824,3.377,825,2.913,826,4.033,827,4.333,828,4.333,829,4.466,830,3.377,831,4.333,832,2.913,833,2.526,834,2.913,835,2.913,836,2.913,837,2.913,838,2.913,839,2.913,840,2.036,841,1.369,842,1.369,843,1.438,844,1.369,845,3.124,846,3.337,847,1.369,848,5.729,849,2.913,850,4.333,851,2.913,852,4.968,853,1.438,854,4.333,855,3.757,856,5.173,857,3.377,858,2.913,859,2.913,860,2.913,861,2.978,862,3.757,863,1.438,864,2.868,865,2.526,866,2.526,867,2.526,868,1.598,869,2.526,870,2.08,871,2.526,872,2.913,873,2.913,874,3.757,875,5.173,876,2.913,877,3.757,878,3.757,879,4.333,880,6.124,881,2.913,882,2.913,883,3.757,884,4.333,885,4.333,886,2.913,887,4.333,888,2.913,889,2.913,890,2.913,891,4.333,892,4.333,893,2.913,894,2.913,895,2.913]],["title/components/HomeComponent.html",[0,0.271,51,0.906]],["body/components/HomeComponent.html",[0,0.451,1,0.916,2,1.267,3,0.111,4,0.096,5,1.07,6,1.07,7,1.07,8,1.07,9,0.096,12,1.883,13,1.029,14,1.962,16,1.318,18,1.318,20,0.193,21,0.555,22,2.891,23,0.228,24,0.015,26,1.157,27,1.113,29,1.292,31,0.721,32,0.537,33,0.111,34,0.561,35,0.815,36,1.481,37,1.481,38,0.916,39,1.832,40,1.07,41,0.971,42,1.07,43,0.916,44,1.07,45,0.916,46,1.07,47,0.916,48,0.881,49,1.481,50,0.916,51,1.508,52,1.07,53,0.847,54,1.07,55,0.815,56,1.37,57,1.07,58,0.815,59,0.815,60,1.07,61,0.881,62,1.07,63,0.847,64,1.219,65,0.916,66,1.07,67,0.881,68,1.07,69,0.783,70,0.952,71,0.723,72,1.697,73,0.916,74,1.07,75,0.916,76,0.952,77,1.07,78,0.881,79,1.07,80,0.815,81,0.916,82,1.07,83,0.815,84,1.37,85,0.783,86,0.815,87,0.752,88,0.881,89,1.07,90,0.881,91,0.99,92,1.07,93,0.815,94,1.07,95,0.815,96,1.37,97,1.07,98,1.07,99,0.815,100,0.847,101,0.952,102,1.029,103,0.881,104,1.029,105,1.07,106,0.007,107,0.01,108,0.007,145,1.771,188,5.071,213,1.805,220,1.481,246,4.606,254,1.172,255,1.453,268,0.847,279,1.318,343,1.267,505,3.748,580,1.91,584,2.061,746,2.067,826,4.659,830,5.027,841,1.771,842,1.771,844,1.771,845,1.771,846,2.337,847,1.771,857,4.659,861,2.709,867,3.267,871,3.267,896,3.267,897,5.977,898,5.213,899,3.768,900,3.768,901,4.269,902,4.52,903,3.768,904,3.768,905,3.768,906,4.52,907,3.768]],["title/modules/HomeModule.html",[109,1.588,123,2.398]],["body/modules/HomeModule.html",[2,1.435,3,0.134,4,0.115,9,0.115,11,2.132,24,0.015,31,0.821,32,0.646,33,0.134,34,0.675,35,0.981,43,1.917,50,1.917,51,1.728,106,0.008,107,0.011,108,0.008,109,2.689,111,3.241,112,2.357,113,3.815,114,3.239,115,2.636,116,3.601,123,4.925,126,3.432,127,1.78,128,2.357,130,4.041,137,3.432,142,4.603,143,4.603,145,2.132,146,4.603,147,3.239,148,1.571,188,4.602,317,4.217,318,4.603,319,3.908,320,2.805,326,4.217,328,4.217,731,4.571,745,4.217,746,2.489,747,3.003,908,3.933,909,3.933,910,3.933,911,4.536,912,4.536,913,5.12,914,4.536,915,4.536,916,4.536,917,4.536,918,5.12,919,5.12,920,5.12]],["title/interfaces/IResponse.html",[346,0.216,921,2.769]],["body/interfaces/IResponse.html",[0,0.426,3,0.14,4,0.121,9,0.121,12,1.114,14,1.158,16,1.204,18,1.204,20,0.244,21,0.649,23,0.288,24,0.016,25,0.832,31,0.81,32,0.678,33,0.14,34,0.709,63,1.071,64,1.571,65,1.78,106,0.009,107,0.011,108,0.009,151,2.946,157,2.239,163,3.492,164,2.135,179,5.521,217,1.869,220,1.353,233,3.153,249,3.713,257,3.905,258,3.158,274,1.718,277,1.869,279,1.204,280,1.301,281,3.175,286,4.352,343,1.158,346,0.266,347,1.158,376,4.798,459,3.402,484,3.713,593,2.496,598,1.951,921,4.352,922,3.402,923,3.713,924,5.284,925,3.713,926,4.033,927,2.946,928,4.13,929,4.13,930,3.713,931,4.13,932,3.713,933,4.13,934,4.13,935,4.13,936,4.13,937,4.13,938,4.13,939,4.13,940,3.713,941,4.13,942,3.713,943,2.04,944,5.284,945,3.713,946,3.713]],["title/interfaces/Id.html",[346,0.216,380,0.872]],["body/interfaces/Id.html",[3,0.18,4,0.154,9,0.154,20,0.312,21,0.753,23,0.368,24,0.015,25,0.927,33,0.18,106,0.011,107,0.013,108,0.011,346,0.339,347,1.48,380,1.785,947,5.278]],["title/components/LoginComponent.html",[0,0.271,53,0.872]],["body/components/LoginComponent.html",[0,0.385,1,0.788,2,1.139,3,0.096,4,0.082,5,0.921,6,0.921,7,0.921,8,0.921,9,0.082,12,1.857,13,0.885,14,1.936,16,1.184,18,1.184,20,0.166,21,0.499,23,0.364,24,0.015,25,0.401,26,0.996,27,0.957,29,1.19,31,0.71,32,0.462,33,0.096,34,0.483,35,0.701,36,1.331,37,1.331,38,0.788,39,1.713,40,0.921,41,0.979,42,0.921,43,0.788,44,0.921,45,0.788,46,0.921,47,0.788,48,0.758,49,1.331,50,0.788,51,0.758,52,0.921,53,1.356,54,0.921,55,0.701,56,1.231,57,0.921,58,0.701,59,0.701,60,0.921,61,0.758,62,0.921,63,0.729,64,1.41,65,0.788,66,0.921,67,0.758,68,0.921,69,0.673,70,0.819,71,0.622,72,1.563,73,0.788,74,0.921,75,0.788,76,0.819,77,0.921,78,0.758,79,0.921,80,0.701,81,0.788,82,0.921,83,0.701,84,1.231,85,0.673,86,0.701,87,0.647,88,0.758,89,0.921,90,0.758,91,0.852,92,0.921,93,0.701,94,0.921,95,0.701,96,1.231,97,0.921,98,0.921,99,0.701,100,0.729,101,0.819,102,0.885,103,0.758,104,0.885,105,0.921,106,0.006,107,0.009,108,0.006,133,4.7,148,1.623,157,1.523,163,3.658,164,1.453,178,4.353,183,2.357,191,3.346,254,1.054,255,0.788,257,3.505,258,3.231,260,0.819,261,0.819,268,0.729,270,2.724,279,1.184,281,1.453,282,2.315,346,0.181,483,3.729,505,3.199,507,3.653,510,1.838,511,1.684,512,1.762,514,3.404,518,1.388,522,2.145,580,1.759,584,1.927,616,2.202,653,1.762,829,4.7,901,3.643,927,2.004,948,2.527,949,3.653,950,4.772,951,4.772,952,4.063,953,4.772,954,3.199,955,3.653,956,3.102,957,4.7,958,4.7,959,3.241,960,3.241,961,3.93,962,4.063,963,3.241,964,2.527,965,2.527,966,2.527,967,2.527,968,1.884,969,2.527,970,3.241,971,4.063,972,4.063,973,4.063,974,4.063,975,3.653,976,4.063,977,4.063,978,5.781,979,4.063,980,2.81,981,2.81,982,4.063,983,4.686,984,4.063,985,4.063,986,4.063,987,4.063,988,4.686,989,3.241,990,4.063,991,3.241,992,2.81,993,2.81,994,3.241]],["title/interfaces/MicrosoftCalendar.html",[346,0.216,442,2.566]],["body/interfaces/MicrosoftCalendar.html",[3,0.176,4,0.151,9,0.151,20,0.305,21,0.744,23,0.422,24,0.015,25,0.978,33,0.176,41,1.243,106,0.011,107,0.013,108,0.011,346,0.332,347,1.448,380,1.721,442,4.626,995,3.942,996,5.164]],["title/interfaces/MicrosoftCalendarEvent.html",[346,0.216,439,2.566]],["body/interfaces/MicrosoftCalendarEvent.html",[3,0.164,4,0.141,9,0.141,20,0.285,21,0.714,23,0.479,24,0.015,25,0.995,33,0.164,106,0.01,107,0.013,108,0.01,346,0.31,347,1.352,380,1.682,439,4.44,440,3.439,926,4.952,956,4.952,995,3.68,997,4.821,998,6.487,999,7.481,1000,6.708,1001,6.708]],["title/interfaces/MicrosoftMail.html",[346,0.216,435,2.566]],["body/interfaces/MicrosoftMail.html",[3,0.16,4,0.138,9,0.138,20,0.278,21,0.705,23,0.478,24,0.015,25,1.004,33,0.16,106,0.01,107,0.012,108,0.01,271,4.148,346,0.303,347,1.322,380,1.67,435,4.382,926,4.915,956,4.382,975,4.24,995,3.6,1002,4.716,1003,7.426,1004,7.426,1005,7.426,1006,7.426,1007,5.439]],["title/interfaces/MicrosoftMailbox.html",[346,0.216,437,2.566]],["body/interfaces/MicrosoftMailbox.html",[3,0.172,4,0.148,9,0.148,20,0.299,21,0.735,23,0.444,24,0.015,25,0.974,33,0.172,106,0.011,107,0.013,108,0.011,346,0.326,347,1.42,380,1.71,437,4.574,565,1.789,824,5.928,995,3.867,1008,5.066,1009,7.605]],["title/components/MsCalendarComponent.html",[0,0.271,55,0.838]],["body/components/MsCalendarComponent.html",[0,0.313,1,0.45,2,0.738,3,0.055,4,0.047,5,0.525,6,0.525,7,0.525,8,0.525,9,0.047,12,1.73,13,0.505,14,1.807,16,0.767,18,0.767,20,0.198,21,0.323,23,0.412,24,0.016,25,0.693,26,1.372,27,1.319,29,1.607,31,0.694,32,0.263,33,0.055,34,0.275,35,0.4,36,0.862,37,0.862,38,0.45,39,1.269,40,0.525,41,0.983,42,0.525,43,0.45,44,0.525,45,0.45,46,0.525,47,0.45,48,0.433,49,0.862,50,0.45,51,0.433,52,0.525,53,0.416,54,0.525,55,0.966,56,1.591,57,0.525,58,0.4,59,0.4,60,0.525,61,0.433,62,0.525,63,0.416,64,0.71,65,0.45,66,0.525,67,0.433,68,0.525,69,0.384,70,0.468,71,0.355,72,1.097,73,0.45,74,0.525,75,1.086,76,0.468,77,0.525,78,0.433,79,0.525,80,0.4,81,0.45,82,0.525,83,0.4,84,0.798,85,0.384,86,0.4,87,0.369,88,0.433,89,0.525,90,0.433,91,0.486,92,0.525,93,0.4,94,0.525,95,0.4,96,0.798,97,0.525,98,0.525,99,0.4,100,0.416,101,0.468,102,0.505,103,0.433,104,0.505,105,0.525,106,0.003,107,0.006,108,0.003,148,1.547,183,1.3,190,2.621,213,2.21,216,1.547,217,1.191,220,1.506,240,1.361,254,0.683,255,0.45,260,1.34,261,1.34,268,1.515,270,3.621,271,2.244,274,0.667,277,0.726,279,0.767,280,0.505,297,0.829,343,1.638,349,1.912,380,0.868,439,4.007,440,3.051,441,3.845,442,3.87,445,2.01,446,0.758,477,3.509,506,0.758,510,0.726,512,0.696,514,2.388,518,0.792,535,2.168,539,2.757,543,2.957,549,0.962,560,1.515,563,1.499,564,1.361,565,1.199,570,4.943,580,1.234,584,1.428,593,1.582,598,1.83,613,1.452,616,2.491,639,0.758,653,0.696,665,2.168,705,1.225,716,1.427,764,0.87,812,0.87,840,0.87,841,0.87,842,0.87,843,0.913,844,0.87,845,0.87,846,0.829,847,0.87,853,1.906,863,0.913,943,1.3,954,3.969,968,3.398,1010,5.821,1011,1.604,1012,3.861,1013,3.036,1014,4.933,1015,3.845,1016,4.933,1017,3.861,1018,3.861,1019,3.01,1020,1.814,1021,4.933,1022,2.367,1023,4.468,1024,4.468,1025,3.036,1026,3.036,1027,2.205,1028,3.036,1029,2.322,1030,4.468,1031,4.468,1032,2.205,1033,1.85,1034,3.036,1035,1.85,1036,3.036,1037,1.85,1038,1.85,1039,4.468,1040,1.85,1041,4.468,1042,1.85,1043,1.85,1044,1.85,1045,1.85,1046,3.036,1047,1.85,1048,1.85,1049,1.85,1050,1.85,1051,1.85,1052,1.85,1053,1.85,1054,1.85,1055,1.85,1056,2.435,1057,1.85,1058,1.85,1059,1.85,1060,1.85,1061,1.85,1062,1.85,1063,1.85,1064,1.85,1065,2.632,1066,0.913,1067,0.913,1068,4.132,1069,3.036,1070,5.846,1071,3.036,1072,3.483,1073,1.442,1074,1.604,1075,1.442,1076,1.85,1077,0.913,1078,3.036,1079,2.632,1080,3.036,1081,3.861,1082,0.913,1083,0.913,1084,1.85,1085,1.906,1086,1.442,1087,3.036,1088,3.036,1089,0.913,1090,4.976,1091,1.442,1092,1.499,1093,0.962,1094,1.604,1095,3.036,1096,1.85,1097,3.036,1098,2.632,1099,3.483,1100,4.468,1101,3.036,1102,1.85,1103,3.036,1104,1.85,1105,3.036,1106,4.468,1107,3.036,1108,1.85,1109,3.036,1110,3.861,1111,1.85,1112,1.85,1113,1.499,1114,1.499,1115,1.85,1116,1.85,1117,1.85,1118,1.85,1119,1.85,1120,1.85,1121,1.015,1122,3.036,1123,3.036,1124,2.632,1125,2.632,1126,0.962,1127,0.962]],["title/components/MsMailComponent.html",[0,0.271,58,0.838]],["body/components/MsMailComponent.html",[0,0.371,1,0.451,2,0.74,3,0.055,4,0.047,5,0.527,6,0.527,7,0.527,8,0.527,9,0.047,12,1.731,13,0.507,14,1.808,16,0.769,18,0.769,20,0.095,21,0.324,23,0.401,24,0.016,25,0.612,26,1.375,27,1.322,29,1.6,31,0.694,32,0.264,33,0.055,34,0.276,35,0.401,36,0.865,37,0.865,38,0.451,39,1.271,40,0.527,41,0.911,42,0.527,43,0.451,44,0.527,45,0.451,46,0.527,47,0.451,48,0.434,49,0.865,50,0.451,51,0.434,52,0.527,53,0.417,54,0.527,55,0.401,56,1.593,57,0.527,58,0.968,59,1.64,60,0.527,61,0.434,62,0.527,63,0.417,64,0.712,65,0.451,66,0.527,67,0.434,68,0.527,69,0.386,70,0.469,71,0.356,72,1.099,73,0.451,74,0.527,75,1.088,76,0.469,77,0.527,78,0.434,79,0.527,80,0.401,81,0.451,82,0.527,83,0.401,84,0.8,85,0.386,86,0.401,87,0.371,88,0.434,89,0.527,90,0.434,91,0.488,92,0.527,93,0.401,94,0.527,95,0.401,96,0.8,97,0.527,98,0.527,99,0.401,100,0.417,101,0.469,102,0.507,103,0.434,104,0.507,105,0.527,106,0.003,107,0.006,108,0.003,148,1.55,183,1.304,190,2.624,213,2.213,216,1.34,217,0.728,220,1.404,240,1.735,254,0.685,255,0.451,260,1.132,261,1.132,268,1.493,270,3.625,274,0.67,277,0.728,279,0.769,280,0.507,297,0.832,343,1.639,349,1.915,380,0.87,435,3.514,437,3.875,438,3.355,445,2.015,446,0.76,477,2.015,506,0.76,510,0.728,512,0.698,514,2.393,518,0.795,535,2.174,539,1.326,543,2.963,549,0.965,560,1.518,563,1.503,564,1.365,565,1.201,572,4.923,580,1.237,584,1.431,593,1.585,598,1.834,613,1.455,616,2.751,639,0.76,653,0.698,705,1.229,716,1.431,764,0.872,812,0.872,840,0.872,841,0.872,842,0.872,843,0.916,844,0.872,845,0.872,846,0.832,847,0.872,853,1.91,863,0.916,878,3.882,943,1.304,954,3.973,968,3.402,1010,5.798,1015,3.852,1019,3.017,1020,1.819,1022,3.49,1027,2.21,1029,2.327,1032,2.21,1056,2.439,1065,2.64,1066,0.916,1067,0.916,1068,4.139,1072,3.49,1073,1.447,1074,1.61,1075,1.447,1077,0.916,1079,2.635,1082,0.916,1083,0.916,1085,1.91,1086,1.447,1089,0.916,1090,4.981,1091,1.447,1092,1.503,1093,0.965,1094,1.61,1098,1.61,1099,3.49,1113,1.503,1114,1.503,1121,1.018,1124,2.64,1125,2.64,1126,0.965,1127,0.965,1128,1.61,1129,3.87,1130,3.044,1131,3.87,1132,3.87,1133,4.942,1134,4.942,1135,4.942,1136,4.477,1137,4.477,1138,3.044,1139,3.044,1140,4.477,1141,4.477,1142,1.856,1143,1.856,1144,1.856,1145,1.856,1146,4.477,1147,1.856,1148,1.856,1149,1.856,1150,1.856,1151,1.856,1152,3.044,1153,1.856,1154,1.856,1155,1.856,1156,1.856,1157,1.856,1158,1.856,1159,1.856,1160,1.856,1161,1.856,1162,1.856,1163,1.856,1164,1.856,1165,1.856,1166,1.856,1167,1.856,1168,1.856,1169,3.044,1170,5.854,1171,3.044,1172,1.856,1173,3.044,1174,3.044,1175,3.87,1176,1.856,1177,3.044,1178,3.044,1179,3.044,1180,1.856,1181,3.044,1182,4.477,1183,1.856,1184,3.044,1185,3.044,1186,1.447,1187,1.856,1188,1.856,1189,3.044,1190,1.856,1191,3.044,1192,3.87,1193,1.856,1194,1.856,1195,1.856,1196,1.856,1197,2.64,1198,1.856,1199,1.856,1200,1.856,1201,3.044,1202,2.64,1203,3.044,1204,3.044,1205,3.044,1206,3.044,1207,3.044]],["title/components/NotFoundComponent.html",[0,0.271,61,0.906]],["body/components/NotFoundComponent.html",[0,0.446,1,1.038,2,1.379,3,0.126,4,0.108,5,1.213,6,1.213,7,1.213,8,1.213,9,0.108,12,1.902,13,1.166,14,1.981,16,1.434,18,1.434,20,0.219,24,0.015,29,1.227,31,0.454,32,0.608,33,0.126,34,0.636,35,0.923,36,1.611,37,1.611,38,1.038,39,1.929,40,1.213,41,1.035,42,1.213,43,1.038,44,1.213,45,1.038,46,1.213,47,1.038,48,0.998,49,1.611,50,1.038,51,0.998,52,1.213,53,0.96,54,1.213,55,0.923,56,1.491,57,1.213,58,0.923,59,0.923,60,1.213,61,1.588,62,1.213,63,0.96,64,1.327,65,1.038,66,1.213,67,0.998,68,1.213,69,0.887,70,1.079,71,0.819,72,1.81,73,1.038,74,1.213,75,1.038,76,1.079,77,1.213,78,0.998,79,1.213,80,0.923,81,1.038,82,1.213,83,0.923,84,1.491,85,0.887,86,0.923,87,0.852,88,0.998,89,1.213,90,0.998,91,1.122,92,1.213,93,0.923,94,1.213,95,0.923,96,1.491,97,1.213,98,1.213,99,0.923,100,0.96,101,1.079,102,1.166,103,0.998,104,1.166,105,1.213,106,0.008,107,0.011,108,0.008,168,4.218,254,1.276,255,1.549,268,0.96,279,1.434,343,1.379,580,2.036,584,2.17,1099,5.293,1208,4.967,1209,3.702,1210,6.372,1211,5.674,1212,4.269,1213,4.269,1214,5.674]],["title/modules/NotFoundModule.html",[109,1.588,124,2.566]],["body/modules/NotFoundModule.html",[3,0.158,4,0.136,9,0.136,11,2.522,24,0.015,31,0.787,32,0.764,33,0.158,34,0.799,35,1.16,61,1.844,106,0.01,107,0.012,108,0.01,109,2.906,111,2.649,112,2.788,113,4.123,114,3.602,115,3.118,116,2.944,124,5.106,126,3.815,127,2.105,128,2.788,130,3.118,137,3.815,168,3.551,238,4.652,317,4.688,319,4.345,320,3.318,745,4.688,746,2.944,747,3.551,901,3.551,1208,4.182,1215,4.652,1216,4.652,1217,5.365,1218,6.565]],["title/interfaces/OAuthLogin.html",[346,0.216,961,2.769]],["body/interfaces/OAuthLogin.html",[0,0.434,3,0.145,4,0.124,9,0.124,12,1.147,14,1.193,16,1.24,18,1.24,20,0.251,21,0.661,23,0.375,24,0.015,25,0.843,31,0.803,32,0.699,33,0.145,34,0.731,53,1.103,64,1.147,106,0.009,107,0.012,108,0.009,148,2.15,157,2.306,163,3.721,164,2.2,183,2.102,257,3.609,258,3.202,270,2.852,279,1.24,281,2.2,282,3.504,346,0.274,347,1.193,483,3.841,505,4.293,507,5.582,510,2.436,511,2.55,512,2.335,514,3.841,518,2.102,580,1.984,584,1.568,901,4.889,927,3.035,948,3.825,949,3.825,950,5.385,951,4.255,952,4.255,953,4.255,954,2.852,955,3.825,957,4.841,958,4.841,961,4.865,962,4.255,964,3.825,965,3.825,966,3.825,967,3.825,968,2.852,969,3.825]],["title/components/OfficeOAuthCallbackComponent.html",[0,0.271,63,0.872]],["body/components/OfficeOAuthCallbackComponent.html",[0,0.4,1,0.846,2,1.198,3,0.103,4,0.088,5,0.988,6,0.988,7,0.988,8,0.988,9,0.088,12,1.87,13,0.95,14,1.948,16,1.246,18,1.246,20,0.178,21,0.525,23,0.21,24,0.015,25,0.431,26,1.068,27,1.027,29,1.238,31,0.747,32,0.495,33,0.103,34,0.518,35,0.752,36,1.4,37,1.4,38,0.846,39,1.769,40,0.988,41,1.011,42,0.988,43,0.846,44,0.988,45,0.846,46,0.988,47,0.846,48,0.813,49,1.4,50,0.846,51,0.813,52,0.988,53,0.782,54,0.988,55,0.752,56,1.295,57,0.988,58,0.752,59,0.752,60,0.988,61,0.813,62,0.988,63,1.4,64,1.706,65,1.887,66,0.988,67,0.813,68,0.988,69,0.723,70,0.879,71,0.667,72,1.626,73,0.846,74,0.988,75,0.846,76,0.879,77,0.988,78,0.813,79,0.988,80,0.752,81,0.846,82,0.988,83,0.752,84,1.295,85,0.723,86,0.752,87,0.694,88,0.813,89,0.988,90,0.813,91,0.914,92,0.988,93,0.752,94,0.988,95,0.752,96,1.295,97,0.988,98,0.988,99,0.752,100,0.782,101,0.879,102,0.95,103,0.813,104,0.95,105,0.988,106,0.006,107,0.009,108,0.006,151,2.151,157,1.635,163,3.648,164,1.559,179,2.711,217,1.934,220,0.988,233,4.122,249,3.842,254,1.108,255,0.846,256,3.016,257,3.968,258,3.299,260,0.879,261,0.879,268,0.782,274,1.255,277,1.365,279,1.246,280,0.95,281,3.06,286,3.52,343,1.198,346,0.194,376,5.013,459,2.484,484,2.711,593,2.345,598,2.551,921,2.484,922,4.447,923,2.711,924,4.274,925,2.711,926,3.789,927,2.151,928,4.274,929,4.964,930,4.462,931,3.016,932,2.711,933,3.016,934,3.016,935,3.016,936,3.016,937,3.016,938,3.016,939,3.016,940,2.711,941,3.016,942,2.711,943,1.49,944,4.274,945,2.711,946,2.711,1219,4.929,1220,3.478]],["title/components/OfficeOAuthComponent.html",[0,0.271,67,0.906]],["body/components/OfficeOAuthComponent.html",[0,0.422,1,0.933,2,1.283,3,0.113,4,0.097,5,1.09,6,1.09,7,1.09,8,1.09,9,0.097,12,1.886,13,1.048,14,1.965,16,1.334,18,1.334,20,0.196,21,0.562,23,0.232,24,0.015,26,1.178,27,1.133,29,1.405,31,0.692,32,0.546,33,0.113,34,0.571,35,0.829,36,1.499,37,1.499,38,0.933,39,1.846,40,1.09,41,1.055,42,1.09,43,0.933,44,1.09,45,0.933,46,1.09,47,0.933,48,0.897,49,1.499,50,0.933,51,0.897,52,1.09,53,0.863,54,1.09,55,0.829,56,1.387,57,1.09,58,0.829,59,0.829,60,1.09,61,0.897,62,1.09,63,0.863,64,1.744,65,1.467,66,1.09,67,1.52,68,1.09,69,0.797,70,0.97,71,0.736,72,1.714,73,0.933,74,1.09,75,0.933,76,0.97,77,1.09,78,0.897,79,1.09,80,0.829,81,0.933,82,1.09,83,0.829,84,1.387,85,0.797,86,0.829,87,0.766,88,0.897,89,1.09,90,0.897,91,1.008,92,1.09,93,0.829,94,1.09,95,0.829,96,1.387,97,1.09,98,1.09,99,0.829,100,0.863,101,0.97,102,1.048,103,0.897,104,1.048,105,1.09,106,0.007,107,0.01,108,0.007,157,1.803,183,2.783,217,2.07,231,4.866,254,1.187,255,0.933,257,3.777,258,2.48,260,0.97,261,0.97,268,1.187,274,1.384,277,1.505,279,1.334,280,1.048,281,2.705,343,1.58,593,2.472,598,2.662,922,4.866,925,2.99,926,3.994,930,4.703,932,2.99,940,2.99,945,2.99,946,2.99,1221,3.326,1222,6.033,1223,5.278,1224,3.836,1225,5.278,1226,3.836,1227,3.836,1228,3.836,1229,3.836]],["title/components/RdSubredditWatcherComponent.html",[0,0.271,69,0.806]],["body/components/RdSubredditWatcherComponent.html",[0,0.337,1,0.511,2,0.818,3,0.062,4,0.053,5,0.597,6,0.597,7,0.597,8,0.597,9,0.053,12,1.764,13,0.574,14,1.841,16,0.851,18,0.851,20,0.108,21,0.358,22,1.509,23,0.357,24,0.016,25,0.652,26,1.727,27,1.812,29,1.615,31,0.706,32,0.299,33,0.062,34,0.313,35,0.454,36,0.956,37,0.956,38,0.511,39,1.367,40,0.597,41,0.959,42,0.597,43,0.511,44,0.597,45,0.511,46,0.597,47,0.511,48,0.491,49,0.956,50,0.511,51,0.491,52,0.597,53,0.472,54,0.597,55,0.454,56,0.884,57,0.597,58,0.454,59,0.454,60,0.597,61,0.491,62,0.597,63,0.472,64,0.787,65,0.511,66,0.597,67,0.491,68,0.597,69,1,70,1.551,71,1.549,72,1.196,73,0.511,74,0.597,75,1.171,76,0.531,77,0.597,78,0.491,79,0.597,80,0.454,81,0.511,82,0.597,83,0.454,84,0.884,85,0.699,86,0.454,87,0.419,88,0.491,89,0.597,90,0.491,91,0.552,92,0.597,93,0.454,94,0.597,95,0.454,96,0.884,97,0.597,98,0.597,99,0.454,100,0.472,101,1.064,102,0.574,103,0.491,104,0.574,105,0.597,106,0.004,107,0.006,108,0.004,127,1.889,148,0.727,183,1.441,190,2.158,213,2.191,216,1.667,217,0.824,220,1.367,246,2.403,254,0.757,255,0.511,260,1.217,261,1.217,268,1.542,274,0.758,277,0.824,279,0.851,280,0.574,297,0.942,303,2.31,343,1.841,346,0.117,349,2.028,357,3.753,380,0.947,446,0.861,487,1.956,506,0.861,510,0.824,512,0.79,515,4.014,518,0.9,550,1.749,554,2.624,560,1.652,563,1.661,564,1.509,565,1.281,576,4.644,580,1.345,584,1.539,593,1.725,598,1.972,613,1.583,616,0.987,639,0.861,653,1.981,716,1.582,725,1.221,764,0.987,812,0.987,840,0.987,841,0.987,842,0.987,843,1.037,844,0.987,845,0.987,846,2.158,847,0.987,853,1.037,861,1.092,863,1.037,864,1.391,868,2.31,870,1.5,943,1.441,1020,1.979,1027,2.377,1029,2.502,1032,2.377,1056,2.078,1066,1.037,1067,1.037,1077,1.037,1079,2.775,1082,1.037,1083,1.037,1085,1.661,1089,1.037,1092,1.661,1093,1.092,1113,1.037,1114,1.037,1121,1.153,1126,1.092,1127,1.092,1230,5.853,1231,1.221,1232,2.604,1233,2.081,1234,3.651,1235,2.447,1236,2.798,1237,3.366,1238,3.366,1239,2.641,1240,2.798,1241,1.638,1242,2.101,1243,2.918,1244,1.822,1245,2.101,1246,2.918,1247,2.101,1248,2.101,1249,1.822,1250,2.101,1251,1.822,1252,2.101,1253,2.101,1254,2.101,1255,2.101,1256,2.101,1257,2.101,1258,1.391,1259,1.391,1260,1.391,1261,1.391,1262,1.822,1263,1.5,1264,1.638,1265,1.638,1266,1.822,1267,2.403,1268,2.918,1269,1.221,1270,1.956,1271,1.822,1272,4.175,1273,1.299,1274,2.447,1275,1.822,1276,1.956,1277,2.918,1278,2.798,1279,1.221,1280,1.221,1281,1.221,1282,2.447,1283,1.956,1284,1.822,1285,2.918,1286,1.822,1287,2.918,1288,1.822,1289,1.822,1290,1.299,1291,1.299,1292,1.822,1293,1.221,1294,1.221,1295,1.221,1296,2.081,1297,3.366,1298,3.366,1299,3.366,1300,2.918,1301,3.366,1302,2.918,1303,3.366,1304,2.624,1305,3.366,1306,1.5,1307,2.604,1308,1.299,1309,1.299,1310,1.299]],["title/components/RefreshRateInputDialogComponent.html",[0,0.271,73,0.943]],["body/components/RefreshRateInputDialogComponent.html",[0,0.412,1,0.892,2,1.244,3,0.108,4,0.093,5,1.042,6,1.042,7,1.042,8,1.042,9,0.093,12,1.879,13,1.002,14,1.957,16,1.293,18,1.293,20,0.188,23,0.356,24,0.015,27,1.083,29,1.378,31,0.545,32,0.522,33,0.108,34,0.546,35,0.793,36,1.453,37,1.453,38,0.892,39,1.811,40,1.042,41,1.089,42,1.042,43,0.892,44,1.042,45,0.892,46,1.042,47,0.892,48,0.858,49,1.453,50,0.892,51,0.858,52,1.042,53,0.825,54,1.042,55,0.793,56,1.344,57,1.042,58,0.793,59,0.793,60,1.042,61,0.858,62,1.042,63,0.825,64,1.196,65,0.892,66,1.042,67,0.858,68,1.042,69,0.762,70,0.927,71,0.703,72,1.673,73,1.55,74,2.124,75,1.93,76,2.006,77,1.042,78,0.858,79,1.042,80,0.793,81,0.892,82,1.042,83,0.793,84,1.344,85,0.762,86,0.793,87,0.732,88,0.858,89,1.042,90,0.858,91,0.964,92,1.042,93,0.793,94,1.042,95,0.793,96,1.344,97,1.042,98,1.042,99,0.793,100,0.825,101,0.927,102,1.002,103,0.858,104,1.002,105,1.042,106,0.007,107,0.01,108,0.007,145,1.724,254,1.15,255,0.892,260,1.293,261,1.293,268,1.15,280,1.002,343,1.55,549,2.659,565,1.244,613,2.215,682,5.226,690,3.988,712,4.788,754,5.226,1311,3.18,1312,5.116,1313,5.892,1314,5.116,1315,6.021,1316,6.375,1317,3.668,1318,6.375,1319,5.116,1320,5.116,1321,3.668,1322,5.116,1323,3.668,1324,3.668,1325,3.668,1326,4.436,1327,5.116]],["title/components/RegisterComponent.html",[0,0.271,78,0.906]],["body/components/RegisterComponent.html",[0,0.386,1,0.792,2,1.143,3,0.096,4,0.083,5,0.925,6,0.925,7,0.925,8,0.925,9,0.083,12,1.858,13,0.89,14,1.937,16,1.188,18,1.188,20,0.167,23,0.333,24,0.015,29,1.016,31,0.643,32,0.464,33,0.096,34,0.485,35,0.704,36,1.335,37,1.335,38,0.792,39,1.716,40,0.925,41,1.184,42,0.925,43,0.792,44,0.925,45,0.792,46,0.925,47,0.792,48,0.761,49,1.335,50,0.792,51,0.761,52,0.925,53,0.732,54,0.925,55,0.704,56,1.236,57,0.925,58,0.704,59,0.704,60,0.925,61,0.761,62,0.925,63,0.732,64,1.099,65,0.792,66,0.925,67,0.761,68,0.925,69,0.677,70,0.823,71,0.624,72,1.567,73,0.792,74,0.925,75,0.792,76,0.823,77,0.925,78,1.413,79,0.925,80,0.704,81,0.792,82,0.925,83,0.704,84,1.236,85,0.677,86,0.704,87,0.65,88,0.761,89,0.925,90,0.761,91,0.856,92,0.925,93,0.704,94,0.925,95,0.704,96,1.236,97,0.925,98,0.925,99,0.704,100,0.732,101,0.823,102,0.89,103,0.761,104,0.89,105,0.925,106,0.006,107,0.009,108,0.006,133,5.494,157,1.53,163,3.663,164,1.46,178,4.13,191,4.769,212,4.077,245,5.79,254,1.057,255,0.792,257,3.512,258,3.236,260,0.823,261,0.823,268,0.732,270,2.733,279,1.188,281,1.46,282,2.326,483,3.737,522,2.156,580,1.763,584,1.931,616,2.21,653,1.768,829,3.665,927,2.014,949,3.665,954,3.207,955,3.665,956,3.112,957,4.711,958,4.711,964,2.539,965,2.539,966,2.539,967,2.539,968,1.893,969,2.539,971,4.077,972,4.077,973,4.077,974,4.077,975,3.665,976,4.077,977,4.077,978,6.581,979,5.24,980,2.824,981,2.824,982,5.24,984,4.077,985,4.077,986,4.077,987,4.077,990,4.077,992,2.824,993,2.824,1326,4.077,1328,2.824,1329,5.518,1330,5.518,1331,4.702,1332,3.257,1333,3.257,1334,3.257,1335,3.257,1336,4.702,1337,4.702,1338,4.702,1339,4.702,1340,4.702,1341,4.702,1342,6.043,1343,4.702,1344,3.257,1345,3.257]],["title/interfaces/SpotifyArtist.html",[346,0.216,432,2.015]],["body/interfaces/SpotifyArtist.html",[3,0.163,4,0.14,9,0.14,20,0.283,21,0.711,23,0.469,24,0.015,25,1.002,33,0.163,41,1.213,106,0.01,107,0.012,108,0.01,346,0.308,347,1.344,380,1.679,432,3.474,565,1.889,1346,4.792,1347,4.792,1348,6.473,1349,7.466,1350,7.466,1351,6.473]],["title/components/SpotifyArtistComponent.html",[0,0.271,80,0.838]],["body/components/SpotifyArtistComponent.html",[0,0.338,1,0.515,2,0.824,3,0.062,4,0.054,5,0.602,6,0.602,7,0.602,8,0.602,9,0.054,12,1.766,13,0.579,14,1.843,16,0.856,18,0.856,20,0.108,21,0.361,23,0.393,24,0.016,25,0.599,26,1.625,27,1.562,29,1.6,31,0.732,32,0.302,33,0.062,34,0.315,35,0.458,36,0.962,37,0.962,38,0.515,39,1.374,40,0.602,41,0.916,42,0.602,43,0.515,44,0.602,45,0.515,46,0.602,47,0.515,48,0.495,49,0.962,50,0.515,51,0.495,52,0.602,53,0.476,54,0.602,55,0.458,56,0.89,57,0.602,58,0.458,59,0.458,60,0.602,61,0.495,62,0.602,63,0.476,64,0.792,65,0.515,66,0.602,67,0.495,68,0.602,69,0.44,70,0.536,71,0.406,72,1.203,73,0.515,74,0.602,75,1.176,76,0.536,77,0.602,78,0.495,79,0.602,80,1.046,81,1.582,82,0.602,83,0.458,84,0.89,85,0.44,86,0.458,87,0.423,88,0.495,89,0.602,90,0.495,91,0.557,92,0.602,93,0.458,94,0.602,95,0.458,96,0.89,97,0.602,98,0.602,99,0.458,100,0.476,101,0.536,102,0.579,103,0.495,104,0.579,105,0.602,106,0.004,107,0.006,108,0.004,148,1.832,183,1.451,190,0.95,213,2.254,216,1.466,220,1.603,240,1.519,254,0.762,255,0.515,260,1.07,261,1.07,268,1.495,270,3.577,274,0.764,277,0.831,279,0.856,280,0.579,297,0.95,322,1.513,343,1.694,349,2.035,380,1.088,432,2.2,434,3.455,445,2.243,446,0.868,506,0.868,510,1.329,511,1.101,512,1.274,516,3.301,518,0.907,543,2.803,549,1.101,560,1.661,563,1.673,564,1.519,565,1.286,574,4.927,580,1.353,584,1.546,593,1.735,598,1.982,613,1.592,616,2.784,639,0.868,653,0.797,705,2.243,716,1.592,724,2.641,726,1.652,728,1.837,729,1.513,764,0.996,812,0.996,840,0.996,841,0.996,842,0.996,843,1.046,844,0.996,845,0.996,846,0.95,847,0.996,852,2.938,853,1.046,861,1.761,863,1.046,869,1.837,870,1.513,874,2.938,877,1.837,883,2.938,906,1.837,943,0.907,954,3.934,968,3.279,1015,4.124,1019,3.301,1020,1.99,1022,3.771,1027,2.388,1029,2.514,1032,2.388,1056,2.09,1066,1.046,1067,1.046,1068,3.771,1072,3.301,1073,1.652,1075,1.652,1077,1.046,1079,2.652,1082,1.046,1083,1.046,1085,1.046,1086,1.652,1089,1.046,1090,3.301,1091,1.652,1092,1.673,1093,1.101,1113,1.046,1114,1.046,1121,1.162,1126,1.761,1127,1.101,1197,2.938,1202,2.938,1239,1.859,1315,1.837,1348,2.938,1351,2.938,1352,6.454,1353,1.837,1354,4.234,1355,3.388,1356,4.234,1357,5.29,1358,4.234,1359,4.838,1360,4.838,1361,4.838,1362,2.119,1363,2.119,1364,2.119,1365,2.119,1366,2.119,1367,2.119,1368,2.119,1369,2.119,1370,3.388,1371,4.838,1372,2.119,1373,2.119,1374,2.119,1375,2.119,1376,2.119,1377,2.119,1378,2.119,1379,2.119,1380,2.119,1381,4.234,1382,2.119,1383,2.119,1384,2.119,1385,2.119,1386,2.119,1387,2.119,1388,4.234,1389,3.388,1390,2.119,1391,3.388,1392,3.388,1393,2.119,1394,4.838,1395,2.119,1396,2.119,1397,4.234,1398,2.119,1399,2.119,1400,2.119,1401,2.119,1402,2.119,1403,2.119,1404,3.388,1405,3.388,1406,3.388,1407,2.938,1408,3.388,1409,3.388,1410,4.234,1411,3.388,1412,2.119,1413,3.388,1414,2.119,1415,2.119,1416,2.119,1417,2.119,1418,2.119,1419,2.119,1420,2.119,1421,2.119,1422,2.119,1423,3.388,1424,2.119]],["title/interfaces/Subreddit.html",[71,0.743,346,0.216]],["body/interfaces/Subreddit.html",[3,0.166,4,0.143,9,0.143,20,0.289,21,0.72,23,0.464,24,0.015,25,0.966,33,0.166,71,1.297,106,0.011,107,0.013,108,0.011,346,0.314,347,1.371,565,1.947,1300,6.517,1425,4.89,1426,7.517,1427,7.517,1428,6.517,1429,7.517]],["title/interfaces/SubredditCreationFormatted.html",[346,0.216,1267,2.769]],["body/interfaces/SubredditCreationFormatted.html",[0,0.35,3,0.105,4,0.09,9,0.09,12,0.831,14,0.864,16,0.898,18,0.898,20,0.182,21,0.533,23,0.215,24,0.016,25,0.778,31,0.752,32,0.506,33,0.105,34,0.529,69,0.739,70,1.464,71,1.441,75,1.217,85,0.739,101,0.898,106,0.007,107,0.009,108,0.007,127,1.394,148,1.231,190,2.597,213,2.497,216,2.177,217,1.394,220,1.645,274,1.282,277,1.394,279,0.898,280,0.971,297,1.593,303,1.95,343,1.858,346,0.198,347,0.864,349,2.09,357,2.771,380,0.799,446,1.456,506,1.456,510,1.394,512,1.337,515,4.137,518,1.522,560,1.963,564,1.593,565,1.217,576,2.198,580,1.599,584,1.136,593,2.05,598,1.456,613,1.337,639,1.456,653,2.364,716,2.352,812,1.67,840,1.67,868,1.95,943,2.143,1020,1.67,1027,1.755,1029,1.847,1032,1.755,1056,2.471,1066,1.755,1067,1.755,1077,1.755,1079,3.32,1082,1.755,1083,1.755,1085,2.471,1089,1.755,1092,2.471,1093,1.847,1113,1.755,1114,1.755,1230,2.771,1231,2.066,1232,2.198,1233,2.198,1234,3.082,1235,2.066,1236,2.066,1239,1.95,1240,2.066,1243,3.082,1246,3.082,1266,3.082,1267,4.137,1268,5.746,1269,2.066,1270,2.909,1271,3.082,1272,5.452,1273,2.198,1274,3.367,1275,3.082,1276,2.909,1277,4.339,1278,3.654,1279,2.066,1280,2.066,1281,2.066,1282,3.367,1283,2.909,1284,3.082,1285,4.339,1286,3.082,1287,4.339,1288,3.082,1289,3.082,1290,2.198,1291,2.198,1292,3.082,1293,2.066,1294,2.066,1295,2.066]],["title/interfaces/Thumbnail.html",[346,0.216,1430,2.253]],["body/interfaces/Thumbnail.html",[3,0.18,4,0.154,9,0.154,20,0.312,21,0.753,23,0.368,24,0.015,25,0.927,33,0.18,106,0.011,107,0.013,108,0.011,346,0.339,347,1.48,411,6.007,1430,4.114,1431,5.278]],["title/interfaces/TtvStream.html",[346,0.216,449,2.566]],["body/interfaces/TtvStream.html",[3,0.16,4,0.138,9,0.138,20,0.278,21,0.704,22,3.327,23,0.486,24,0.015,25,1.015,33,0.16,106,0.01,107,0.012,108,0.01,346,0.303,347,1.32,449,4.376,565,1.733,1304,5.785,1432,4.232,1433,4.707,1434,7.421,1435,7.421,1436,7.421,1437,7.421]],["title/components/TtvStreamWatcherComponent.html",[0,0.271,83,0.838]],["body/components/TtvStreamWatcherComponent.html",[0,0.338,1,0.513,2,0.821,3,0.062,4,0.053,5,0.599,6,0.599,7,0.599,8,0.599,9,0.053,12,1.765,13,0.576,14,1.842,16,0.853,18,0.853,20,0.108,21,0.359,22,1.513,23,0.371,24,0.015,25,0.597,26,1.73,27,1.814,29,1.616,31,0.707,32,0.3,33,0.062,34,0.314,35,0.456,36,0.959,37,0.959,38,0.513,39,1.37,40,0.599,41,0.96,42,0.599,43,0.513,44,0.599,45,0.513,46,0.599,47,0.513,48,0.493,49,0.959,50,0.513,51,0.493,52,0.599,53,0.474,54,0.599,55,0.456,56,0.887,57,0.599,58,0.456,59,0.456,60,0.599,61,0.493,62,0.599,63,0.474,64,0.789,65,0.513,66,0.599,67,0.493,68,0.599,69,0.438,70,0.533,71,0.404,72,1.199,73,0.513,74,0.599,75,1.173,76,0.533,77,0.599,78,0.493,79,0.599,80,0.456,81,0.513,82,0.599,83,1.043,84,1.665,85,1.679,86,0.456,87,0.421,88,0.493,89,0.599,90,0.493,91,0.554,92,0.599,93,0.456,94,0.599,95,0.456,96,0.887,97,0.599,98,0.599,99,0.456,100,0.474,101,1.067,102,0.576,103,0.493,104,0.576,105,0.599,106,0.004,107,0.006,108,0.004,127,1.893,148,0.73,183,1.446,190,2.163,213,2.194,216,1.671,217,0.827,220,1.37,254,0.759,255,0.513,260,1.22,261,1.22,268,1.544,274,0.761,277,0.827,279,0.853,280,0.576,297,0.945,303,2.316,343,1.842,349,2.031,380,0.949,446,0.864,449,2.794,454,1.587,487,1.962,506,0.864,510,0.827,512,0.793,517,4.021,518,0.903,546,2.411,550,1.754,560,1.656,563,1.666,564,1.513,565,1.283,569,4.646,580,1.349,584,1.542,593,1.729,598,1.977,613,1.587,616,0.991,639,0.864,653,1.985,716,1.587,725,1.226,764,0.991,812,0.991,840,0.991,841,0.991,842,0.991,843,1.041,844,0.991,845,0.991,846,2.163,847,0.991,853,1.041,861,1.096,863,1.041,864,1.396,868,2.316,870,1.506,943,1.446,1020,1.984,1027,2.382,1029,2.508,1032,2.382,1056,2.084,1066,1.041,1067,1.041,1077,1.041,1079,2.779,1082,1.041,1083,1.041,1085,1.666,1089,1.041,1092,1.666,1093,1.096,1113,1.041,1114,1.041,1121,1.157,1126,1.096,1127,1.096,1231,1.226,1232,2.61,1233,2.088,1235,2.453,1236,2.804,1239,2.647,1240,2.804,1249,1.829,1251,1.829,1258,1.396,1259,1.396,1260,1.396,1261,1.396,1264,1.644,1265,1.644,1269,1.226,1270,1.962,1273,1.304,1274,2.453,1276,1.962,1278,2.804,1279,1.226,1280,1.226,1281,1.226,1282,2.453,1283,1.962,1290,1.304,1291,1.304,1293,1.226,1294,1.226,1295,1.226,1296,2.088,1304,2.632,1306,1.506,1307,2.61,1308,1.304,1309,1.304,1310,1.304,1438,5.856,1439,3.66,1440,3.376,1441,4.825,1442,3.376,1443,2.109,1444,2.109,1445,3.376,1446,2.109,1447,2.109,1448,3.376,1449,2.109,1450,2.109,1451,2.109,1452,2.109,1453,2.109,1454,2.109,1455,2.109,1456,1.506,1457,1.506,1458,1.829,1459,1.506,1460,1.829,1461,1.829,1462,4.184,1463,1.829,1464,3.376,1465,2.109,1466,3.376,1467,3.376,1468,3.376,1469,4.221,1470,2.109,1471,3.376,1472,3.376,1473,3.376,1474,3.376,1475,3.376,1476,3.376,1477,3.376,1478,2.927]],["title/interfaces/TtvUser.html",[346,0.216,451,2.566]],["body/interfaces/TtvUser.html",[3,0.163,4,0.14,9,0.14,11,3.509,20,0.283,21,0.711,23,0.469,24,0.015,25,1.011,33,0.163,106,0.01,107,0.012,108,0.01,346,0.308,347,1.344,451,4.424,565,1.747,1428,6.473,1432,4.308,1479,4.792,1480,7.466,1481,7.466,1482,7.466,1483,7.466]],["title/components/TtvUserWatcherComponent.html",[0,0.271,86,0.838]],["body/components/TtvUserWatcherComponent.html",[0,0.338,1,0.515,2,0.823,3,0.062,4,0.054,5,0.601,6,0.601,7,0.601,8,0.601,9,0.054,12,1.765,13,0.578,14,1.843,16,0.856,18,0.856,20,0.108,21,0.36,23,0.372,24,0.016,25,0.599,26,1.733,27,1.666,29,1.617,31,0.707,32,0.301,33,0.062,34,0.315,35,0.458,36,0.962,37,0.962,38,0.515,39,1.373,40,0.601,41,0.962,42,0.601,43,0.515,44,0.601,45,0.515,46,0.601,47,0.515,48,0.495,49,0.962,50,0.515,51,0.495,52,0.601,53,0.476,54,0.601,55,0.458,56,0.89,57,0.601,58,0.458,59,0.458,60,0.601,61,0.495,62,0.601,63,0.476,64,0.792,65,0.515,66,0.601,67,0.495,68,0.601,69,0.44,70,0.535,71,0.406,72,1.202,73,0.515,74,0.601,75,1.176,76,0.535,77,0.601,78,0.495,79,0.601,80,0.458,81,0.515,82,0.601,83,0.458,84,1.667,85,0.44,86,1.045,87,1.614,88,0.495,89,0.601,90,0.495,91,0.556,92,0.601,93,0.458,94,0.601,95,0.458,96,0.89,97,0.601,98,0.601,99,0.458,100,0.476,101,1.07,102,0.578,103,0.495,104,0.578,105,0.601,106,0.004,107,0.006,108,0.004,127,1.897,148,0.733,183,1.45,190,2.168,213,2.197,216,1.674,217,0.831,220,1.373,254,0.761,255,0.515,260,1.222,261,1.222,268,1.545,274,0.764,277,0.831,279,0.856,280,0.578,297,0.949,303,2.322,343,1.843,349,2.035,380,0.952,396,2.418,446,0.867,451,2.801,487,1.968,506,0.867,510,0.831,512,0.796,517,4.028,518,0.907,546,2.418,550,1.76,560,1.66,563,1.672,564,1.518,565,1.286,569,4.649,580,1.352,584,1.545,593,1.734,598,1.981,613,1.591,639,0.867,653,1.989,716,1.591,725,1.23,764,0.995,812,0.995,840,0.995,841,0.995,842,0.995,843,1.045,844,0.995,845,0.995,846,2.168,847,0.995,853,1.045,861,1.1,863,1.045,868,2.322,943,1.45,1020,1.989,1027,2.387,1029,2.513,1032,2.387,1056,2.089,1066,1.045,1067,1.045,1077,1.045,1079,2.783,1082,1.045,1083,1.045,1085,1.672,1089,1.045,1092,1.672,1093,1.1,1113,1.045,1114,1.045,1121,1.161,1126,1.1,1127,1.1,1231,1.23,1232,2.617,1233,2.094,1235,2.46,1236,2.811,1239,2.653,1240,2.811,1241,1.65,1244,1.836,1258,1.401,1259,1.401,1260,1.401,1261,1.401,1263,1.512,1269,1.23,1270,1.968,1273,1.309,1274,2.46,1276,1.968,1278,2.811,1279,1.23,1280,1.23,1281,1.23,1282,2.46,1283,1.968,1290,1.309,1291,1.309,1293,1.23,1294,1.23,1295,1.23,1296,2.094,1302,2.936,1307,2.617,1308,1.309,1309,1.309,1310,1.309,1438,5.86,1439,3.669,1456,1.512,1457,1.512,1459,1.512,1460,1.836,1461,1.836,1462,4.193,1463,1.836,1484,3.386,1485,4.836,1486,3.386,1487,1.836,1488,1.836,1489,3.386,1490,2.117,1491,1.836,1492,3.386,1493,1.836,1494,2.117,1495,1.836,1496,1.65,1497,1.836,1498,1.65,1499,2.117,1500,1.836,1501,1.836,1502,3.386,1503,2.117,1504,3.386,1505,3.386,1506,3.386,1507,4.232,1508,2.117,1509,3.386,1510,4.836,1511,3.386,1512,3.386,1513,2.64,1514,3.386,1515,1.512]],["title/interfaces/User.html",[87,0.774,346,0.216]],["body/interfaces/User.html",[3,0.176,4,0.151,9,0.151,20,0.306,21,0.745,23,0.423,24,0.015,25,0.979,33,0.176,87,1.397,106,0.011,107,0.013,108,0.011,178,4.736,346,0.333,347,1.451,824,5.969,1516,5.176]],["title/components/UsersComponent.html",[0,0.271,88,0.906]],["body/components/UsersComponent.html",[0,0.377,1,0.761,2,1.111,3,0.092,4,0.079,5,0.889,6,0.889,7,0.889,8,0.889,9,0.079,12,1.851,13,0.855,14,1.929,16,1.155,18,1.155,20,0.16,21,0.486,22,2.66,23,0.381,24,0.015,25,0.668,26,1.938,27,1.863,29,1.507,31,0.701,32,0.446,33,0.092,34,0.466,35,0.677,36,1.298,37,1.298,38,0.761,39,1.685,40,0.889,41,1.025,42,0.889,43,0.761,44,0.889,45,0.761,46,0.889,47,0.761,48,0.732,49,1.298,50,0.761,51,0.732,52,0.889,53,0.704,54,0.889,55,0.677,56,1.201,57,0.889,58,0.677,59,0.677,60,0.889,61,0.732,62,0.889,63,0.704,64,1.068,65,0.761,66,0.889,67,0.732,68,0.889,69,0.651,70,0.791,71,0.6,72,1.533,73,0.761,74,0.889,75,0.761,76,0.791,77,0.889,78,0.732,79,0.889,80,0.677,81,0.761,82,0.889,83,0.677,84,1.201,85,0.651,86,0.677,87,1.077,88,1.387,89,0.889,90,0.732,91,0.823,92,0.889,93,0.677,94,0.889,95,0.677,96,1.201,97,0.889,98,0.889,99,0.677,100,0.704,101,0.791,102,0.855,103,0.732,104,0.855,105,0.889,106,0.006,107,0.009,108,0.006,145,1.471,148,1.084,178,2.826,188,4.783,190,2.419,213,2.281,220,1.792,246,5.229,254,1.027,255,0.761,260,1.155,261,1.155,268,1.027,279,1.155,280,0.855,343,1.442,349,2.376,380,1.213,396,3.263,505,3.448,510,1.228,511,1.627,512,1.177,580,1.724,584,1.896,639,1.283,653,1.718,709,5.712,729,2.236,764,1.471,794,2.715,826,4.206,830,4.625,833,2.715,846,1.404,857,4.206,862,3.962,865,2.715,866,2.715,901,3.927,902,3.962,1020,2.536,1079,2.965,1517,2.715,1518,5.396,1519,4.57,1520,6.309,1521,4.57,1522,4.57,1523,3.131,1524,4.57,1525,3.131,1526,3.131,1527,3.131,1528,3.131,1529,3.131,1530,3.131,1531,4.57,1532,4.57,1533,4.57,1534,4.57,1535,4.57,1536,3.131,1537,4.57,1538,4.57,1539,3.131,1540,3.131]],["title/modules/UsersModule.html",[109,1.588,125,2.566]],["body/modules/UsersModule.html",[3,0.144,4,0.124,9,0.124,24,0.015,31,0.833,32,0.697,33,0.144,34,0.729,35,1.059,88,1.764,106,0.009,107,0.012,108,0.009,109,2.007,111,2.418,112,2.546,113,3.956,114,3.403,115,2.847,116,2.688,123,4.664,125,5.217,126,3.605,127,1.922,128,2.546,130,3.605,137,3.605,142,4.835,143,4.835,145,2.302,146,4.835,147,3.498,148,1.696,167,4.247,319,4.106,320,3.029,326,4.43,328,4.43,329,4.835,331,4.835,332,3.498,333,3.498,731,4.664,738,5.379,740,5.379,745,4.43,746,2.688,747,3.242,918,5.379,919,5.379,920,5.379,1541,4.247,1542,4.247,1543,4.899,1544,4.899,1545,4.899,1546,4.899]],["title/components/VerifyAuthComponent.html",[0,0.271,90,0.906]],["body/components/VerifyAuthComponent.html",[0,0.425,1,0.944,2,1.294,3,0.115,4,0.099,5,1.103,6,1.103,7,1.103,8,1.103,9,0.099,12,1.888,13,1.061,14,1.967,16,1.346,18,1.346,20,0.199,23,0.235,24,0.015,29,1.151,31,0.695,32,0.553,33,0.115,34,0.578,35,0.84,36,1.512,37,1.512,38,0.944,39,1.856,40,1.103,41,1.061,42,1.103,43,0.944,44,1.103,45,0.944,46,1.103,47,0.944,48,0.908,49,1.512,50,0.944,51,0.908,52,1.103,53,0.873,54,1.103,55,0.84,56,1.399,57,1.103,58,0.84,59,0.84,60,1.103,61,0.908,62,1.103,63,0.873,64,1.245,65,0.944,66,1.103,67,0.908,68,1.103,69,0.807,70,0.982,71,0.745,72,1.725,73,0.944,74,1.103,75,0.944,76,0.982,77,1.103,78,0.908,79,1.103,80,0.84,81,0.944,82,1.103,83,0.84,84,1.399,85,0.807,86,0.84,87,0.776,88,0.908,89,1.103,90,1.528,91,1.937,92,1.103,93,0.84,94,1.103,95,0.84,96,1.399,97,1.103,98,1.103,99,0.84,100,0.873,101,0.982,102,1.061,103,0.908,104,1.061,105,1.103,106,0.007,107,0.01,108,0.007,151,2.402,163,3.762,164,1.741,220,1.103,235,4.337,247,4.15,254,1.197,255,0.944,258,3.402,260,0.982,261,0.982,268,0.873,279,1.346,280,1.061,281,2.386,286,2.774,343,1.294,375,3.368,376,5.048,459,2.774,580,1.941,584,2.088,653,1.461,927,2.402,942,3.028,943,1.664,954,2.258,968,3.094,1547,5.266,1548,3.368,1549,6.073,1550,5.323,1551,3.885,1552,3.885,1553,3.885,1554,3.885,1555,3.885,1556,3.885]],["title/interfaces/Weather.html",[346,0.216,429,2.015]],["body/interfaces/Weather.html",[3,0.152,4,0.131,9,0.131,20,0.264,21,0.682,23,0.48,24,0.015,25,1.025,33,0.152,106,0.01,107,0.012,108,0.01,346,0.288,347,1.256,429,3.332,1186,5.685,1557,4.478,1558,7.293,1559,7.293,1560,6.324,1561,7.293,1562,7.293,1563,7.293,1564,7.293,1565,7.293,1566,7.293]],["title/components/WeatherComponent.html",[0,0.271,93,0.838]],["body/components/WeatherComponent.html",[0,0.368,1,0.601,2,0.93,3,0.073,4,0.063,5,0.702,6,0.702,7,0.702,8,0.702,9,0.063,12,1.802,13,0.675,14,1.88,16,0.967,18,0.967,20,0.127,21,0.407,23,0.392,24,0.016,25,0.652,26,1.618,27,1.779,29,1.63,31,0.725,32,0.352,33,0.073,34,0.368,35,0.534,36,1.086,37,1.086,38,0.601,39,1.496,40,0.702,41,1.02,42,0.702,43,0.601,44,0.702,45,0.601,46,0.702,47,0.601,48,0.578,49,1.086,50,0.601,51,0.578,52,0.702,53,0.556,54,0.702,55,0.534,56,1.005,57,0.702,58,0.534,59,0.534,60,0.702,61,0.578,62,0.702,63,0.556,64,0.894,65,0.601,66,0.702,67,0.578,68,0.702,69,0.514,70,0.625,71,0.474,72,1.329,73,0.601,74,0.702,75,1.281,76,0.625,77,0.702,78,0.578,79,0.702,80,0.534,81,0.601,82,0.702,83,0.534,84,1.005,85,0.514,86,0.534,87,0.493,88,0.578,89,0.702,90,0.578,91,0.649,92,0.702,93,1.139,94,0.702,95,0.534,96,1.005,97,0.702,98,0.702,99,0.534,100,0.556,101,0.625,102,0.675,103,0.578,104,0.675,105,0.702,106,0.005,107,0.007,108,0.005,127,2.066,190,2.361,213,1.62,216,1.62,217,0.97,220,1.496,254,0.86,255,0.601,260,1.331,261,1.331,268,1.582,274,0.892,277,0.97,279,0.967,280,0.675,297,1.108,303,2.567,343,1.867,349,2.173,380,1.052,429,3.601,446,1.013,454,1.162,487,2.223,506,1.013,550,1.988,560,1.836,563,1.888,564,1.715,565,1.385,580,1.495,584,1.683,593,1.917,598,2.158,613,1.76,639,1.013,653,1.981,716,1.798,725,1.437,764,1.162,812,1.162,840,1.162,841,1.162,842,1.162,843,1.22,844,1.162,845,1.162,846,2.361,847,1.162,853,1.22,861,1.285,863,1.22,864,1.636,868,2.567,943,1.059,1020,2.199,1027,2.6,1032,2.6,1056,2.31,1066,1.22,1067,1.22,1077,1.22,1079,2.677,1082,1.22,1083,1.22,1085,1.888,1089,1.22,1092,1.888,1113,1.22,1114,1.22,1126,1.285,1127,1.285,1186,3.648,1235,2.72,1236,3.061,1239,2.89,1240,3.061,1269,1.437,1270,2.223,1274,2.72,1276,2.223,1278,3.061,1279,1.437,1280,1.437,1281,1.437,1282,2.72,1283,2.223,1293,1.437,1294,1.437,1295,1.437,1296,2.366,1306,1.765,1307,2.894,1308,1.529,1309,1.529,1310,1.529,1515,1.765,1560,3.317,1567,2.143,1568,4.679,1569,3.825,1570,3.825,1571,5.267,1572,3.825,1573,2.472,1574,2.472,1575,3.825,1576,2.472,1577,2.472,1578,3.825,1579,2.472,1580,2.472,1581,2.472,1582,2.472,1583,2.472,1584,2.472,1585,2.472,1586,2.472,1587,2.472,1588,2.472,1589,2.472,1590,2.472,1591,2.472,1592,2.472,1593,2.472,1594,2.472,1595,2.472,1596,3.825,1597,2.472,1598,3.825,1599,2.472,1600,3.825,1601,2.472,1602,2.472,1603,2.472,1604,2.472,1605,3.825,1606,3.825,1607,3.825,1608,3.825,1609,3.825,1610,3.825,1611,3.825,1612,3.825,1613,3.825,1614,3.825]],["title/interfaces/WidgetConfig.html",[346,0.216,443,2.769]],["body/interfaces/WidgetConfig.html",[3,0.163,4,0.14,9,0.14,20,0.283,21,0.711,23,0.485,24,0.015,25,0.988,33,0.163,106,0.01,107,0.012,108,0.01,346,0.308,347,1.344,380,1.679,443,4.773,446,3.058,565,1.941,611,5.332,612,5.332,613,2.807,1615,3.947,1616,3.947]],["title/interfaces/WidgetGridConfig.html",[346,0.216,421,2.566]],["body/interfaces/WidgetGridConfig.html",[3,0.166,4,0.142,9,0.142,20,0.287,21,0.718,23,0.484,24,0.015,25,0.965,33,0.166,48,1.313,106,0.01,107,0.013,108,0.01,346,0.313,347,1.365,380,1.688,421,4.467,565,1.946,611,5.361,612,5.361,613,2.823,1615,4.011,1616,4.011]],["title/interfaces/WidgetProps.html",[346,0.216,508,2.398]],["body/interfaces/WidgetProps.html",[3,0.136,4,0.117,9,0.117,20,0.237,21,0.637,23,0.438,24,0.015,25,0.967,31,0.824,33,0.195,41,1.138,55,1.293,56,1.572,58,1.293,59,1,69,1.243,70,1.17,71,1.147,80,1.293,81,1.125,83,1.293,84,1.572,85,1.243,86,1.293,87,1.194,93,1.293,95,1.293,96,1.572,99,1.293,100,1.345,106,0.009,107,0.011,108,0.009,240,2.074,343,1.125,346,0.333,347,1.125,380,1.631,429,2.405,432,2.405,454,2.811,508,3.699,523,3.305,525,5.003,529,4.637,531,4.637,533,3.305,536,3.305,540,3.305,547,3.305,551,3.305,555,3.305,560,1.815,561,3.305,562,3.305,564,2.074,565,1.838,567,3.699,568,5.655,569,3.699,570,3.063,571,3.607,572,3.063,573,3.607,574,3.063,575,3.607,576,2.862,577,4.012,578,3.063]],["title/interfaces/WidgetQueryConfig.html",[346,0.216,425,2.769]],["body/interfaces/WidgetQueryConfig.html",[3,0.175,4,0.151,9,0.151,20,0.304,21,0.743,23,0.422,24,0.015,25,0.978,33,0.175,106,0.011,107,0.013,108,0.011,346,0.331,347,1.445,380,1.719,425,4.985,446,3.194,1615,4.244,1616,4.244]],["title/directives/WidgetRenderDirective.html",[38,0.943,103,0.906]],["body/directives/WidgetRenderDirective.html",[0,0.507,3,0.136,4,0.117,9,0.117,13,1.258,14,1.449,20,0.236,21,0.635,23,0.448,24,0.015,25,0.866,29,1.604,31,0.635,32,0.656,33,0.136,34,0.686,38,1.449,41,0.968,76,1.767,102,1.258,103,1.394,104,1.629,106,0.009,107,0.011,108,0.009,213,1.594,220,1.308,240,2.673,254,1.341,255,1.119,260,1.507,261,1.507,268,1.035,279,1.507,280,1.258,281,2.064,343,1.449,506,1.886,519,3.589,560,1.806,565,1.449,578,3.048,658,5.733,690,4.647,855,5.169,1617,6.549,1618,3.992,1619,6.612,1620,5.962,1621,7.42,1622,6.612,1623,4.604,1624,6.993,1625,6.612,1626,6.993,1627,5.962,1628,4.604,1629,4.604,1630,4.604,1631,5.962,1632,6.993,1633,4.604,1634,4.604,1635,4.604,1636,4.604,1637,5.962,1638,4.604,1639,4.604,1640,4.604,1641,4.604,1642,4.604,1643,5.962,1644,4.604]],["title/interfaces/YtChannel.html",[346,0.216,452,2.398]],["body/interfaces/YtChannel.html",[3,0.161,4,0.138,9,0.138,11,3.495,20,0.28,21,0.706,22,3.333,23,0.46,24,0.015,25,0.987,31,0.581,33,0.161,106,0.01,107,0.012,108,0.01,346,0.37,347,1.328,452,4.104,558,4.598,565,1.738,1430,4.632,1645,3.615,1646,4.257,1647,5.796,1648,5.31,1649,3.9,1650,4.735,1651,4.735]],["title/interfaces/YtChannelSwagStats.html",[346,0.216,1648,2.769]],["body/interfaces/YtChannelSwagStats.html",[3,0.166,4,0.142,9,0.142,11,2.64,20,0.287,21,0.718,22,2.518,23,0.437,24,0.015,25,0.896,31,0.598,33,0.166,106,0.01,107,0.013,108,0.01,346,0.376,347,1.365,452,3.474,558,3.474,565,1.946,1430,4.363,1645,3.718,1646,4.378,1647,4.378,1648,5.167,1649,5.361,1650,6.509,1651,6.509]],["title/components/YtChannelWatcherComponent.html",[0,0.271,95,0.838]],["body/components/YtChannelWatcherComponent.html",[0,0.34,1,0.519,2,0.828,3,0.063,4,0.054,5,0.606,6,0.606,7,0.606,8,0.606,9,0.054,12,1.767,13,0.583,14,1.845,16,0.861,18,0.861,20,0.109,21,0.363,23,0.373,24,0.015,25,0.601,26,1.738,27,1.672,29,1.619,31,0.709,32,0.304,33,0.063,34,0.318,35,0.461,36,0.968,37,0.968,38,0.519,39,1.379,40,0.606,41,0.965,42,0.606,43,0.519,44,0.606,45,0.519,46,0.606,47,0.519,48,0.499,49,0.968,50,0.519,51,0.499,52,0.606,53,0.48,54,0.606,55,0.461,56,0.895,57,0.606,58,0.461,59,0.461,60,0.606,61,0.499,62,0.606,63,0.48,64,0.797,65,0.519,66,0.606,67,0.499,68,0.606,69,0.443,70,0.539,71,0.409,72,1.208,73,0.519,74,0.606,75,1.181,76,0.539,77,0.606,78,0.499,79,0.606,80,0.461,81,0.519,82,0.606,83,0.461,84,0.895,85,0.443,86,0.461,87,0.426,88,0.499,89,0.606,90,0.499,91,0.561,92,0.606,93,0.461,94,0.606,95,1.05,96,1.671,97,1.208,98,0.606,99,0.461,100,0.48,101,0.539,102,0.583,103,0.499,104,0.583,105,0.606,106,0.004,107,0.006,108,0.004,127,1.905,148,0.739,183,1.459,190,2.177,213,2.202,216,1.682,220,1.379,254,0.766,255,0.519,260,1.228,261,1.228,268,1.548,274,0.77,277,0.837,279,0.861,280,0.583,297,0.956,303,2.334,343,1.845,349,2.042,380,0.956,396,2.433,446,0.874,452,2.631,454,3.792,487,1.98,506,0.874,510,0.837,512,0.802,513,4.042,518,0.914,521,2.433,550,1.771,560,1.669,563,1.682,564,1.527,565,1.291,567,4.654,580,1.359,584,1.552,593,1.743,598,1.99,613,1.6,639,0.874,653,1.996,716,1.601,725,1.24,764,1.003,812,1.003,840,1.003,841,1.003,842,1.003,843,1.053,844,1.003,845,1.003,846,2.177,847,1.003,853,1.053,861,1.109,863,1.053,868,2.334,943,1.459,1020,1.999,1027,2.398,1029,2.524,1032,2.398,1056,2.1,1066,1.053,1067,1.053,1077,1.053,1079,2.792,1082,1.053,1083,1.053,1085,1.682,1089,1.053,1092,1.682,1093,1.109,1113,1.053,1114,1.053,1121,1.17,1126,1.109,1127,1.109,1231,1.24,1232,2.631,1233,2.107,1235,2.472,1236,2.823,1239,2.665,1240,2.823,1241,1.663,1258,1.412,1259,1.412,1260,1.412,1261,1.412,1263,1.524,1269,1.24,1270,1.98,1273,1.319,1274,2.472,1276,1.98,1278,2.823,1279,1.24,1280,1.24,1281,1.24,1282,2.472,1283,1.98,1290,1.319,1291,1.319,1293,1.24,1294,1.24,1295,1.24,1296,2.107,1307,2.631,1308,1.319,1309,1.319,1310,1.319,1456,1.524,1457,1.524,1459,1.524,1487,1.85,1488,1.85,1491,1.85,1493,1.85,1495,1.85,1496,1.663,1497,1.85,1498,1.663,1500,1.85,1501,1.85,1513,2.656,1515,1.524,1647,2.656,1652,5.866,1653,3.407,1654,3.688,1655,3.407,1656,4.857,1657,3.407,1658,3.407,1659,2.133,1660,3.407,1661,2.133,1662,2.133,1663,2.133,1664,1.85,1665,1.85,1666,4.211,1667,1.85,1668,3.407,1669,2.133,1670,3.407,1671,3.407,1672,3.407,1673,3.407,1674,3.407,1675,3.407,1676,3.407,1677,3.407,1678,3.407,1679,3.407]],["title/interfaces/YtVideo.html",[346,0.216,1680,2.566]],["body/interfaces/YtVideo.html",[3,0.16,4,0.137,9,0.137,11,3.485,20,0.277,21,0.703,22,3.324,23,0.459,24,0.015,25,0.985,31,0.577,33,0.16,106,0.01,107,0.012,108,0.01,346,0.368,347,1.317,558,4.586,565,1.848,1430,4.626,1645,3.586,1649,3.869,1680,4.371,1681,4.223,1682,6.43,1683,5.296,1684,4.698,1685,4.698,1686,4.698,1687,4.698]],["title/interfaces/YtVideoSwagStats.html",[346,0.216,1683,2.769]],["body/interfaces/YtVideoSwagStats.html",[3,0.16,4,0.137,9,0.137,11,2.546,20,0.277,21,0.703,22,2.429,23,0.459,24,0.015,25,0.882,31,0.577,33,0.16,106,0.01,107,0.012,108,0.01,346,0.368,347,1.317,558,3.351,565,1.981,1430,4.31,1645,3.586,1649,5.296,1680,3.586,1681,4.223,1682,4.698,1683,5.087,1684,6.43,1685,6.43,1686,6.43,1687,6.43]],["title/components/YtVideoWatcherComponent.html",[0,0.271,99,0.838]],["body/components/YtVideoWatcherComponent.html",[0,0.33,1,0.494,2,0.796,3,0.06,4,0.052,5,0.577,6,0.577,7,0.577,8,0.577,9,0.052,12,1.755,13,0.555,14,1.833,16,0.828,18,0.828,20,0.104,21,0.349,22,1.468,23,0.366,24,0.015,25,0.585,26,1.922,27,1.939,29,1.63,31,0.712,32,0.289,33,0.06,34,0.302,35,0.439,36,0.93,37,0.93,38,0.494,39,1.341,40,0.577,41,0.946,42,0.577,43,0.494,44,0.577,45,0.494,46,0.577,47,0.494,48,0.475,49,0.93,50,0.494,51,0.475,52,0.577,53,0.457,54,0.577,55,0.439,56,0.861,57,0.577,58,0.439,59,0.439,60,0.577,61,0.475,62,0.577,63,0.457,64,0.766,65,0.494,66,0.577,67,0.475,68,0.577,69,0.422,70,0.513,71,0.39,72,1.169,73,0.494,74,0.577,75,1.148,76,0.513,77,0.577,78,0.475,79,0.577,80,0.439,81,0.494,82,0.577,83,0.439,84,0.861,85,0.422,86,0.439,87,0.406,88,0.475,89,0.577,90,0.475,91,0.534,92,0.577,93,0.439,94,0.577,95,0.439,96,1.644,97,0.577,98,0.577,99,1.021,100,1.82,101,1.04,102,0.555,103,0.475,104,0.555,105,0.577,106,0.004,107,0.006,108,0.004,127,1.852,148,1.134,183,1.403,190,2.117,213,2.166,216,1.635,220,1.341,254,0.737,255,0.494,260,1.193,261,1.193,268,1.529,274,0.733,277,0.797,279,0.828,280,0.555,297,0.911,303,2.258,343,1.833,349,1.997,380,0.926,446,0.832,454,1.539,487,1.904,506,0.832,510,1.285,511,1.056,512,1.232,513,3.954,518,0.87,521,2.339,550,1.702,560,1.615,563,1.617,564,1.468,565,1.259,567,4.681,580,1.315,584,1.509,593,1.686,598,1.934,613,1.548,639,0.832,653,1.948,716,1.539,725,1.181,764,0.955,812,0.955,840,0.955,841,0.955,842,0.955,843,1.003,844,0.955,845,0.955,846,2.117,847,0.955,853,1.003,861,1.056,863,1.003,864,1.345,868,2.258,943,1.403,1020,1.934,1027,2.331,1029,2.454,1032,2.331,1056,2.032,1066,1.003,1067,1.003,1077,1.003,1079,2.737,1082,1.003,1083,1.003,1085,1.617,1089,1.003,1092,1.617,1093,1.056,1113,1.003,1114,1.003,1121,1.114,1126,1.056,1127,1.056,1231,1.181,1232,2.546,1233,2.026,1235,2.392,1236,2.744,1239,2.591,1240,2.744,1258,1.345,1259,1.345,1260,1.345,1261,1.345,1262,1.761,1263,1.451,1264,1.583,1265,1.583,1269,1.181,1270,1.904,1273,1.256,1274,2.392,1276,1.904,1278,2.744,1279,1.181,1280,1.181,1281,1.181,1282,2.392,1283,1.904,1290,1.256,1291,1.256,1293,1.181,1294,1.181,1295,1.181,1296,2.026,1306,1.451,1307,2.546,1308,1.256,1309,1.256,1310,1.256,1456,1.451,1457,1.451,1458,1.761,1459,1.451,1496,1.583,1498,1.583,1513,2.553,1515,1.451,1652,5.9,1654,3.569,1664,1.761,1665,1.761,1666,4.094,1667,1.761,1680,2.724,1688,5.537,1689,4.116,1690,4.116,1691,3.276,1692,4.722,1693,3.276,1694,2.031,1695,2.031,1696,3.276,1697,2.031,1698,2.031,1699,3.276,1700,2.031,1701,2.031,1702,2.031,1703,2.031,1704,2.031,1705,2.031,1706,2.031,1707,2.031,1708,4.116,1709,4.116,1710,3.276,1711,2.031,1712,3.276,1713,3.276,1714,3.276,1715,3.276,1716,3.276,1717,3.276,1718,3.276,1719,3.276,1720,3.276,1721,3.276,1722,3.276,1723,3.276]],["title/coverage.html",[1724,4.609]],["body/coverage.html",[0,0.55,1,0.755,9,0.079,10,2.693,23,0.188,24,0.015,38,0.755,43,0.755,45,0.755,47,0.755,48,0.726,50,0.755,51,0.726,53,0.698,55,0.671,58,0.671,59,0.671,61,0.726,63,0.698,65,1.437,67,0.726,69,0.645,71,1.206,73,0.755,75,1.105,76,1.148,78,0.726,80,0.671,83,0.671,85,0.944,86,0.671,87,1.072,88,0.726,90,0.726,93,0.671,95,0.671,99,0.671,100,1.022,103,0.726,106,0.006,107,0.008,108,0.006,158,2.056,161,3.542,165,2.218,168,2.056,217,1.219,231,2.218,233,3.007,235,2.218,251,2.421,253,2.693,258,1.46,273,2.792,285,2.056,287,2.693,289,2.693,336,2.693,346,0.442,348,2.693,349,1.12,350,2.693,380,0.698,421,2.056,425,2.218,429,1.614,432,1.614,435,2.056,437,2.056,439,2.056,440,1.921,442,2.056,443,2.218,446,1.272,449,2.056,451,2.056,452,1.921,454,2.135,502,2.056,503,3.542,504,3.542,508,1.921,520,2.218,560,1.219,561,3.836,562,3.836,567,2.81,569,2.81,570,2.056,572,2.056,574,2.056,576,2.81,578,2.056,579,2.693,592,2.693,606,2.218,616,3.864,682,3.542,683,2.421,684,2.693,712,2.218,715,2.421,754,2.421,759,3.542,796,2.421,814,2.693,896,2.693,921,2.218,922,3.836,923,3.542,947,2.693,948,3.542,961,2.218,995,3.912,996,2.693,997,2.693,1002,2.693,1008,2.693,1010,3.542,1011,2.693,1128,2.693,1208,2.421,1209,2.693,1221,2.693,1230,3.542,1231,3.818,1267,2.218,1311,2.693,1328,2.693,1346,2.693,1347,2.693,1352,2.693,1353,2.693,1425,2.693,1430,1.805,1431,2.693,1432,3.542,1433,2.693,1438,3.542,1479,2.693,1516,2.693,1517,2.693,1547,2.693,1548,2.693,1557,2.693,1567,2.693,1615,3.836,1616,3.836,1617,2.693,1618,2.693,1645,3.912,1646,3.542,1648,2.218,1652,3.542,1680,2.056,1681,3.542,1683,2.218,1724,2.693,1725,3.106,1726,3.106,1727,3.106,1728,3.106,1729,3.106,1730,6.957,1731,7.213,1732,6.289,1733,5.372,1734,5.372,1735,4.543,1736,6.786,1737,6.786,1738,6.289,1739,6.786,1740,4.543,1741,4.543,1742,5.91,1743,3.106,1744,3.106,1745,3.106,1746,2.693,1747,2.693,1748,3.939,1749,2.693,1750,3.106,1751,3.106]],["title/dependencies.html",[112,2.427,1752,3.225]],["body/dependencies.html",[24,0.015,32,0.727,106,0.01,107,0.012,108,0.01,112,2.654,114,3.494,135,5.521,136,5.409,145,2.4,147,3.647,148,2.588,157,2.4,164,2.289,274,1.842,320,3.158,322,3.647,332,3.647,333,3.647,510,2.722,511,2.654,512,2.732,518,2.187,610,4.428,631,4.428,634,3.38,635,3.647,746,2.802,747,3.38,1753,5.107,1754,6.833,1755,5.107,1756,5.107,1757,5.107,1758,5.107,1759,5.107,1760,5.107,1761,5.107,1762,5.107,1763,5.107,1764,5.107,1765,5.107,1766,6.939,1767,5.107,1768,6.939,1769,5.107,1770,5.107,1771,5.107,1772,5.107,1773,5.107,1774,5.107,1775,5.107,1776,5.107,1777,5.107,1778,5.107,1779,5.107,1780,5.107,1781,5.107,1782,5.107,1783,5.107]],["title/index.html",[20,0.165,1478,2.797,1784,3.225]],["body/index.html",[0,0.492,4,0.133,12,1.228,24,0.012,28,4.555,41,0.853,106,0.01,107,0.012,108,0.01,128,2.73,217,2.061,548,5.478,634,4.651,746,4.267,913,4.555,998,6.362,1407,4.555,1754,4.555,1785,6.48,1786,5.253,1787,7.027,1788,5.253,1789,5.253,1790,6.48,1791,7.536,1792,5.253,1793,5.253,1794,5.253,1795,4.555,1796,5.253,1797,5.253,1798,5.253,1799,5.253,1800,5.253,1801,5.253,1802,7.027,1803,5.253,1804,7.536,1805,5.253,1806,5.253,1807,5.253,1808,5.253,1809,5.253,1810,5.253,1811,4.555,1812,6.48,1813,6.48,1814,7.337,1815,5.253,1816,6.48,1817,6.48,1818,5.253,1819,5.253,1820,5.253,1821,5.253,1822,7.027,1823,5.253,1824,5.253,1825,4.095,1826,5.253,1827,5.253]],["title/modules.html",[111,2.624]],["body/modules.html",[24,0.013,106,0.011,107,0.013,108,0.011,110,4.235,111,2.928,121,3.925,122,3.925,123,3.668,124,3.925,125,3.925,136,6.154,512,2.969,731,3.668,1828,7.895,1829,7.97,1830,5.93,1831,5.93]],["title/overview.html",[1825,4.144]],["body/overview.html",[1,1.776,2,0.977,24,0.015,35,0.869,38,0.977,43,1.776,45,1.776,47,1.503,50,1.776,51,1.446,53,1.39,55,1.336,58,1.336,61,1.446,63,1.39,67,1.446,69,1.285,73,1.503,78,1.446,80,1.336,83,1.336,86,1.336,88,1.446,90,1.446,93,1.336,95,1.336,99,1.336,103,1.446,106,0.007,107,0.01,108,0.007,109,1.647,110,5.624,111,1.985,112,2.089,113,2.337,114,2.206,115,2.337,116,2.206,117,3.486,118,3.486,119,3.486,120,3.486,121,4.092,122,5.159,123,4.847,124,4.585,125,4.985,126,3.167,127,1.577,128,2.089,225,2.871,251,3.134,314,3.486,315,3.486,335,2.871,347,0.977,532,3.134,665,3.892,731,5.049,732,3.486,733,3.486,734,3.486,908,3.486,909,3.486,910,3.486,1215,3.486,1216,3.486,1541,3.486,1542,3.486,1825,3.134,1832,4.021,1833,4.021,1834,4.021,1835,4.021]],["title/routes.html",[225,3.796]],["body/routes.html",[24,0.014,106,0.012,107,0.014,108,0.012,225,4.569]],["title/miscellaneous/variables.html",[1836,2.797,1837,4.049]],["body/miscellaneous/variables.html",[20,0.183,23,0.427,24,0.015,25,0.442,26,2.115,27,2.034,41,1.258,55,0.772,58,0.772,59,0.772,69,0.742,71,0.963,80,0.772,81,1.412,83,0.772,85,0.742,86,0.772,87,1.003,93,0.772,95,0.772,99,0.772,100,1.129,101,1.678,106,0.007,107,0.009,108,0.007,161,4.912,192,2.785,213,1.237,220,1.427,380,1.65,403,2.785,429,3.451,432,2.61,434,3.587,440,3.106,454,2.361,477,2.365,502,2.365,503,2.785,504,3.916,505,4.002,506,2.821,509,3.098,513,2.551,514,2.21,515,2.551,516,2.785,517,2.551,520,3.587,521,2.551,522,4.558,523,3.587,524,5.464,525,5.242,526,4.355,527,5.971,528,5.971,529,4.859,530,6.261,531,4.859,532,5.368,533,3.587,534,4.528,535,4.148,536,3.587,537,3.098,538,3.098,539,2.551,540,3.587,541,2.785,542,3.098,543,2.365,544,3.098,545,3.098,546,4.742,547,3.587,548,4.912,549,3.275,550,3.275,551,3.587,552,3.098,553,3.098,554,4.528,555,3.587,556,3.098,557,3.098,558,2.21,559,3.098,561,2.551,562,3.587,578,3.325,705,3.845,715,3.916,759,2.785,796,3.916,797,3.098,956,2.365,1746,3.098,1747,3.098,1748,3.098,1749,4.355,1795,3.098,1811,4.355,1836,3.098,1837,3.098,1838,5.023,1839,5.023,1840,3.573,1841,3.573,1842,3.573,1843,3.573,1844,3.573,1845,5.023,1846,3.573,1847,5.023,1848,5.023]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":616,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"coverage.html":{}}}],["0.10.2",{"_index":1783,"title":{},"body":{"dependencies.html":{}}}],["0.21.0",{"_index":1773,"title":{},"body":{"dependencies.html":{}}}],["0.5rem",{"_index":1309,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["0.7.0",{"_index":1762,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1737,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1745,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1732,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1744,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":1743,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":1742,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":1741,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":1740,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1731,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1730,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1733,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1739,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1738,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1735,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1734,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":665,"title":{},"body":{"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/MsCalendarComponent.html":{},"overview.html":{}}}],["1.1.1",{"_index":1771,"title":{},"body":{"dependencies.html":{}}}],["1.1.3",{"_index":1776,"title":{},"body":{"dependencies.html":{}}}],["1.2.28",{"_index":1765,"title":{},"body":{"dependencies.html":{}}}],["1.25rem",{"_index":875,"title":{},"body":{"components/HeaderComponent.html":{}}}],["1.5rem",{"_index":1310,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["1.75rem",{"_index":885,"title":{},"body":{"components/HeaderComponent.html":{}}}],["1/2",{"_index":1729,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":720,"title":{},"body":{"components/GridHeaderComponent.html":{},"injectables/GridService.html":{}}}],["10.1.7",{"_index":1770,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1754,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["10.2.1",{"_index":1756,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":853,"title":{},"body":{"components/HeaderComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["1000).pipe(mergemap",{"_index":1114,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["1000).tolocaledatestring",{"_index":1289,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["12",{"_index":1835,"title":{},"body":{"overview.html":{}}}],["15",{"_index":787,"title":{},"body":{"injectables/GridService.html":{}}}],["1px",{"_index":726,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["1rem",{"_index":1422,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["2",{"_index":477,"title":{},"body":{"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":1781,"title":{},"body":{"dependencies.html":{}}}],["2.6.0",{"_index":1761,"title":{},"body":{"dependencies.html":{}}}],["21b8",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["23",{"_index":1833,"title":{},"body":{"overview.html":{}}}],["25rem",{"_index":1423,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["26",{"_index":1834,"title":{},"body":{"overview.html":{}}}],["2px",{"_index":1515,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["3",{"_index":532,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["35",{"_index":1413,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["4",{"_index":530,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["4.5.3",{"_index":1774,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":309,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["403",{"_index":1291,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["404",{"_index":1214,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["44fd",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["5",{"_index":534,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridComponent.html":{},"miscellaneous/variables.html":{}}}],["5.13.0",{"_index":1766,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1728,"title":{},"body":{"coverage.html":{}}}],["6.2.1",{"_index":1768,"title":{},"body":{"dependencies.html":{}}}],["6.6.0",{"_index":1779,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1832,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":1769,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1778,"title":{},"body":{"dependencies.html":{}}}],["8073",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["9da6a9",{"_index":727,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["_",{"_index":943,"title":{},"body":{"interfaces/IResponse.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["absolute",{"_index":1424,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["acc",{"_index":671,"title":{},"body":{"components/GridComponent.html":{}}}],["accessors",{"_index":602,"title":{},"body":{"components/GridComponent.html":{}}}],["account",{"_index":990,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["action",{"_index":862,"title":{},"body":{"components/HeaderComponent.html":{},"components/UsersComponent.html":{}}}],["activatedroutesnapshot",{"_index":263,"title":{},"body":{"guards/AuthGuard.html":{}}}],["active",{"_index":1298,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["active_user_count",{"_index":1426,"title":{},"body":{"interfaces/Subreddit.html":{}}}],["actual_component",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["additem",{"_index":596,"title":{},"body":{"components/GridComponent.html":{}}}],["additem(widgetprops",{"_index":608,"title":{},"body":{"components/GridComponent.html":{}}}],["address",{"_index":975,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/MicrosoftMail.html":{},"components/RegisterComponent.html":{}}}],["agree",{"_index":1340,"title":{},"body":{"components/RegisterComponent.html":{}}}],["align",{"_index":856,"title":{},"body":{"components/HeaderComponent.html":{}}}],["already",{"_index":1343,"title":{},"body":{"components/RegisterComponent.html":{}}}],["angular",{"_index":634,"title":{},"body":{"components/GridComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":1753,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1755,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"interceptors/AuthInterceptor.html":{},"injectables/DashboardService.html":{},"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/VerifyAuthComponent.html":{}}}],["angular/compiler",{"_index":1757,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"components/SpotifyArtistComponent.html":{},"dependencies.html":{}}}],["angular/localize",{"_index":1758,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/RegisterComponent.html":{},"components/VerifyAuthComponent.html":{},"dependencies.html":{}}}],["angular2",{"_index":631,"title":{},"body":{"components/GridComponent.html":{},"dependencies.html":{}}}],["api",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["api/auth/logout",{"_index":831,"title":{},"body":{"components/HeaderComponent.html":{}}}],["api/connect/google",{"_index":1667,"title":{},"body":{"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["api/connect/microsoft",{"_index":1094,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{}}}],["api/connect/reddit",{"_index":1275,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["api/connect/spotify",{"_index":1395,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["api/connect/twitch",{"_index":1463,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{}}}],["api://ca676b28",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["apiurl",{"_index":1847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"index.html":{}}}],["app.component",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":17,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["application/json",{"_index":486,"title":{},"body":{"injectables/DashboardService.html":{}}}],["appmodule",{"_index":110,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":121,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["appwidgetrender",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["aria",{"_index":985,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["artifacts",{"_index":1805,"title":{},"body":{"index.html":{}}}],["artist",{"_index":434,"title":{},"body":{"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"components/SpotifyArtistComponent.html":{},"miscellaneous/variables.html":{}}}],["artist'},{'name",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["artist.component",{"_index":575,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"interfaces/WidgetProps.html":{}}}],["artist.component.html",{"_index":1355,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.scss",{"_index":1354,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts",{"_index":1353,"title":{},"body":{"components/SpotifyArtistComponent.html":{},"coverage.html":{}}}],["artist.component.ts:101",{"_index":1368,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:105",{"_index":1363,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:113",{"_index":1364,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:128",{"_index":1374,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:18",{"_index":1383,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:19",{"_index":1386,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:21",{"_index":1384,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:22",{"_index":1385,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:24",{"_index":1380,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:26",{"_index":1377,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:27",{"_index":1378,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:28",{"_index":1379,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:30",{"_index":1382,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:35",{"_index":1376,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:42",{"_index":1362,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:47",{"_index":1367,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:64",{"_index":1366,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:68",{"_index":1375,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:76",{"_index":1365,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:88",{"_index":1369,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.component.ts:92",{"_index":1372,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["artist.ts",{"_index":1347,"title":{},"body":{"interfaces/SpotifyArtist.html":{},"coverage.html":{}}}],["artist/spotify",{"_index":574,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{}}}],["artistid",{"_index":391,"title":{},"body":{"injectables/DashboardService.html":{}}}],["artistquery",{"_index":1356,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["async",{"_index":954,"title":{},"body":{"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/VerifyAuthComponent.html":{}}}],["auth",{"_index":247,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/VerifyAuthComponent.html":{}}}],["auth'},{'name",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["auth.component",{"_index":236,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{}}}],["auth.component.html",{"_index":1550,"title":{},"body":{"components/VerifyAuthComponent.html":{}}}],["auth.component.scss",{"_index":1549,"title":{},"body":{"components/VerifyAuthComponent.html":{}}}],["auth.component.ts",{"_index":1548,"title":{},"body":{"components/VerifyAuthComponent.html":{},"coverage.html":{}}}],["auth.component.ts:11",{"_index":1551,"title":{},"body":{"components/VerifyAuthComponent.html":{}}}],["auth.component.ts:16",{"_index":1552,"title":{},"body":{"components/VerifyAuthComponent.html":{}}}],["auth/auth.module",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/callback",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/login",{"_index":962,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{}}}],["auth/login/login.component",{"_index":229,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["auth/office",{"_index":230,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["auth/register/register.component",{"_index":237,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["auth/sign",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/verify",{"_index":235,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/VerifyAuthComponent.html":{},"coverage.html":{}}}],["authenticate",{"_index":988,"title":{},"body":{"components/LoginComponent.html":{}}}],["authenticated",{"_index":285,"title":{"interfaces/Authenticated.html":{}},"body":{"guards/AuthGuard.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"coverage.html":{}}}],["authguard",{"_index":158,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["authinterceptor",{"_index":165,"title":{"interceptors/AuthInterceptor.html":{}},"body":{"modules/AppModule.html":{},"interceptors/AuthInterceptor.html":{},"coverage.html":{}}}],["authinterceptor(router",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["authmodule",{"_index":122,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorization",{"_index":937,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["authorize",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["authresult.gettoken().getvalue",{"_index":939,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["authresult.issuccess",{"_index":934,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["authservice",{"_index":258,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RegisterComponent.html":{},"components/VerifyAuthComponent.html":{},"coverage.html":{}}}],["authservice.setislogin(false",{"_index":944,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["authservice.setislogin(true",{"_index":941,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["auto",{"_index":864,"title":{},"body":{"components/HeaderComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["automatically",{"_index":1796,"title":{},"body":{"index.html":{}}}],["available",{"_index":1831,"title":{},"body":{"modules.html":{}}}],["await",{"_index":968,"title":{},"body":{"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/VerifyAuthComponent.html":{}}}],["axios",{"_index":1772,"title":{},"body":{"dependencies.html":{}}}],["azure/msal",{"_index":1760,"title":{},"body":{"dependencies.html":{}}}],["background",{"_index":728,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["balan",{"_index":589,"title":{},"body":{"components/FooterComponent.html":{}}}],["baseendpoint",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["bearer",{"_index":938,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["between",{"_index":851,"title":{},"body":{"components/HeaderComponent.html":{}}}],["body",{"_index":487,"title":{},"body":{"injectables/DashboardService.html":{},"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["bold",{"_index":1406,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["boolean",{"_index":271,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"components/GridComponent.html":{},"components/HeaderComponent.html":{},"interfaces/MicrosoftMail.html":{},"components/MsCalendarComponent.html":{}}}],["bootstrap",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["bootstrap/ng",{"_index":747,"title":{},"body":{"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["border",{"_index":724,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["bottom",{"_index":725,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["box.id",{"_index":1178,"title":{},"body":{"components/MsMailComponent.html":{}}}],["brands",{"_index":518,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"dependencies.html":{}}}],["breakpoint",{"_index":892,"title":{},"body":{"components/HeaderComponent.html":{}}}],["broadcaster_type",{"_index":1480,"title":{},"body":{"interfaces/TtvUser.html":{}}}],["browse",{"_index":1829,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":1804,"title":{},"body":{"index.html":{}}}],["button",{"_index":869,"title":{},"body":{"components/HeaderComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["c",{"_index":501,"title":{},"body":{"injectables/DashboardService.html":{}}}],["ca676b28",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["cal.id",{"_index":1088,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calc(#{nb",{"_index":858,"title":{},"body":{"components/HeaderComponent.html":{}}}],["calendar",{"_index":440,"title":{},"body":{"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"components/MsCalendarComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["calendar'},{'name",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["calendar.component",{"_index":571,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"interfaces/WidgetProps.html":{}}}],["calendar.component.html",{"_index":1013,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.scss",{"_index":1012,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts",{"_index":1011,"title":{},"body":{"components/MsCalendarComponent.html":{},"coverage.html":{}}}],["calendar.component.ts:100",{"_index":1048,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:104",{"_index":1037,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:120",{"_index":1038,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:138",{"_index":1042,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:142",{"_index":1040,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:146",{"_index":1035,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:158",{"_index":1049,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:17",{"_index":1060,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:18",{"_index":1063,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:182",{"_index":1050,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:20",{"_index":1061,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:21",{"_index":1062,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:23",{"_index":1057,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:24",{"_index":1058,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:26",{"_index":1053,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:27",{"_index":1064,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:28",{"_index":1055,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:29",{"_index":1054,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:31",{"_index":1059,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:35",{"_index":1052,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:45",{"_index":1033,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:50",{"_index":1045,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:68",{"_index":1044,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:73",{"_index":1051,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:81",{"_index":1043,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.component.ts:94",{"_index":1047,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.name",{"_index":1122,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendar.ts",{"_index":996,"title":{},"body":{"interfaces/MicrosoftCalendar.html":{},"coverage.html":{}}}],["calendar/ms",{"_index":570,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"components/MsCalendarComponent.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{}}}],["calendarid",{"_index":383,"title":{},"body":{"injectables/DashboardService.html":{}}}],["calendarlist",{"_index":1014,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["calendars",{"_index":1098,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{}}}],["callback",{"_index":249,"title":{},"body":{"modules/AppRoutingModule.html":{},"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["callback'},{'name",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["callback.component",{"_index":234,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{}}}],["callback.component.html",{"_index":928,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["callback.component.scss",{"_index":929,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["callback.component.ts",{"_index":923,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"coverage.html":{}}}],["callback.component.ts:19",{"_index":1219,"title":{},"body":{"components/OfficeOAuthCallbackComponent.html":{}}}],["callback.component.ts:43",{"_index":1220,"title":{},"body":{"components/OfficeOAuthCallbackComponent.html":{}}}],["callback/office",{"_index":233,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"coverage.html":{}}}],["canactivate",{"_index":242,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{}}}],["canactivate(route",{"_index":262,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cancel",{"_index":1315,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["card",{"_index":1307,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["catch",{"_index":543,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{},"miscellaneous/variables.html":{}}}],["catcherror",{"_index":307,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["cd",{"_index":957,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["ced7db",{"_index":730,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["center",{"_index":541,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/HeaderComponent.html":{},"miscellaneous/variables.html":{}}}],["centered",{"_index":1414,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["change",{"_index":1798,"title":{},"body":{"index.html":{}}}],["changedetectorref",{"_index":958,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["changes",{"_index":1634,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["changes.componentref?.isfirstchange",{"_index":1635,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["changes.widgetrefreshrate?.isfirstchange",{"_index":1644,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["channel",{"_index":454,"title":{},"body":{"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"components/TtvStreamWatcherComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["channel.country",{"_index":1674,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["channel.statistics.subscribercount",{"_index":1677,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["channel.statistics.videocount",{"_index":1679,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["channel.statistics.viewcount",{"_index":1675,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["channel.title",{"_index":1673,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["channel.ts",{"_index":1646,"title":{},"body":{"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"coverage.html":{}}}],["channeltitle",{"_index":1682,"title":{},"body":{"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{}}}],["characters",{"_index":982,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["check",{"_index":1824,"title":{},"body":{"index.html":{}}}],["children",{"_index":248,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["city",{"_index":403,"title":{},"body":{"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["city.trim",{"_index":496,"title":{},"body":{"injectables/DashboardService.html":{}}}],["class",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["class=\"links",{"_index":984,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["class=\"m",{"_index":1124,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{}}}],["class=\"text",{"_index":1404,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["clearrequest",{"_index":1236,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["clearselection",{"_index":1022,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["clearselection(save",{"_index":1034,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["cli",{"_index":1787,"title":{},"body":{"index.html":{}}}],["client",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["clientid",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_declarations",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_gridmodule",{"_index":732,"title":{},"body":{"modules/GridModule.html":{},"overview.html":{}}}],["cluster_gridmodule_declarations",{"_index":734,"title":{},"body":{"modules/GridModule.html":{},"overview.html":{}}}],["cluster_gridmodule_exports",{"_index":733,"title":{},"body":{"modules/GridModule.html":{},"overview.html":{}}}],["cluster_homemodule",{"_index":908,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_declarations",{"_index":910,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_exports",{"_index":909,"title":{},"body":{"modules/HomeModule.html":{},"overview.html":{}}}],["cluster_homemodule_imports",{"_index":911,"title":{},"body":{"modules/HomeModule.html":{}}}],["cluster_notfoundmodule",{"_index":1215,"title":{},"body":{"modules/NotFoundModule.html":{},"overview.html":{}}}],["cluster_notfoundmodule_declarations",{"_index":1216,"title":{},"body":{"modules/NotFoundModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1541,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_declarations",{"_index":1542,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1543,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1800,"title":{},"body":{"index.html":{}}}],["color",{"_index":729,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/UsersComponent.html":{}}}],["cols",{"_index":529,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["command",{"_index":1826,"title":{},"body":{"index.html":{}}}],["commentcount",{"_index":1686,"title":{},"body":{"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{}}}],["comments",{"_index":1722,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["commonmodule",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"index.html":{}}}],["component'},{'name",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["component/ms",{"_index":572,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"components/MsMailComponent.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{}}}],["component_template",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["componentfactoryresolver",{"_index":1626,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["componentref",{"_index":1621,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"overview.html":{}}}],["conditions",{"_index":1341,"title":{},"body":{"components/RegisterComponent.html":{}}}],["config",{"_index":445,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/GridService.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["config.query",{"_index":1089,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["config.ts",{"_index":1616,"title":{},"body":{"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetQueryConfig.html":{},"coverage.html":{}}}],["configs",{"_index":423,"title":{},"body":{"injectables/DashboardService.html":{}}}],["configures",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":1339,"title":{},"body":{"components/RegisterComponent.html":{}}}],["confirmation",{"_index":1337,"title":{},"body":{"components/RegisterComponent.html":{}}}],["console.error(err",{"_index":812,"title":{},"body":{"injectables/GridService.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["console.error(error",{"_index":654,"title":{},"body":{"components/GridComponent.html":{}}}],["const",{"_index":240,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/WidgetProps.html":{},"directives/WidgetRenderDirective.html":{}}}],["constructor",{"_index":255,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/DashboardService.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["constructor(authservice",{"_index":1224,"title":{},"body":{"components/OfficeOAuthComponent.html":{}}}],["constructor(container",{"_index":1623,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["constructor(dashboardservice",{"_index":764,"title":{},"body":{"injectables/GridService.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["constructor(dialogservice",{"_index":694,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["constructor(gridservice",{"_index":605,"title":{},"body":{"components/GridComponent.html":{}}}],["constructor(httpclient",{"_index":375,"title":{},"body":{"injectables/DashboardService.html":{},"components/VerifyAuthComponent.html":{}}}],["constructor(nbauthservice",{"_index":256,"title":{},"body":{"guards/AuthGuard.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["constructor(private",{"_index":280,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/DashboardService.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"interfaces/IResponse.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["constructor(ref",{"_index":1317,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["constructor(router",{"_index":292,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["constructor(service",{"_index":955,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["constructor(sidebarservice",{"_index":818,"title":{},"body":{"components/HeaderComponent.html":{}}}],["container",{"_index":855,"title":{},"body":{"components/HeaderComponent.html":{},"directives/WidgetRenderDirective.html":{}}}],["contains",{"_index":979,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["content",{"_index":485,"title":{},"body":{"injectables/DashboardService.html":{},"components/HeaderComponent.html":{}}}],["context",{"_index":715,"title":{},"body":{"components/GridHeaderComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":894,"title":{},"body":{"components/HeaderComponent.html":{}}}],["core",{"_index":1764,"title":{},"body":{"dependencies.html":{}}}],["corporate",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["count",{"_index":1653,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["count'},{'name",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["country",{"_index":1647,"title":{},"body":{"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{}}}],["countselectedwidget",{"_index":597,"title":{},"body":{"components/GridComponent.html":{}}}],["countselectedwidget(widget).tostring",{"_index":679,"title":{},"body":{"components/GridComponent.html":{}}}],["countselectedwidget(widgetprops",{"_index":617,"title":{},"body":{"components/GridComponent.html":{}}}],["cover",{"_index":1417,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["coverage",{"_index":1724,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":1268,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["created_at",{"_index":1481,"title":{},"body":{"interfaces/TtvUser.html":{}}}],["created_utc",{"_index":1427,"title":{},"body":{"interfaces/Subreddit.html":{}}}],["creation",{"_index":1302,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{}}}],["cropped",{"_index":1415,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["curr",{"_index":669,"title":{},"body":{"components/GridComponent.html":{}}}],["curr.widgetid",{"_index":670,"title":{},"body":{"components/GridComponent.html":{}}}],["current",{"_index":557,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["currentartist",{"_index":1357,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["currentartist.followers",{"_index":1409,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["currentartist.name",{"_index":1408,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["currentartist.popularity",{"_index":1411,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["cursor",{"_index":865,"title":{},"body":{"components/HeaderComponent.html":{},"components/UsersComponent.html":{}}}],["d81c78fc66d3",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["d81c78fc66d3/user.read.basics",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["danger",{"_index":1202,"title":{},"body":{"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["dashboard",{"_index":840,"title":{},"body":{"components/HeaderComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["dashboardservice",{"_index":349,"title":{"injectables/DashboardService.html":{}},"body":{"injectables/DashboardService.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["dashboardserviceprops",{"_index":502,"title":{"interfaces/DashboardServiceProps.html":{}},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dashboardservices",{"_index":520,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dashboardwidget",{"_index":560,"title":{"interfaces/DashboardWidget.html":{}},"body":{"interfaces/DashboardWidget.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["date",{"_index":1186,"title":{},"body":{"components/MsMailComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{}}}],["date(event.end.datetime).tolocaletimestring",{"_index":1108,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["date(event.start.datetime).tolocaletimestring",{"_index":1104,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["date(mail.receiveddatetime",{"_index":1187,"title":{},"body":{"components/MsMailComponent.html":{}}}],["date(stream.started_at).tolocaledatestring",{"_index":1470,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["date(subreddit.created_utc",{"_index":1288,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["date(user.created_at).tolocaledatestring",{"_index":1508,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["date(weather[0].date",{"_index":1602,"title":{},"body":{"components/WeatherComponent.html":{}}}],["date.tolocaledatestring('fr",{"_index":1188,"title":{},"body":{"components/MsMailComponent.html":{}}}],["date.tolocaletimestring('fr",{"_index":1190,"title":{},"body":{"components/MsMailComponent.html":{}}}],["datetime",{"_index":1000,"title":{},"body":{"interfaces/MicrosoftCalendarEvent.html":{}}}],["day",{"_index":1558,"title":{},"body":{"interfaces/Weather.html":{}}}],["declarations",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declares",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{}}}],["decoration",{"_index":879,"title":{},"body":{"components/HeaderComponent.html":{}}}],["deep",{"_index":867,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{}}}],["default",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["degree",{"_index":500,"title":{},"body":{"injectables/DashboardService.html":{}}}],["deleteuser",{"_index":351,"title":{},"body":{"injectables/DashboardService.html":{}}}],["deleteuser(id",{"_index":378,"title":{},"body":{"injectables/DashboardService.html":{}}}],["dependencies",{"_index":112,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["desc",{"_index":525,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"interfaces/TtvUser.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{}}}],["destroy",{"_index":930,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{}}}],["dev",{"_index":1793,"title":{},"body":{"index.html":{}}}],["development",{"_index":1789,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":1312,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["dialog'},{'name",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["dialog.component",{"_index":713,"title":{},"body":{"components/GridHeaderComponent.html":{},"modules/GridModule.html":{}}}],["dialog.component.html",{"_index":1314,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["dialog.component.scss",{"_index":1313,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["dialog.component.ts",{"_index":1311,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{},"coverage.html":{}}}],["dialog.component.ts:11",{"_index":1319,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["dialog.component.ts:16",{"_index":1321,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["dialog.component.ts:20",{"_index":1323,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["dialog/refresh",{"_index":712,"title":{},"body":{"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/RefreshRateInputDialogComponent.html":{},"coverage.html":{}}}],["dialogservice",{"_index":697,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["digit",{"_index":1106,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["directive",{"_index":38,"title":{"directives/WidgetRenderDirective.html":{}},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["directives",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1803,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1808,"title":{},"body":{"index.html":{}}}],["dislikecount",{"_index":1685,"title":{},"body":{"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{}}}],["dislikes",{"_index":1720,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["display",{"_index":550,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/HeaderComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["display_name",{"_index":1428,"title":{},"body":{"interfaces/Subreddit.html":{},"interfaces/TtvUser.html":{}}}],["displaygrid",{"_index":776,"title":{},"body":{"injectables/GridService.html":{}}}],["displayname",{"_index":824,"title":{},"body":{"components/HeaderComponent.html":{},"interfaces/MicrosoftMailbox.html":{},"interfaces/User.html":{}}}],["displays",{"_index":526,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["dist",{"_index":1807,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1725,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["don't",{"_index":989,"title":{},"body":{"components/LoginComponent.html":{}}}],["don\\'t",{"_index":994,"title":{},"body":{"components/LoginComponent.html":{}}}],["down(is",{"_index":895,"title":{},"body":{"components/HeaderComponent.html":{}}}],["down(sm",{"_index":893,"title":{},"body":{"components/HeaderComponent.html":{}}}],["draggable",{"_index":778,"title":{},"body":{"injectables/GridService.html":{}}}],["dynamic",{"_index":1759,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1819,"title":{},"body":{"index.html":{}}}],["easily",{"_index":542,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["element",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["email",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{}}}],["emailaddress",{"_index":1007,"title":{},"body":{"interfaces/MicrosoftMail.html":{}}}],["emails",{"_index":545,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["enabled",{"_index":779,"title":{},"body":{"injectables/GridService.html":{}}}],["end",{"_index":998,"title":{},"body":{"interfaces/MicrosoftCalendarEvent.html":{},"index.html":{}}}],["endpoint",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["enter",{"_index":1326,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{}}}],["environment",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.thisurl",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["environments/environment",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":297,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/GridService.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["err.status",{"_index":308,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["error",{"_index":653,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["error.status",{"_index":1290,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["errormessage",{"_index":1520,"title":{},"body":{"components/UsersComponent.html":{}}}],["errormsg",{"_index":1015,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["eva",{"_index":1775,"title":{},"body":{"dependencies.html":{}}}],["event",{"_index":441,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/GridService.html":{},"components/MsCalendarComponent.html":{}}}],["event.subject",{"_index":1123,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["event.ts",{"_index":997,"title":{},"body":{"interfaces/MicrosoftCalendarEvent.html":{},"coverage.html":{}}}],["eventemitter",{"_index":700,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["eventlist",{"_index":1016,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["events",{"_index":539,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"miscellaneous/variables.html":{}}}],["everything",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["execute",{"_index":1816,"title":{},"body":{"index.html":{}}}],["export",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{}}}],["exports",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["extends",{"_index":949,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["faarrowsalt",{"_index":708,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["faclock",{"_index":706,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["facomment",{"_index":1688,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["factory",{"_index":1638,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["fagoogle",{"_index":513,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["failure",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["famicrosoft",{"_index":514,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"miscellaneous/variables.html":{}}}],["fareddit",{"_index":515,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"miscellaneous/variables.html":{}}}],["faspotify",{"_index":516,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/SpotifyArtistComponent.html":{},"miscellaneous/variables.html":{}}}],["fastopwatch",{"_index":707,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["fasun",{"_index":509,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["fathumbdown",{"_index":1689,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["fathumbsdown",{"_index":1708,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["fathumbsup",{"_index":1709,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["fathumbup",{"_index":1690,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["fatimes",{"_index":1381,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["fatrash",{"_index":709,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/UsersComponent.html":{}}}],["fatwitch",{"_index":517,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["favoritecount",{"_index":1687,"title":{},"body":{"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{}}}],["feels",{"_index":1608,"title":{},"body":{"components/WeatherComponent.html":{}}}],["feelslike",{"_index":1559,"title":{},"body":{"interfaces/Weather.html":{}}}],["fetchartistdata",{"_index":1359,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["fetchartistdatarequest",{"_index":1358,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["fetchcalendarlist",{"_index":1023,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["fetchcalendarlistrequest",{"_index":1017,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["fetcheventlist",{"_index":1024,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["fetcheventlistrequest",{"_index":1018,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["fetchmailboxlist",{"_index":1136,"title":{},"body":{"components/MsMailComponent.html":{}}}],["fetchmailboxlistrequest",{"_index":1131,"title":{},"body":{"components/MsMailComponent.html":{}}}],["fetchmaillist",{"_index":1137,"title":{},"body":{"components/MsMailComponent.html":{}}}],["fetchmaillistrequest",{"_index":1132,"title":{},"body":{"components/MsMailComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["files",{"_index":1799,"title":{},"body":{"index.html":{}}}],["fit",{"_index":1416,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["flag",{"_index":1810,"title":{},"body":{"index.html":{}}}],["flex",{"_index":848,"title":{},"body":{"components/HeaderComponent.html":{}}}],["followers",{"_index":1348,"title":{},"body":{"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{}}}],["font",{"_index":883,"title":{},"body":{"components/HeaderComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["fontawesome",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["fontawesomemodule",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/UsersModule.html":{}}}],["footer",{"_index":581,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer'},{'name",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["footer.component.html",{"_index":583,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.component.scss",{"_index":582,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer/footer.component",{"_index":915,"title":{},"body":{"modules/HomeModule.html":{}}}],["footercomponent",{"_index":43,"title":{"components/FooterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["formdata",{"_index":1373,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["formdata.value.search.trim",{"_index":1396,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["forms",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["formsmodule",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{}}}],["fortawesome/angular",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["fortawesome/fontawesome",{"_index":1763,"title":{},"body":{"dependencies.html":{}}}],["fortawesome/free",{"_index":510,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridHeaderComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"dependencies.html":{}}}],["found",{"_index":1099,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{}}}],["found'},{'name",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["found.component",{"_index":238,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/NotFoundModule.html":{}}}],["found.component.html",{"_index":1211,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.scss",{"_index":1210,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts",{"_index":1209,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["found.component.ts:12",{"_index":1213,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts:8",{"_index":1212,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.module",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["found.module.ts",{"_index":1217,"title":{},"body":{"modules/NotFoundModule.html":{}}}],["found/not",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"coverage.html":{}}}],["foundwidget",{"_index":644,"title":{},"body":{"components/GridComponent.html":{}}}],["fr",{"_index":1189,"title":{},"body":{"components/MsMailComponent.html":{}}}],["full",{"_index":245,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/RegisterComponent.html":{}}}],["further",{"_index":1821,"title":{},"body":{"index.html":{}}}],["game",{"_index":1475,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["game_name",{"_index":1434,"title":{},"body":{"interfaces/TtvStream.html":{}}}],["generate",{"_index":1802,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1786,"title":{},"body":{"index.html":{}}}],["genre",{"_index":1410,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["genres",{"_index":1349,"title":{},"body":{"interfaces/SpotifyArtist.html":{}}}],["getchannelerrorcb",{"_index":1655,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["getchannelerrorcb(error",{"_index":1658,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["getchannelinfos",{"_index":1656,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["getchannelnextcb",{"_index":1657,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["getchannelnextcb(channel",{"_index":1660,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["getconfigvalue('forms.validation.fullname.maxlength",{"_index":1335,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getconfigvalue('forms.validation.fullname.minlength",{"_index":1334,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getconfigvalue('forms.validation.password.maxlength",{"_index":981,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["getconfigvalue('forms.validation.password.minlength",{"_index":980,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["getconfigvalue(\\'forms.validation.fullname.maxlength",{"_index":1345,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getconfigvalue(\\'forms.validation.fullname.minlength",{"_index":1344,"title":{},"body":{"components/RegisterComponent.html":{}}}],["getconfigvalue(\\'forms.validation.password.maxlength",{"_index":993,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["getconfigvalue(\\'forms.validation.password.minlength",{"_index":992,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["geteventendtime",{"_index":1025,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["geteventendtime(event",{"_index":1039,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["geteventstarttime",{"_index":1026,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["geteventstarttime(event",{"_index":1041,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["getformattedmailsendtime",{"_index":1138,"title":{},"body":{"components/MsMailComponent.html":{}}}],["getformattedmailsendtime(mail",{"_index":1146,"title":{},"body":{"components/MsMailComponent.html":{}}}],["getgriditems",{"_index":627,"title":{},"body":{"components/GridComponent.html":{}}}],["getmicrosoftcalendarevents",{"_index":352,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getmicrosoftcalendarevents(calendarid",{"_index":381,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getmicrosoftcalendars",{"_index":353,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getmicrosoftmailboxes",{"_index":354,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getmicrosoftmails",{"_index":355,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getmicrosoftmails(mailboxid",{"_index":386,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getoptions",{"_index":625,"title":{},"body":{"components/GridComponent.html":{}}}],["getservicelist",{"_index":629,"title":{},"body":{"components/GridComponent.html":{}}}],["getspotifyartist",{"_index":356,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getspotifyartist(artistid",{"_index":389,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getstreamerrorcb",{"_index":1440,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["getstreamerrorcb(error",{"_index":1445,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["getstreaminfos",{"_index":1441,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["getstreamnextcb",{"_index":1442,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["getstreamnextcb(stream",{"_index":1448,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["getsubredditerrorcb",{"_index":1237,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["getsubredditerrorcb(error",{"_index":1243,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["getsubredditinfos",{"_index":357,"title":{},"body":{"injectables/DashboardService.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["getsubredditinfos(subreddit",{"_index":392,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getsubredditnextcb",{"_index":1238,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["getsubredditnextcb(subreddit",{"_index":1246,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["getting",{"_index":1784,"title":{"index.html":{}},"body":{}}],["gettwitchstreaminfos",{"_index":358,"title":{},"body":{"injectables/DashboardService.html":{}}}],["gettwitchstreaminfos(username",{"_index":394,"title":{},"body":{"injectables/DashboardService.html":{}}}],["gettwitchuserinfos",{"_index":359,"title":{},"body":{"injectables/DashboardService.html":{}}}],["gettwitchuserinfos(username",{"_index":397,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getusererrorcb",{"_index":1484,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["getusererrorcb(error",{"_index":1489,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["getuserinfos",{"_index":1485,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["getusernextcb",{"_index":1486,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["getusernextcb(user",{"_index":1492,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["getuserprofile",{"_index":360,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getusers",{"_index":361,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getvideoerrorcb",{"_index":1691,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["getvideoerrorcb(error",{"_index":1696,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["getvideoinfos",{"_index":1692,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["getvideonextcb",{"_index":1693,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["getvideonextcb(video",{"_index":1699,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["getweathererrorcb",{"_index":1570,"title":{},"body":{"components/WeatherComponent.html":{}}}],["getweathererrorcb(error",{"_index":1575,"title":{},"body":{"components/WeatherComponent.html":{}}}],["getweatherinfos",{"_index":1571,"title":{},"body":{"components/WeatherComponent.html":{}}}],["getweatherinfosbycity",{"_index":362,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getweatherinfosbycity(city",{"_index":401,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getweathernextcb",{"_index":1572,"title":{},"body":{"components/WeatherComponent.html":{}}}],["getweathernextcb(weather",{"_index":1578,"title":{},"body":{"components/WeatherComponent.html":{}}}],["getwidgetconfig",{"_index":363,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getwidgetconfig(id",{"_index":404,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getwidgetsconfig",{"_index":364,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getyoutubechannelinfos",{"_index":365,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getyoutubechannelinfos(username",{"_index":407,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getyoutubevideoinfos",{"_index":366,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getyoutubevideoinfos(url",{"_index":409,"title":{},"body":{"injectables/DashboardService.html":{}}}],["given",{"_index":528,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["go",{"_index":1407,"title":{},"body":{"components/SpotifyArtistComponent.html":{},"index.html":{}}}],["google",{"_index":521,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":1830,"title":{},"body":{"modules.html":{}}}],["grey",{"_index":1420,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["grid",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"injectables/DashboardService.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetGridConfig.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["grid'},{'name",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["grid.component",{"_index":737,"title":{},"body":{"modules/GridModule.html":{}}}],["grid.component.html",{"_index":595,"title":{},"body":{"components/GridComponent.html":{}}}],["grid.component.scss",{"_index":594,"title":{},"body":{"components/GridComponent.html":{}}}],["grid.service",{"_index":636,"title":{},"body":{"components/GridComponent.html":{}}}],["grid/grid.module",{"_index":917,"title":{},"body":{"modules/HomeModule.html":{}}}],["gridcomponent",{"_index":45,"title":{"components/GridComponent.html":{}},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gridconfig",{"_index":797,"title":{},"body":{"injectables/GridService.html":{},"miscellaneous/variables.html":{}}}],["gridconfigkey",{"_index":796,"title":{},"body":{"injectables/GridService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gridheadercomponent",{"_index":47,"title":{"components/GridHeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["griditems",{"_index":603,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{}}}],["gridmodule",{"_index":731,"title":{"modules/GridModule.html":{}},"body":{"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["gridservice",{"_index":606,"title":{"injectables/GridService.html":{}},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"coverage.html":{}}}],["gridster2",{"_index":635,"title":{},"body":{"components/GridComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"dependencies.html":{}}}],["gridsterconfig",{"_index":632,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{}}}],["gridsteritem",{"_index":633,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{}}}],["gridsteritemcomponentinterface",{"_index":768,"title":{},"body":{"injectables/GridService.html":{}}}],["gridstermodule",{"_index":744,"title":{},"body":{"modules/GridModule.html":{}}}],["gridtype",{"_index":783,"title":{},"body":{"injectables/GridService.html":{}}}],["group",{"_index":828,"title":{},"body":{"components/HeaderComponent.html":{}}}],["guard",{"_index":251,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":252,"title":{},"body":{"guards/AuthGuard.html":{}}}],["h",{"_index":1125,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{}}}],["handleautherror",{"_index":290,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["handleautherror(err",{"_index":294,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["header",{"_index":685,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{}}}],["header'},{'name",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["header.component",{"_index":753,"title":{},"body":{"modules/GridModule.html":{}}}],["header.component.html",{"_index":687,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{}}}],["header.component.scss",{"_index":686,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{}}}],["header.component.ts",{"_index":684,"title":{},"body":{"components/GridHeaderComponent.html":{},"coverage.html":{}}}],["header.component.ts:13",{"_index":698,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["header.component.ts:15",{"_index":699,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["header.component.ts:16",{"_index":701,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["header.component.ts:18",{"_index":702,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["header.component.ts:20",{"_index":710,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["header.component.ts:25",{"_index":696,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["header.component.ts:30",{"_index":703,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["header.component.ts:46",{"_index":704,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["header/grid",{"_index":683,"title":{},"body":{"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"coverage.html":{}}}],["header/header.component",{"_index":914,"title":{},"body":{"modules/HomeModule.html":{}}}],["header/refresh",{"_index":754,"title":{},"body":{"modules/GridModule.html":{},"components/RefreshRateInputDialogComponent.html":{},"coverage.html":{}}}],["headercomponent",{"_index":50,"title":{"components/HeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["headers",{"_index":484,"title":{},"body":{"injectables/DashboardService.html":{},"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["height",{"_index":863,"title":{},"body":{"components/HeaderComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["hello",{"_index":970,"title":{},"body":{"components/LoginComponent.html":{}}}],["help",{"_index":1822,"title":{},"body":{"index.html":{}}}],["hint",{"_index":882,"title":{},"body":{"components/HeaderComponent.html":{}}}],["home",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"components/UsersComponent.html":{}}}],["home'},{'name",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["home.component",{"_index":916,"title":{},"body":{"modules/HomeModule.html":{}}}],["home.component.html",{"_index":898,"title":{},"body":{"components/HomeComponent.html":{}}}],["home.component.scss",{"_index":897,"title":{},"body":{"components/HomeComponent.html":{}}}],["home/grid/grid.module",{"_index":1546,"title":{},"body":{"modules/UsersModule.html":{}}}],["home/home.component",{"_index":226,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["home/home.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["homecomponent",{"_index":51,"title":{"components/HomeComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["homemodule",{"_index":123,"title":{"modules/HomeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["hooray",{"_index":973,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["hour",{"_index":1105,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["html",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["http://localhost:4200",{"_index":1795,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:80",{"_index":1846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:8080",{"_index":1848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http_interceptors",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["httpclient",{"_index":376,"title":{},"body":{"injectables/DashboardService.html":{},"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/VerifyAuthComponent.html":{}}}],["httpclientmodule",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["httperrorresponse",{"_index":295,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httpevent",{"_index":304,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httphandler",{"_index":301,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httpheaders",{"_index":427,"title":{},"body":{"injectables/DashboardService.html":{}}}],["httpinterceptor",{"_index":305,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httprequest",{"_index":299,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httpresponse",{"_index":428,"title":{},"body":{"injectables/DashboardService.html":{}}}],["https://login.microsoftonline.com/common/oauth2/v2.0/authorize",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["humidity",{"_index":1560,"title":{},"body":{"interfaces/Weather.html":{},"components/WeatherComponent.html":{}}}],["icon",{"_index":505,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/UsersComponent.html":{},"miscellaneous/variables.html":{}}}],["icon:hover",{"_index":1539,"title":{},"body":{"components/UsersComponent.html":{}}}],["icondefinition",{"_index":507,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{}}}],["icons",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DashboardServiceProps.html":{},"components/GridHeaderComponent.html":{},"modules/HomeModule.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"dependencies.html":{}}}],["id",{"_index":380,"title":{"interfaces/Id.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"interfaces/Id.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1726,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":419,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/GridService.html":{}}}],["ignorecontent",{"_index":780,"title":{},"body":{"injectables/GridService.html":{}}}],["image",{"_index":1350,"title":{},"body":{"interfaces/SpotifyArtist.html":{}}}],["imageurl",{"_index":1561,"title":{},"body":{"interfaces/Weather.html":{}}}],["implements",{"_index":279,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["import",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{}}}],["important",{"_index":870,"title":{},"body":{"components/HeaderComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{}}}],["imports",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":845,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{}}}],["inject",{"_index":964,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["inject(nb_auth_options",{"_index":966,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["injectable",{"_index":273,"title":{"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"injectables/GridService.html":{}},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"injectables/GridService.html":{},"coverage.html":{}}}],["injectables",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"injectables/GridService.html":{},"overview.html":{}}}],["input",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["inputs",{"_index":690,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"directives/WidgetRenderDirective.html":{}}}],["install",{"_index":847,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["intercept",{"_index":291,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["intercept(request",{"_index":298,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["interceptor",{"_index":287,"title":{"interceptors/AuthInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":288,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["interface",{"_index":346,"title":{"interfaces/Authenticated.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"interfaces/OAuthLogin.html":{},"interfaces/SpotifyArtist.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"interfaces/TtvUser.html":{},"interfaces/User.html":{},"interfaces/Weather.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{}},"body":{"interfaces/Authenticated.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SpotifyArtist.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"interfaces/TtvUser.html":{},"interfaces/User.html":{},"interfaces/Weather.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"coverage.html":{}}}],["interfaces",{"_index":347,"title":{},"body":{"interfaces/Authenticated.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"interfaces/OAuthLogin.html":{},"interfaces/SpotifyArtist.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"interfaces/TtvUser.html":{},"interfaces/User.html":{},"interfaces/Weather.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"overview.html":{}}}],["interfaces/authenticated",{"_index":431,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interfaces/id",{"_index":447,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interfaces/microsoft",{"_index":436,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interfaces/spotify",{"_index":433,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interfaces/subreddit",{"_index":448,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interfaces/ttv",{"_index":450,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interfaces/user",{"_index":455,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interfaces/weather",{"_index":430,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interfaces/widget",{"_index":444,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interfaces/yt",{"_index":453,"title":{},"body":{"injectables/DashboardService.html":{}}}],["interval",{"_index":1066,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["interval(this.refreshrate",{"_index":1113,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["invalid",{"_index":1399,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["iresponse",{"_index":921,"title":{"interfaces/IResponse.html":{}},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"coverage.html":{}}}],["isauthenticated",{"_index":1019,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["isauthenticated.authenticated",{"_index":1273,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["isgoogleauthed",{"_index":1654,"title":{},"body":{"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["isgooglelogged",{"_index":367,"title":{},"body":{"injectables/DashboardService.html":{}}}],["isloading",{"_index":1020,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["islogged",{"_index":1073,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["islogged.authenticated",{"_index":1075,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["isloggedin",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["islogin",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["ismicrosoftlogged",{"_index":368,"title":{},"body":{"injectables/DashboardService.html":{}}}],["isread",{"_index":1003,"title":{},"body":{"interfaces/MicrosoftMail.html":{}}}],["isredditauthed",{"_index":1234,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["isredditlogged",{"_index":369,"title":{},"body":{"injectables/DashboardService.html":{}}}],["isspotifylogged",{"_index":370,"title":{},"body":{"injectables/DashboardService.html":{}}}],["istwitchauthed",{"_index":1439,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{}}}],["istwitchlogged",{"_index":371,"title":{},"body":{"injectables/DashboardService.html":{}}}],["item",{"_index":771,"title":{},"body":{"injectables/GridService.html":{},"components/HeaderComponent.html":{}}}],["item.id",{"_index":646,"title":{},"body":{"components/GridComponent.html":{}}}],["itemcomponent",{"_index":767,"title":{},"body":{"injectables/GridService.html":{}}}],["itemcomponent.$item.x",{"_index":801,"title":{},"body":{"injectables/GridService.html":{}}}],["itemcomponent.$item.y",{"_index":803,"title":{},"body":{"injectables/GridService.html":{}}}],["items",{"_index":857,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/UsersComponent.html":{}}}],["jsonwebtoken",{"_index":1777,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":849,"title":{},"body":{"components/HeaderComponent.html":{}}}],["jwt",{"_index":936,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["karma",{"_index":1818,"title":{},"body":{"index.html":{}}}],["key",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["kylian",{"_index":588,"title":{},"body":{"components/FooterComponent.html":{}}}],["label=\"social",{"_index":986,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["lang",{"_index":1429,"title":{},"body":{"interfaces/Subreddit.html":{}}}],["language",{"_index":1304,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{}}}],["lecorchet",{"_index":591,"title":{},"body":{"components/FooterComponent.html":{}}}],["left",{"_index":877,"title":{},"body":{"components/HeaderComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["legend",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"overview.html":{}}}],["likecount",{"_index":1684,"title":{},"body":{"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{}}}],["likes",{"_index":1718,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["link",{"_index":901,"title":{},"body":{"components/HomeComponent.html":{},"components/LoginComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/UsersComponent.html":{}}}],["literal",{"_index":956,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":1091,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["loadconfig",{"_index":1027,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["log",{"_index":829,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["login",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["login'},{'name",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["login.component.html",{"_index":952,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{}}}],["login.component.scss",{"_index":951,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{}}}],["login/login.component",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{}}}],["logincomponent",{"_index":53,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["loginhello",{"_index":991,"title":{},"body":{"components/LoginComponent.html":{}}}],["logo",{"_index":854,"title":{},"body":{"components/HeaderComponent.html":{}}}],["logout",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["ltr(border",{"_index":886,"title":{},"body":{"components/HeaderComponent.html":{}}}],["ltr(padding",{"_index":873,"title":{},"body":{"components/HeaderComponent.html":{}}}],["made",{"_index":587,"title":{},"body":{"components/FooterComponent.html":{}}}],["mail",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mail.component",{"_index":573,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"interfaces/WidgetProps.html":{}}}],["mail.component.html",{"_index":1130,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.scss",{"_index":1129,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts",{"_index":1128,"title":{},"body":{"components/MsMailComponent.html":{},"coverage.html":{}}}],["mail.component.ts:104",{"_index":1144,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:120",{"_index":1145,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:137",{"_index":1147,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:143",{"_index":1143,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:153",{"_index":1154,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:17",{"_index":1162,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:177",{"_index":1155,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:18",{"_index":1167,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:20",{"_index":1163,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:21",{"_index":1164,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:23",{"_index":1159,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:24",{"_index":1160,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:26",{"_index":1165,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:27",{"_index":1168,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:28",{"_index":1166,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:29",{"_index":1158,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:31",{"_index":1161,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:35",{"_index":1157,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:45",{"_index":1142,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:50",{"_index":1150,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:68",{"_index":1149,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:73",{"_index":1156,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:81",{"_index":1148,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:94",{"_index":1151,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.component.ts:98",{"_index":1153,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.sender.emailaddress.address",{"_index":1206,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.subject",{"_index":1207,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mail.ts",{"_index":1002,"title":{},"body":{"interfaces/MicrosoftMail.html":{},"coverage.html":{}}}],["mailbox",{"_index":438,"title":{},"body":{"injectables/DashboardService.html":{},"components/MsMailComponent.html":{}}}],["mailbox.displayname",{"_index":1205,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mailbox.ts",{"_index":1008,"title":{},"body":{"interfaces/MicrosoftMailbox.html":{},"coverage.html":{}}}],["mailbox.unreaditemcount",{"_index":1204,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mailboxid",{"_index":388,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mailboxlist",{"_index":1133,"title":{},"body":{"components/MsMailComponent.html":{}}}],["maillist",{"_index":1134,"title":{},"body":{"components/MsMailComponent.html":{}}}],["mails",{"_index":1185,"title":{},"body":{"components/MsMailComponent.html":{}}}],["margin",{"_index":1308,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["match",{"_index":1338,"title":{},"body":{"components/RegisterComponent.html":{}}}],["matching",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["maxcols",{"_index":788,"title":{},"body":{"injectables/GridService.html":{}}}],["maxrows",{"_index":790,"title":{},"body":{"injectables/GridService.html":{}}}],["media",{"_index":891,"title":{},"body":{"components/HeaderComponent.html":{}}}],["menu",{"_index":904,"title":{},"body":{"components/HomeComponent.html":{}}}],["mergemap",{"_index":1067,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["message",{"_index":974,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["methods",{"_index":254,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["microsoft",{"_index":535,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"miscellaneous/variables.html":{}}}],["microsoftcalendar",{"_index":442,"title":{"interfaces/MicrosoftCalendar.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/MicrosoftCalendar.html":{},"components/MsCalendarComponent.html":{},"coverage.html":{}}}],["microsoftcalendarevent",{"_index":439,"title":{"interfaces/MicrosoftCalendarEvent.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"components/MsCalendarComponent.html":{},"coverage.html":{}}}],["microsoftmail",{"_index":435,"title":{"interfaces/MicrosoftMail.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/MicrosoftMail.html":{},"components/MsMailComponent.html":{},"coverage.html":{}}}],["microsoftmailbox",{"_index":437,"title":{"interfaces/MicrosoftMailbox.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsMailComponent.html":{},"coverage.html":{}}}],["mincols",{"_index":786,"title":{},"body":{"injectables/GridService.html":{}}}],["minrows",{"_index":789,"title":{},"body":{"injectables/GridService.html":{}}}],["minute",{"_index":1107,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["miscellaneous",{"_index":1836,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["module",{"_index":109,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":111,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["monitor",{"_index":559,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":1823,"title":{},"body":{"index.html":{}}}],["mouseevent",{"_index":769,"title":{},"body":{"injectables/GridService.html":{}}}],["ms",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["mscalendar",{"_index":536,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["mscalendarcomponent",{"_index":55,"title":{"components/MsCalendarComponent.html":{}},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["msmail",{"_index":540,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["msmailcomponent",{"_index":58,"title":{"components/MsMailComponent.html":{}},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["multi",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["music",{"_index":1418,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["name",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nathan",{"_index":590,"title":{},"body":{"components/FooterComponent.html":{}}}],["navigate",{"_index":1794,"title":{},"body":{"index.html":{}}}],["nb",{"_index":846,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["nb_auth_options",{"_index":965,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["nbactionsmodule",{"_index":918,"title":{},"body":{"modules/HomeModule.html":{},"modules/UsersModule.html":{}}}],["nbalertmodule",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["nbauthcomponent",{"_index":227,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["nbauthjwttoken",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["nbauthmodule",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["nbauthmodule.forroot",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["nbauthresult",{"_index":924,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["nbauthservice",{"_index":257,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RegisterComponent.html":{}}}],["nbbuttonmodule",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{}}}],["nbcardmodule",{"_index":738,"title":{},"body":{"modules/GridModule.html":{},"modules/UsersModule.html":{}}}],["nbcheckboxmodule",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{}}}],["nbcontextmenumodule",{"_index":919,"title":{},"body":{"modules/HomeModule.html":{},"modules/UsersModule.html":{}}}],["nbdialogmodule",{"_index":739,"title":{},"body":{"modules/GridModule.html":{}}}],["nbdialogmodule.forroot",{"_index":758,"title":{},"body":{"modules/GridModule.html":{}}}],["nbdialogref",{"_index":1318,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["nbdialogservice",{"_index":695,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["nbevaiconsmodule",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/UsersModule.html":{}}}],["nbformfieldmodule",{"_index":740,"title":{},"body":{"modules/GridModule.html":{},"modules/UsersModule.html":{}}}],["nbiconmodule",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/UsersModule.html":{}}}],["nbinputmodule",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{}}}],["nblayoutmodule",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/UsersModule.html":{}}}],["nblogincomponent",{"_index":950,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{}}}],["nblogoutcomponent",{"_index":228,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["nbmenuitem",{"_index":826,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/UsersComponent.html":{}}}],["nbmenumodule",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/UsersModule.html":{}}}],["nbmenumodule.forroot",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["nboauth2authstrategy",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["nboauth2authstrategy.setup",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["nboauth2responsetype",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["nboauth2responsetype.token",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["nbpasswordauthstrategy",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["nbpasswordauthstrategy.setup",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["nbpopovermodule",{"_index":741,"title":{},"body":{"modules/GridModule.html":{}}}],["nbprogressbarmodule",{"_index":742,"title":{},"body":{"modules/GridModule.html":{}}}],["nbregistercomponent",{"_index":1329,"title":{},"body":{"components/RegisterComponent.html":{}}}],["nbselectmodule",{"_index":743,"title":{},"body":{"modules/GridModule.html":{}}}],["nbsidebarmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/UsersModule.html":{}}}],["nbsidebarmodule.forroot",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["nbsidebarservice",{"_index":819,"title":{},"body":{"components/HeaderComponent.html":{}}}],["nbsp",{"_index":1121,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["nbspinnermodule",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/UsersModule.html":{}}}],["nbthememodule",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{}}}],["nbthememodule.forroot({name",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["nbusermodule",{"_index":920,"title":{},"body":{"modules/HomeModule.html":{},"modules/UsersModule.html":{}}}],["nebular/auth",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RegisterComponent.html":{},"dependencies.html":{}}}],["nebular/eva",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/HomeModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nebular/theme",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["necessary",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{}}}],["new",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"injectables/DashboardService.html":{},"components/GridHeaderComponent.html":{},"interfaces/IResponse.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"coverage.html":{},"index.html":{}}}],["newval",{"_index":721,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["next",{"_index":300,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["next.handle(request).pipe(catcherror(x",{"_index":312,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["ng",{"_index":746,"title":{},"body":{"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["ngbmodule",{"_index":745,"title":{},"body":{"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{}}}],["ngform",{"_index":1371,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["ngmodule",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{}}}],["ngonchanges",{"_index":1620,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["ngonchanges(changes",{"_index":1631,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["ngondestroy",{"_index":598,"title":{},"body":{"components/GridComponent.html":{},"interfaces/IResponse.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["ngoninit",{"_index":584,"title":{},"body":{"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["node_modules/@nebular/theme/styles/global/breakpoints",{"_index":842,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["node_modules/@nebular/theme/styles/theming",{"_index":843,"title":{},"body":{"components/HeaderComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["node_modules/bootstrap/scss/mixins/breakpoints",{"_index":841,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["none",{"_index":880,"title":{},"body":{"components/HeaderComponent.html":{}}}],["notfound",{"_index":1218,"title":{},"body":{"modules/NotFoundModule.html":{}}}],["notfoundcomponent",{"_index":61,"title":{"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["notfoundmodule",{"_index":124,"title":{"modules/NotFoundModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotFoundModule.html":{},"modules.html":{},"overview.html":{}}}],["nothing",{"_index":1296,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["nowrap",{"_index":890,"title":{},"body":{"components/HeaderComponent.html":{}}}],["null",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["num",{"_index":718,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["number",{"_index":565,"title":{},"body":{"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{}}}],["oauth",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["oauth'},{'name",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["oauth.component",{"_index":232,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{}}}],["oauth.component.html",{"_index":1223,"title":{},"body":{"components/OfficeOAuthComponent.html":{}}}],["oauth.component.scss",{"_index":1222,"title":{},"body":{"components/OfficeOAuthComponent.html":{}}}],["oauth.component.ts",{"_index":1221,"title":{},"body":{"components/OfficeOAuthComponent.html":{},"coverage.html":{}}}],["oauth.component.ts:12",{"_index":1225,"title":{},"body":{"components/OfficeOAuthComponent.html":{}}}],["oauth.component.ts:18",{"_index":1226,"title":{},"body":{"components/OfficeOAuthComponent.html":{}}}],["oauth.component.ts:25",{"_index":1227,"title":{},"body":{"components/OfficeOAuthComponent.html":{}}}],["oauth/office",{"_index":231,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/OfficeOAuthComponent.html":{},"coverage.html":{}}}],["oauthlogin",{"_index":961,"title":{"interfaces/OAuthLogin.html":{}},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"coverage.html":{}}}],["oauthlogins",{"_index":953,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{}}}],["object",{"_index":705,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":269,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/DashboardService.html":{}}}],["observationpoint",{"_index":1562,"title":{},"body":{"interfaces/Weather.html":{}}}],["observationtime",{"_index":1563,"title":{},"body":{"interfaces/Weather.html":{}}}],["observe",{"_index":457,"title":{},"body":{"injectables/DashboardService.html":{}}}],["of(null",{"_index":463,"title":{},"body":{"injectables/DashboardService.html":{}}}],["office",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["officeoauthcallbackcomponent",{"_index":63,"title":{"components/OfficeOAuthCallbackComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["officeoauthcomponent",{"_index":67,"title":{"components/OfficeOAuthComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["oh",{"_index":971,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["oncalendarselected",{"_index":1028,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["oncalendarselected(selectedcalendar",{"_index":1046,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["onchanges",{"_index":1619,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["onclose.subscribe(newval",{"_index":717,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["ondeleteclick",{"_index":1521,"title":{},"body":{"components/UsersComponent.html":{}}}],["ondeleteclick(id",{"_index":1524,"title":{},"body":{"components/UsersComponent.html":{}}}],["ondestroy",{"_index":593,"title":{},"body":{"components/GridComponent.html":{},"interfaces/IResponse.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["ondrag&resize",{"_index":777,"title":{},"body":{"injectables/GridService.html":{}}}],["ondragstop",{"_index":761,"title":{},"body":{"injectables/GridService.html":{}}}],["ondragstop(item",{"_index":766,"title":{},"body":{"injectables/GridService.html":{}}}],["one",{"_index":977,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["onexitclick",{"_index":1360,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["oninit",{"_index":580,"title":{},"body":{"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["online",{"_index":552,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["onloginclick",{"_index":1029,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["onmailboxselected",{"_index":1139,"title":{},"body":{"components/MsMailComponent.html":{}}}],["onmailboxselected(selectedmailbox",{"_index":1152,"title":{},"body":{"components/MsMailComponent.html":{}}}],["onsubmit",{"_index":1239,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["onsubmit(formdata",{"_index":1370,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["ontimerclicked",{"_index":688,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["ontrashclicked",{"_index":689,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["optional",{"_index":261,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["options",{"_index":483,"title":{},"body":{"injectables/DashboardService.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["out",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outline",{"_index":830,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/UsersComponent.html":{}}}],["output",{"_index":711,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["outputs",{"_index":691,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["overflow",{"_index":1306,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["overview",{"_index":1825,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":1752,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":861,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["page",{"_index":913,"title":{},"body":{"modules/HomeModule.html":{},"index.html":{}}}],["parameters",{"_index":260,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["params",{"_index":498,"title":{},"body":{"injectables/DashboardService.html":{}}}],["parsedurl",{"_index":466,"title":{},"body":{"injectables/DashboardService.html":{}}}],["parsedurl.searchparams.get('v",{"_index":469,"title":{},"body":{"injectables/DashboardService.html":{}}}],["parseint(newval",{"_index":719,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["partner",{"_index":1510,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["password",{"_index":978,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["path",{"_index":241,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["pathmatch",{"_index":244,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["people",{"_index":902,"title":{},"body":{"components/HomeComponent.html":{},"components/UsersComponent.html":{}}}],["pipe(takeuntil(this.destroy",{"_index":932,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{}}}],["pointer",{"_index":866,"title":{},"body":{"components/HeaderComponent.html":{},"components/UsersComponent.html":{}}}],["popularity",{"_index":1351,"title":{},"body":{"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{}}}],["position",{"_index":1126,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["private",{"_index":281,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"components/GridComponent.html":{},"components/HeaderComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RegisterComponent.html":{},"components/VerifyAuthComponent.html":{},"directives/WidgetRenderDirective.html":{}}}],["prod",{"_index":1809,"title":{},"body":{"index.html":{}}}],["production",{"_index":1811,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["profile_image_url",{"_index":1482,"title":{},"body":{"interfaces/TtvUser.html":{}}}],["project",{"_index":1785,"title":{},"body":{"index.html":{}}}],["promise",{"_index":270,"title":{},"body":{"guards/AuthGuard.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["properties",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{}}}],["protractor",{"_index":1820,"title":{},"body":{"index.html":{}}}],["provide",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["providedin",{"_index":278,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"injectables/GridService.html":{}}}],["providers",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":760,"title":{},"body":{"injectables/GridService.html":{}}}],["q",{"_index":499,"title":{},"body":{"injectables/DashboardService.html":{}}}],["query",{"_index":446,"title":{},"body":{"injectables/DashboardService.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetQueryConfig.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["r",{"_index":478,"title":{},"body":{"injectables/DashboardService.html":{}}}],["radius",{"_index":1421,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["rate",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["rd",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["rdsubredditwatcher",{"_index":555,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["rdsubredditwatchercomponent",{"_index":69,"title":{"components/RdSubredditWatcherComponent.html":{}},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["real",{"_index":976,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["receiveddatetime",{"_index":1004,"title":{},"body":{"interfaces/MicrosoftMail.html":{}}}],["red",{"_index":1540,"title":{},"body":{"components/UsersComponent.html":{}}}],["reddit",{"_index":554,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/RdSubredditWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["redirect",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["redirectto",{"_index":243,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["redirecturi",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["ref",{"_index":1320,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["reference",{"_index":1827,"title":{},"body":{"index.html":{}}}],["refresh",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["refreshrate",{"_index":613,"title":{},"body":{"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["refreshratechange",{"_index":692,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["refreshrateinputdialogcomponent",{"_index":73,"title":{"components/RefreshRateInputDialogComponent.html":{}},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["register",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["register'},{'name",{"_index":79,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["register.component.html",{"_index":1331,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register.component.scss",{"_index":1330,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register/register.component",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{}}}],["registercomponent",{"_index":78,"title":{"components/RegisterComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["regular",{"_index":1767,"title":{},"body":{"dependencies.html":{}}}],["relative",{"_index":1127,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["reload",{"_index":1797,"title":{},"body":{"index.html":{}}}],["remember",{"_index":983,"title":{},"body":{"components/LoginComponent.html":{}}}],["remove",{"_index":681,"title":{},"body":{"components/GridComponent.html":{}}}],["removeallwidgets",{"_index":599,"title":{},"body":{"components/GridComponent.html":{}}}],["removeclick",{"_index":693,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["removeitem",{"_index":600,"title":{},"body":{"components/GridComponent.html":{}}}],["removeitem(id",{"_index":622,"title":{},"body":{"components/GridComponent.html":{}}}],["removeitems",{"_index":762,"title":{},"body":{"injectables/GridService.html":{}}}],["removeitems(ids",{"_index":772,"title":{},"body":{"injectables/GridService.html":{}}}],["removewidgets",{"_index":372,"title":{},"body":{"injectables/DashboardService.html":{}}}],["removewidgets(ids",{"_index":417,"title":{},"body":{"injectables/DashboardService.html":{}}}],["render",{"_index":736,"title":{},"body":{"modules/GridModule.html":{}}}],["render.directive",{"_index":752,"title":{},"body":{"modules/GridModule.html":{}}}],["render.directive.ts",{"_index":1618,"title":{},"body":{"directives/WidgetRenderDirective.html":{},"coverage.html":{}}}],["render.directive.ts:17",{"_index":1628,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["render.directive.ts:18",{"_index":1629,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["render.directive.ts:19",{"_index":1630,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["render.directive.ts:21",{"_index":1627,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["render.directive.ts:26",{"_index":1633,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["repeat",{"_index":1336,"title":{},"body":{"components/RegisterComponent.html":{}}}],["repeatfetchartistdata",{"_index":1361,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["repeatfetchcalendarlist",{"_index":1030,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["repeatfetcheventlist",{"_index":1031,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["repeatfetchmailboxlist",{"_index":1140,"title":{},"body":{"components/MsMailComponent.html":{}}}],["repeatfetchmaillist",{"_index":1141,"title":{},"body":{"components/MsMailComponent.html":{}}}],["request",{"_index":303,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["require",{"_index":1749,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":1843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["res.body",{"_index":838,"title":{},"body":{"components/HeaderComponent.html":{}}}],["res.body.email",{"_index":836,"title":{},"body":{"components/HeaderComponent.html":{}}}],["reset",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"modules/UsersModule.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"overview.html":{}}}],["resizable",{"_index":791,"title":{},"body":{"injectables/GridService.html":{}}}],["resolver",{"_index":1625,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["response",{"_index":458,"title":{},"body":{"injectables/DashboardService.html":{}}}],["responsetype",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["result",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["resume",{"_index":537,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["returns",{"_index":268,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["right",{"_index":874,"title":{},"body":{"components/HeaderComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["root",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"injectables/GridService.html":{}}}],["root'},{'name",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["route",{"_index":267,"title":{},"body":{"guards/AuthGuard.html":{}}}],["router",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/RegisterComponent.html":{},"components/VerifyAuthComponent.html":{}}}],["routermodule",{"_index":224,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{}}}],["routermodule.forroot(routes",{"_index":250,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routerstatesnapshot",{"_index":265,"title":{},"body":{"guards/AuthGuard.html":{}}}],["routes",{"_index":225,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["routing.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":223,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["rows",{"_index":531,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["rtl(border",{"_index":888,"title":{},"body":{"components/HeaderComponent.html":{}}}],["rtl(padding",{"_index":876,"title":{},"body":{"components/HeaderComponent.html":{}}}],["run",{"_index":1791,"title":{},"body":{"index.html":{}}}],["running",{"_index":1812,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":274,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/DashboardService.html":{},"interfaces/IResponse.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":277,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"interfaces/IResponse.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["save",{"_index":1036,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["saveconfig",{"_index":1032,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["savegridconfig",{"_index":373,"title":{},"body":{"injectables/DashboardService.html":{}}}],["savegridconfig(configs",{"_index":420,"title":{},"body":{"injectables/DashboardService.html":{}}}],["savegridlayouttolocalstorage",{"_index":601,"title":{},"body":{"components/GridComponent.html":{}}}],["saveitems",{"_index":763,"title":{},"body":{"injectables/GridService.html":{}}}],["savequeryconfig",{"_index":374,"title":{},"body":{"injectables/DashboardService.html":{}}}],["savequeryconfig(configs",{"_index":424,"title":{},"body":{"injectables/DashboardService.html":{}}}],["scaffolding",{"_index":1801,"title":{},"body":{"index.html":{}}}],["scope",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["scrollable",{"_index":905,"title":{},"body":{"components/HomeComponent.html":{}}}],["scrolltonewitems",{"_index":792,"title":{},"body":{"injectables/GridService.html":{}}}],["scrollvertical",{"_index":784,"title":{},"body":{"injectables/GridService.html":{}}}],["search",{"_index":868,"title":{},"body":{"components/HeaderComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["searchbuffer",{"_index":1235,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["secondary",{"_index":1203,"title":{},"body":{"components/MsMailComponent.html":{}}}],["seconds",{"_index":1327,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["select",{"_index":677,"title":{},"body":{"components/GridComponent.html":{},"components/HeaderComponent.html":{}}}],["selectedcalendar",{"_index":1021,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["selectedmailbox",{"_index":1135,"title":{},"body":{"components/MsMailComponent.html":{}}}],["selectedmailbox?.displayname",{"_index":1201,"title":{},"body":{"components/MsMailComponent.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["sender",{"_index":1005,"title":{},"body":{"interfaces/MicrosoftMail.html":{}}}],["serve",{"_index":1792,"title":{},"body":{"index.html":{}}}],["server",{"_index":1790,"title":{},"body":{"index.html":{}}}],["service",{"_index":522,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["service.name",{"_index":678,"title":{},"body":{"components/GridComponent.html":{}}}],["service.widgets.find(item",{"_index":645,"title":{},"body":{"components/GridComponent.html":{}}}],["servicelist",{"_index":604,"title":{},"body":{"components/GridComponent.html":{}}}],["services",{"_index":638,"title":{},"body":{"components/GridComponent.html":{}}}],["services.ts",{"_index":504,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["services/auth.service",{"_index":275,"title":{},"body":{"guards/AuthGuard.html":{}}}],["setgridsize",{"_index":785,"title":{},"body":{"injectables/GridService.html":{}}}],["setislogin",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["setislogin(value",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["setrefreshrate",{"_index":563,"title":{},"body":{"interfaces/DashboardWidget.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["setrefreshrate(rate",{"_index":564,"title":{},"body":{"interfaces/DashboardWidget.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["shared/dashboard",{"_index":637,"title":{},"body":{"components/GridComponent.html":{}}}],["shared/guards/auth.guard",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["shared/interceptors/auth.interceptor",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/interfaces/id",{"_index":794,"title":{},"body":{"injectables/GridService.html":{},"components/UsersComponent.html":{}}}],["shared/interfaces/microsoft",{"_index":1065,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{}}}],["shared/interfaces/spotify",{"_index":1387,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["shared/interfaces/subreddit",{"_index":1266,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["shared/interfaces/ttv",{"_index":1460,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{}}}],["shared/interfaces/user",{"_index":833,"title":{},"body":{"components/HeaderComponent.html":{},"components/UsersComponent.html":{}}}],["shared/interfaces/weather",{"_index":1595,"title":{},"body":{"components/WeatherComponent.html":{}}}],["shared/interfaces/widget",{"_index":795,"title":{},"body":{"injectables/GridService.html":{}}}],["shared/interfaces/yt",{"_index":1664,"title":{},"body":{"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["shared/services/auth.service",{"_index":927,"title":{},"body":{"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/RegisterComponent.html":{},"components/VerifyAuthComponent.html":{}}}],["shared/services/dashboard.service",{"_index":639,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["shared/widget",{"_index":751,"title":{},"body":{"modules/GridModule.html":{}}}],["shouldsave",{"_index":609,"title":{},"body":{"components/GridComponent.html":{}}}],["shows",{"_index":538,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["sidebar",{"_index":871,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{}}}],["sidebarservice",{"_index":821,"title":{},"body":{"components/HeaderComponent.html":{}}}],["sign",{"_index":987,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["simplechanges",{"_index":1632,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["size",{"_index":884,"title":{},"body":{"components/HeaderComponent.html":{}}}],["skytext",{"_index":1564,"title":{},"body":{"interfaces/Weather.html":{}}}],["snap",{"_index":972,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["sociallink.title",{"_index":1342,"title":{},"body":{"components/RegisterComponent.html":{}}}],["solid",{"_index":511,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/SpotifyArtistComponent.html":{},"components/UsersComponent.html":{},"components/YtVideoWatcherComponent.html":{},"dependencies.html":{}}}],["something",{"_index":1533,"title":{},"body":{"components/UsersComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"modules/HomeModule.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"index.html":{}}}],["space",{"_index":850,"title":{},"body":{"components/HeaderComponent.html":{}}}],["spec\\.ts",{"_index":1844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["speed",{"_index":1613,"title":{},"body":{"components/WeatherComponent.html":{}}}],["spotify",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["spotifyartist",{"_index":432,"title":{"interfaces/SpotifyArtist.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["spotifyartistcomponent",{"_index":80,"title":{"components/SpotifyArtistComponent.html":{}},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["src/.../dashboard",{"_index":1839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../grid.service.ts",{"_index":1842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":1838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":222,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:12",{"_index":30,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/auth/auth.module.ts",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/app/auth/login/login.component.ts",{"_index":948,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"coverage.html":{}}}],["src/app/auth/login/login.component.ts:19",{"_index":963,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/auth/login/login.component.ts:24",{"_index":959,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/auth/login/login.component.ts:30",{"_index":960,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/auth/office",{"_index":922,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"coverage.html":{}}}],["src/app/auth/register/register.component.ts",{"_index":1328,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["src/app/auth/register/register.component.ts:11",{"_index":1332,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/auth/register/register.component.ts:16",{"_index":1333,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/auth/verify",{"_index":1547,"title":{},"body":{"components/VerifyAuthComponent.html":{},"coverage.html":{}}}],["src/app/home/footer/footer.component.ts",{"_index":579,"title":{},"body":{"components/FooterComponent.html":{},"coverage.html":{}}}],["src/app/home/footer/footer.component.ts:13",{"_index":586,"title":{},"body":{"components/FooterComponent.html":{}}}],["src/app/home/footer/footer.component.ts:8",{"_index":585,"title":{},"body":{"components/FooterComponent.html":{}}}],["src/app/home/grid/grid",{"_index":682,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"coverage.html":{}}}],["src/app/home/grid/grid.component.ts",{"_index":592,"title":{},"body":{"components/GridComponent.html":{},"coverage.html":{}}}],["src/app/home/grid/grid.component.ts:101",{"_index":619,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:17",{"_index":626,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:21",{"_index":628,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:25",{"_index":630,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:27",{"_index":607,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:32",{"_index":620,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:48",{"_index":614,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:64",{"_index":623,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:77",{"_index":618,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:86",{"_index":621,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.component.ts:97",{"_index":624,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/home/grid/grid.module.ts",{"_index":735,"title":{},"body":{"modules/GridModule.html":{}}}],["src/app/home/grid/grid.service.ts",{"_index":759,"title":{},"body":{"injectables/GridService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/home/grid/grid.service.ts:14",{"_index":793,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/home/grid/grid.service.ts:33",{"_index":765,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/home/grid/grid.service.ts:38",{"_index":774,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/home/grid/grid.service.ts:42",{"_index":770,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/home/grid/grid.service.ts:52",{"_index":775,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/home/grid/grid.service.ts:70",{"_index":773,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/home/grid/shared/dashboard",{"_index":503,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/home/grid/shared/widget",{"_index":1617,"title":{},"body":{"directives/WidgetRenderDirective.html":{},"coverage.html":{}}}],["src/app/home/grid/widgets/dashboard",{"_index":561,"title":{},"body":{"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/home/grid/widgets/ms",{"_index":1010,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"coverage.html":{}}}],["src/app/home/grid/widgets/rd",{"_index":1230,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"coverage.html":{}}}],["src/app/home/grid/widgets/spotify",{"_index":1352,"title":{},"body":{"components/SpotifyArtistComponent.html":{},"coverage.html":{}}}],["src/app/home/grid/widgets/ttv",{"_index":1438,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"coverage.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts",{"_index":1567,"title":{},"body":{"components/WeatherComponent.html":{},"coverage.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:100",{"_index":1587,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:110",{"_index":1580,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:120",{"_index":1585,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:16",{"_index":1588,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:17",{"_index":1590,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:19",{"_index":1589,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:20",{"_index":1593,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:21",{"_index":1592,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:22",{"_index":1594,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:23",{"_index":1591,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:25",{"_index":1586,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:33",{"_index":1573,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:38",{"_index":1582,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:42",{"_index":1581,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:46",{"_index":1584,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:54",{"_index":1574,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:61",{"_index":1583,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:75",{"_index":1577,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:84",{"_index":1579,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/weather/weather.component.ts:96",{"_index":1576,"title":{},"body":{"components/WeatherComponent.html":{}}}],["src/app/home/grid/widgets/yt",{"_index":1652,"title":{},"body":{"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["src/app/home/header/header.component.ts",{"_index":814,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/home/header/header.component.ts:12",{"_index":825,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/home/header/header.component.ts:16",{"_index":832,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/home/header/header.component.ts:25",{"_index":820,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/home/header/header.component.ts:30",{"_index":822,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/home/header/header.component.ts:37",{"_index":823,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/home/home.component.ts",{"_index":896,"title":{},"body":{"components/HomeComponent.html":{},"coverage.html":{}}}],["src/app/home/home.component.ts:10",{"_index":903,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/home/home.component.ts:23",{"_index":899,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/home/home.component.ts:28",{"_index":900,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/home/home.module.ts",{"_index":912,"title":{},"body":{"modules/HomeModule.html":{}}}],["src/app/not",{"_index":1208,"title":{},"body":{"components/NotFoundComponent.html":{},"modules/NotFoundModule.html":{},"coverage.html":{}}}],["src/app/shared/guards/auth.guard.ts",{"_index":253,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/shared/guards/auth.guard.ts:11",{"_index":259,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/shared/guards/auth.guard.ts:15",{"_index":266,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/shared/interceptors/auth.interceptor.ts",{"_index":289,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"coverage.html":{}}}],["src/app/shared/interceptors/auth.interceptor.ts:13",{"_index":296,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["src/app/shared/interceptors/auth.interceptor.ts:20",{"_index":302,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["src/app/shared/interceptors/auth.interceptor.ts:8",{"_index":293,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["src/app/shared/interfaces/authenticated.ts",{"_index":348,"title":{},"body":{"interfaces/Authenticated.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/id.ts",{"_index":947,"title":{},"body":{"interfaces/Id.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/microsoft",{"_index":995,"title":{},"body":{"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/spotify",{"_index":1346,"title":{},"body":{"interfaces/SpotifyArtist.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/subreddit.ts",{"_index":1425,"title":{},"body":{"interfaces/Subreddit.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/thumbnail.ts",{"_index":1431,"title":{},"body":{"interfaces/Thumbnail.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/ttv",{"_index":1432,"title":{},"body":{"interfaces/TtvStream.html":{},"interfaces/TtvUser.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/user.ts",{"_index":1516,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/weather.ts",{"_index":1557,"title":{},"body":{"interfaces/Weather.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/widget",{"_index":1615,"title":{},"body":{"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetQueryConfig.html":{},"coverage.html":{}}}],["src/app/shared/interfaces/yt",{"_index":1645,"title":{},"body":{"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"coverage.html":{}}}],["src/app/shared/services/auth.service.ts",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/shared/services/auth.service.ts:13",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:7",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/auth.service.ts:9",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/shared/services/dashboard.service.ts",{"_index":350,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{}}}],["src/app/shared/services/dashboard.service.ts:105",{"_index":416,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:111",{"_index":393,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:125",{"_index":414,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:131",{"_index":422,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:137",{"_index":418,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:148",{"_index":426,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:154",{"_index":406,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:160",{"_index":405,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:166",{"_index":384,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:172",{"_index":382,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:178",{"_index":385,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:184",{"_index":387,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:190",{"_index":413,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:196",{"_index":390,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:202",{"_index":415,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:208",{"_index":402,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:24",{"_index":377,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:29",{"_index":399,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:36",{"_index":400,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:42",{"_index":379,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:48",{"_index":408,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:59",{"_index":410,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:77",{"_index":412,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:83",{"_index":398,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/shared/services/dashboard.service.ts:94",{"_index":395,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/users/users.component.ts",{"_index":1517,"title":{},"body":{"components/UsersComponent.html":{},"coverage.html":{}}}],["src/app/users/users.component.ts:15",{"_index":1526,"title":{},"body":{"components/UsersComponent.html":{}}}],["src/app/users/users.component.ts:16",{"_index":1528,"title":{},"body":{"components/UsersComponent.html":{}}}],["src/app/users/users.component.ts:30",{"_index":1529,"title":{},"body":{"components/UsersComponent.html":{}}}],["src/app/users/users.component.ts:31",{"_index":1527,"title":{},"body":{"components/UsersComponent.html":{}}}],["src/app/users/users.component.ts:32",{"_index":1522,"title":{},"body":{"components/UsersComponent.html":{}}}],["src/app/users/users.component.ts:37",{"_index":1523,"title":{},"body":{"components/UsersComponent.html":{}}}],["src/app/users/users.component.ts:48",{"_index":1525,"title":{},"body":{"components/UsersComponent.html":{}}}],["src/app/users/users.module.ts",{"_index":1544,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/environments/environment.prod.ts",{"_index":1746,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1747,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test.ts",{"_index":1748,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":999,"title":{},"body":{"interfaces/MicrosoftCalendarEvent.html":{}}}],["started",{"_index":1478,"title":{"index.html":{}},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["started_at",{"_index":1435,"title":{},"body":{"interfaces/TtvStream.html":{}}}],["startrequest",{"_index":1240,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["state",{"_index":264,"title":{},"body":{"guards/AuthGuard.html":{}}}],["statements",{"_index":1727,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":558,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"miscellaneous/variables.html":{}}}],["stats",{"_index":527,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["stop",{"_index":781,"title":{},"body":{"injectables/GridService.html":{}}}],["stored",{"_index":1806,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["stream",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stream.game_name",{"_index":1476,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["stream.language",{"_index":1477,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["stream.started_at",{"_index":1469,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["stream.title",{"_index":1471,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["stream.ts",{"_index":1433,"title":{},"body":{"interfaces/TtvStream.html":{},"coverage.html":{}}}],["stream.user_name",{"_index":1472,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["stream.viewer_count",{"_index":1474,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["streamer",{"_index":553,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["string",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["styleurls",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["subject",{"_index":926,"title":{},"body":{"interfaces/IResponse.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{}}}],["submit",{"_index":1316,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["submit(value",{"_index":1322,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["subreddit",{"_index":71,"title":{"interfaces/Subreddit.html":{}},"body":{"components/AppComponent.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["subreddit.active_user_count",{"_index":1299,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["subreddit.created",{"_index":1303,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["subreddit.display_name",{"_index":1297,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["subreddit.lang",{"_index":1305,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["subreddit.subscribers",{"_index":1301,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["subreddit.substr(0",{"_index":476,"title":{},"body":{"injectables/DashboardService.html":{}}}],["subreddit.substring(2",{"_index":479,"title":{},"body":{"injectables/DashboardService.html":{}}}],["subreddit.trim",{"_index":475,"title":{},"body":{"injectables/DashboardService.html":{}}}],["subredditcreationformatted",{"_index":1267,"title":{"interfaces/SubredditCreationFormatted.html":{}},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"coverage.html":{}}}],["subs",{"_index":1676,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["subscribe",{"_index":1085,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["subscribe((_",{"_index":940,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{}}}],["subscribe((authresult",{"_index":933,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["subscribe(async",{"_index":1554,"title":{},"body":{"components/VerifyAuthComponent.html":{}}}],["subscriber",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["subscribercount",{"_index":1650,"title":{},"body":{"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{}}}],["subscribers",{"_index":1300,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/Subreddit.html":{}}}],["subscription",{"_index":1056,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["success",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["super(service",{"_index":967,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["support",{"_index":1828,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":512,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridHeaderComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["table",{"_index":1751,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1750,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1419,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["takeuntil",{"_index":925,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{}}}],["tap",{"_index":276,"title":{},"body":{"guards/AuthGuard.html":{}}}],["tap(authenticated",{"_index":284,"title":{},"body":{"guards/AuthGuard.html":{}}}],["temperature",{"_index":1565,"title":{},"body":{"interfaces/Weather.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["templateurl",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["terms",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"components/RegisterComponent.html":{}}}],["test",{"_index":1815,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1814,"title":{},"body":{"index.html":{}}}],["text",{"_index":878,"title":{},"body":{"components/HeaderComponent.html":{},"components/MsMailComponent.html":{}}}],["theme(divider",{"_index":887,"title":{},"body":{"components/HeaderComponent.html":{}}}],["theme(header",{"_index":860,"title":{},"body":{"components/HeaderComponent.html":{}}}],["theme(layout",{"_index":907,"title":{},"body":{"components/HomeComponent.html":{}}}],["theme(sidebar",{"_index":859,"title":{},"body":{"components/HeaderComponent.html":{}}}],["theme(text",{"_index":881,"title":{},"body":{"components/HeaderComponent.html":{}}}],["themes",{"_index":844,"title":{},"body":{"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.additem(foundwidget",{"_index":648,"title":{},"body":{"components/GridComponent.html":{}}}],["this.artistquery",{"_index":1394,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.artistquery.length",{"_index":1388,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.artistquery}).subscribe",{"_index":1393,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.authservice.authenticate('office",{"_index":1229,"title":{},"body":{"components/OfficeOAuthComponent.html":{}}}],["this.authservice.isloggedin",{"_index":282,"title":{},"body":{"guards/AuthGuard.html":{},"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["this.authservice.setislogin(false",{"_index":1556,"title":{},"body":{"components/VerifyAuthComponent.html":{}}}],["this.authservice.setislogin(true",{"_index":1555,"title":{},"body":{"components/VerifyAuthComponent.html":{}}}],["this.calendarlist",{"_index":1095,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.calendarlist.find(cal",{"_index":1087,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.calendarlist.length",{"_index":1097,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.channel",{"_index":1668,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["this.clearrequest",{"_index":1274,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.clearselection",{"_index":1197,"title":{},"body":{"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["this.clearselection(false",{"_index":1118,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.clearselection(true",{"_index":1117,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.component",{"_index":1637,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["this.component.instance.id",{"_index":1641,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["this.component.instance.setrefreshrate(this.widgetrefreshrate",{"_index":1643,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["this.container.createcomponent(factory",{"_index":1640,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["this.currentartist",{"_index":1397,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.dashboardservice.deleteuser(id).subscribe((users",{"_index":1536,"title":{},"body":{"components/UsersComponent.html":{}}}],["this.dashboardservice.getmicrosoftcalendarevents(this.selectedcalendar.id",{"_index":1101,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.dashboardservice.getmicrosoftcalendars",{"_index":1115,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.dashboardservice.getmicrosoftcalendars().topromise",{"_index":1096,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.dashboardservice.getmicrosoftmailboxes",{"_index":1195,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.dashboardservice.getmicrosoftmailboxes().topromise",{"_index":1180,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.dashboardservice.getmicrosoftmails(this.selectedmailbox.id",{"_index":1200,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.dashboardservice.getmicrosoftmails(this.selectedmailbox.id).topromise",{"_index":1183,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.dashboardservice.getspotifyartist(this.artistquery",{"_index":1403,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.dashboardservice.getspotifyartist(this.artistquery).topromise",{"_index":1398,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.dashboardservice.getsubredditinfos(this.search",{"_index":1285,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["this.dashboardservice.gettwitchstreaminfos(this.search",{"_index":1466,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["this.dashboardservice.gettwitchuserinfos(this.search",{"_index":1504,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["this.dashboardservice.getuserprofile().subscribe(res",{"_index":834,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.dashboardservice.getusers().subscribe(users",{"_index":1530,"title":{},"body":{"components/UsersComponent.html":{}}}],["this.dashboardservice.getweatherinfosbycity(this.search",{"_index":1598,"title":{},"body":{"components/WeatherComponent.html":{}}}],["this.dashboardservice.getwidgetconfig(this.id).subscribe(config",{"_index":1293,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.dashboardservice.getwidgetconfig(this.id).topromise",{"_index":1086,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["this.dashboardservice.getwidgetsconfig().subscribe(widgets",{"_index":642,"title":{},"body":{"components/GridComponent.html":{}}}],["this.dashboardservice.getyoutubechannelinfos(this.search",{"_index":1670,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["this.dashboardservice.getyoutubevideoinfos(this.search",{"_index":1712,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["this.dashboardservice.isgooglelogged().subscribe(isauthenticated",{"_index":1665,"title":{},"body":{"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.dashboardservice.ismicrosoftlogged().topromise",{"_index":1074,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{}}}],["this.dashboardservice.isredditlogged().subscribe(isauthenticated",{"_index":1271,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["this.dashboardservice.isspotifylogged().topromise",{"_index":1390,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.dashboardservice.istwitchlogged().subscribe(isauthenticated",{"_index":1461,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{}}}],["this.dashboardservice.removewidgets(ids).subscribe",{"_index":813,"title":{},"body":{"injectables/GridService.html":{}}}],["this.dashboardservice.savegridconfig(config).subscribe",{"_index":811,"title":{},"body":{"injectables/GridService.html":{}}}],["this.dashboardservice.savequeryconfig({id",{"_index":1082,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.destroy$.complete",{"_index":946,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{}}}],["this.destroy$.next",{"_index":945,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{}}}],["this.dialogservice.open(refreshrateinputdialogcomponent",{"_index":714,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["this.errormessage",{"_index":1532,"title":{},"body":{"components/UsersComponent.html":{}}}],["this.errormsg",{"_index":1090,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["this.eventlist",{"_index":1100,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.eventlist.length",{"_index":1103,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetchartistdata",{"_index":1391,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.fetchartistdatarequest",{"_index":1402,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.fetchartistdatarequest.unsubscribe",{"_index":1401,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.fetchartistdatarequest?.closed",{"_index":1400,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.fetchartistdatarequest?.unsubscribe",{"_index":1392,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.fetchcalendarlist",{"_index":1076,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetchcalendarlistrequest",{"_index":1109,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetchcalendarlistrequest.unsubscribe",{"_index":1112,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetchcalendarlistrequest?.closed",{"_index":1111,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetchcalendarlistrequest?.unsubscribe",{"_index":1080,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetcheventlist",{"_index":1078,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetcheventlistrequest",{"_index":1110,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetcheventlistrequest.unsubscribe",{"_index":1120,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetcheventlistrequest?.closed",{"_index":1119,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetcheventlistrequest?.unsubscribe",{"_index":1081,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.fetchmailboxlist",{"_index":1172,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.fetchmailboxlistrequest",{"_index":1191,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.fetchmailboxlistrequest.unsubscribe",{"_index":1194,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.fetchmailboxlistrequest?.closed",{"_index":1193,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.fetchmailboxlistrequest?.unsubscribe",{"_index":1174,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.fetchmaillist",{"_index":1173,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.fetchmaillistrequest",{"_index":1192,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.fetchmaillistrequest.unsubscribe",{"_index":1199,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.fetchmaillistrequest?.closed",{"_index":1198,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.fetchmaillistrequest?.unsubscribe",{"_index":1175,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.getchannelerrorcb(error",{"_index":1672,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["this.getchannelinfos",{"_index":1669,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["this.getchannelnextcb(channel",{"_index":1671,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["this.getstreamerrorcb(error",{"_index":1468,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["this.getstreaminfos",{"_index":1465,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["this.getstreamnextcb(stream",{"_index":1467,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["this.getsubredditerrorcb(error",{"_index":1287,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["this.getsubredditinfos",{"_index":1284,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["this.getsubredditnextcb(stream",{"_index":1286,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["this.getsubredditnextcb(subreddit",{"_index":1292,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["this.getusererrorcb(error",{"_index":1506,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["this.getuserinfos",{"_index":1503,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["this.getusernextcb(user",{"_index":1505,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["this.getvideoerrorcb(error",{"_index":1714,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["this.getvideoinfos",{"_index":1711,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["this.getvideonextcb(video",{"_index":1713,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["this.getweathererrorcb(error",{"_index":1600,"title":{},"body":{"components/WeatherComponent.html":{}}}],["this.getweatherinfos",{"_index":1597,"title":{},"body":{"components/WeatherComponent.html":{}}}],["this.getweathernextcb(channel",{"_index":1599,"title":{},"body":{"components/WeatherComponent.html":{}}}],["this.getweathernextcb(weather",{"_index":1604,"title":{},"body":{"components/WeatherComponent.html":{}}}],["this.griditems",{"_index":798,"title":{},"body":{"injectables/GridService.html":{}}}],["this.griditems.find(item",{"_index":663,"title":{},"body":{"components/GridComponent.html":{}}}],["this.griditems.indexof(item",{"_index":799,"title":{},"body":{"injectables/GridService.html":{}}}],["this.griditems.map(value",{"_index":805,"title":{},"body":{"injectables/GridService.html":{}}}],["this.griditems.reduce((acc",{"_index":668,"title":{},"body":{"components/GridComponent.html":{}}}],["this.griditems[index].x",{"_index":800,"title":{},"body":{"injectables/GridService.html":{}}}],["this.griditems[index].y",{"_index":802,"title":{},"body":{"injectables/GridService.html":{}}}],["this.gridservice.griditems",{"_index":641,"title":{},"body":{"components/GridComponent.html":{}}}],["this.gridservice.griditems.map(widget",{"_index":673,"title":{},"body":{"components/GridComponent.html":{}}}],["this.gridservice.griditems.push",{"_index":655,"title":{},"body":{"components/GridComponent.html":{}}}],["this.gridservice.griditems.splice(this.griditems.indexof(toremovefromgrid",{"_index":664,"title":{},"body":{"components/GridComponent.html":{}}}],["this.gridservice.options",{"_index":640,"title":{},"body":{"components/GridComponent.html":{}}}],["this.gridservice.removeitems",{"_index":666,"title":{},"body":{"components/GridComponent.html":{}}}],["this.gridservice.removeitems(widgetstoremove",{"_index":674,"title":{},"body":{"components/GridComponent.html":{}}}],["this.gridservice.reset",{"_index":676,"title":{},"body":{"components/GridComponent.html":{}}}],["this.gridservice.saveitems",{"_index":675,"title":{},"body":{"components/GridComponent.html":{}}}],["this.handleautherror(x",{"_index":313,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["this.httpclient.delete('/api/user/widgets",{"_index":488,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.delete('/api/users",{"_index":461,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/auth/office",{"_index":935,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["this.httpclient.get('/api/auth/ping",{"_index":1553,"title":{},"body":{"components/VerifyAuthComponent.html":{}}}],["this.httpclient.get('/api/google/channels",{"_index":464,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/google/logged",{"_index":471,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/google/videos",{"_index":470,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/microsoft/calendars",{"_index":491,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/microsoft/logged",{"_index":493,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/microsoft/mail/folders",{"_index":492,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/reddit/logged",{"_index":481,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/reddit/subreddits",{"_index":480,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/spotify/artists",{"_index":494,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/spotify/logged",{"_index":495,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/twitch/logged",{"_index":474,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/twitch/streams",{"_index":473,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/twitch/users",{"_index":472,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/user/profile",{"_index":456,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/user/widgets",{"_index":490,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/users",{"_index":460,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.get('/api/weather",{"_index":497,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.post('/api/user/widgets/grid",{"_index":482,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.httpclient.post('/api/user/widgets/query",{"_index":489,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.id",{"_index":1083,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.isauthenticated",{"_index":1068,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["this.isgoogleauthed",{"_index":1666,"title":{},"body":{"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.isloading",{"_index":1079,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.islogin",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isredditauthed",{"_index":1272,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["this.istwitchauthed",{"_index":1462,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{}}}],["this.loadconfig",{"_index":1077,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.login",{"_index":1228,"title":{},"body":{"components/OfficeOAuthComponent.html":{}}}],["this.mailboxlist",{"_index":1179,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.mailboxlist.find(box",{"_index":1177,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.mailboxlist.length",{"_index":1181,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.maillist",{"_index":1182,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.maillist.length",{"_index":1184,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.nbauthservice.authenticate('office",{"_index":931,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["this.nbauthservice.isauthenticated().pipe",{"_index":283,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.ondragstop.bind(this",{"_index":782,"title":{},"body":{"injectables/GridService.html":{}}}],["this.onsubmit",{"_index":1294,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.ref.close",{"_index":1324,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["this.ref.close(value",{"_index":1325,"title":{},"body":{"components/RefreshRateInputDialogComponent.html":{}}}],["this.refreshrate",{"_index":716,"title":{},"body":{"components/GridHeaderComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.refreshratechange.emit(this.refreshrate",{"_index":722,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["this.removeclick.emit",{"_index":723,"title":{},"body":{"components/GridHeaderComponent.html":{}}}],["this.repeatfetchartistdata",{"_index":1389,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["this.repeatfetchcalendarlist",{"_index":1069,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.repeatfetcheventlist",{"_index":1071,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.repeatfetchmailboxlist",{"_index":1169,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.repeatfetchmaillist",{"_index":1171,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.request",{"_index":1278,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.request.closed",{"_index":1279,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.request.unsubscribe",{"_index":1280,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.reset",{"_index":1282,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.resolver.resolvecomponentfactory(component",{"_index":1639,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["this.router.navigatebyurl('/auth/login",{"_index":286,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/VerifyAuthComponent.html":{}}}],["this.router.navigatebyurl('/auth/verify",{"_index":969,"title":{},"body":{"components/LoginComponent.html":{},"interfaces/OAuthLogin.html":{},"components/RegisterComponent.html":{}}}],["this.router.navigatebyurl('/home",{"_index":942,"title":{},"body":{"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/VerifyAuthComponent.html":{}}}],["this.router.navigatebyurl(`/auth/login",{"_index":310,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["this.saveconfig",{"_index":1092,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.savegridlayouttolocalstorage",{"_index":661,"title":{},"body":{"components/GridComponent.html":{}}}],["this.saveitems",{"_index":804,"title":{},"body":{"injectables/GridService.html":{}}}],["this.search",{"_index":1276,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.search.trim",{"_index":1269,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.search.trim()}).subscribe",{"_index":1295,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.searchbuffer",{"_index":1283,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.searchbuffer.trim",{"_index":1281,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.selectedcalendar",{"_index":1070,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.selectedcalendar.id",{"_index":1116,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.selectedcalendar?.id",{"_index":1084,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["this.selectedmailbox",{"_index":1170,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.selectedmailbox.id",{"_index":1196,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.selectedmailbox?.id",{"_index":1176,"title":{},"body":{"components/MsMailComponent.html":{}}}],["this.servicelist",{"_index":643,"title":{},"body":{"components/GridComponent.html":{}}}],["this.sidebarservice.toggle",{"_index":839,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.startrequest",{"_index":1270,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["this.stream",{"_index":1464,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["this.subreddit",{"_index":1277,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{}}}],["this.user",{"_index":1502,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["this.userinfo",{"_index":837,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.userinfo.email",{"_index":827,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.usermenu[0].title",{"_index":835,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.users",{"_index":1531,"title":{},"body":{"components/UsersComponent.html":{}}}],["this.video",{"_index":1710,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["this.weather",{"_index":1596,"title":{},"body":{"components/WeatherComponent.html":{}}}],["this.widgetid",{"_index":1642,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["thisurl",{"_index":1845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["throwerror",{"_index":306,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["throwerror(err",{"_index":311,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["thumbnail",{"_index":1430,"title":{"interfaces/Thumbnail.html":{}},"body":{"interfaces/Thumbnail.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"coverage.html":{}}}],["timezone",{"_index":1001,"title":{},"body":{"interfaces/MicrosoftCalendarEvent.html":{}}}],["title",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"components/UsersComponent.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{}}}],["toggle",{"_index":872,"title":{},"body":{"components/HeaderComponent.html":{}}}],["togglesidebar",{"_index":817,"title":{},"body":{"components/HeaderComponent.html":{}}}],["token",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{}}}],["top",{"_index":906,"title":{},"body":{"components/HomeComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["topromise",{"_index":1102,"title":{},"body":{"components/MsCalendarComponent.html":{}}}],["toremovefromgrid",{"_index":662,"title":{},"body":{"components/GridComponent.html":{}}}],["toremovefromgrid.id",{"_index":667,"title":{},"body":{"components/GridComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["true",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DashboardService.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":1072,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["tslib",{"_index":1780,"title":{},"body":{"dependencies.html":{}}}],["ttv",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["ttvstream",{"_index":449,"title":{"interfaces/TtvStream.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"coverage.html":{}}}],["ttvstreamwatcher",{"_index":551,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["ttvstreamwatchercomponent",{"_index":83,"title":{"components/TtvStreamWatcherComponent.html":{}},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ttvuser",{"_index":451,"title":{"interfaces/TtvUser.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"coverage.html":{}}}],["ttvuserwatcher",{"_index":547,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["ttvuserwatchercomponent",{"_index":86,"title":{"components/TtvUserWatcherComponent.html":{}},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["twitch",{"_index":546,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/Authenticated.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"interfaces/Id.html":{},"components/LoginComponent.html":{},"interfaces/MicrosoftCalendar.html":{},"interfaces/MicrosoftCalendarEvent.html":{},"interfaces/MicrosoftMail.html":{},"interfaces/MicrosoftMailbox.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"interfaces/OAuthLogin.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"interfaces/SpotifyArtist.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/Subreddit.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/Thumbnail.html":{},"interfaces/TtvStream.html":{},"components/TtvStreamWatcherComponent.html":{},"interfaces/TtvUser.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{},"interfaces/WidgetProps.html":{},"interfaces/WidgetQueryConfig.html":{},"directives/WidgetRenderDirective.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":1813,"title":{},"body":{"index.html":{}}}],["unread",{"_index":544,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["unreaditemcount",{"_index":1009,"title":{},"body":{"interfaces/MicrosoftMailbox.html":{}}}],["up",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["url",{"_index":411,"title":{},"body":{"injectables/DashboardService.html":{},"components/HeaderComponent.html":{},"interfaces/Thumbnail.html":{}}}],["url(url",{"_index":467,"title":{},"body":{"injectables/DashboardService.html":{}}}],["url.trim",{"_index":465,"title":{},"body":{"injectables/DashboardService.html":{}}}],["urltree",{"_index":272,"title":{},"body":{"guards/AuthGuard.html":{}}}],["use",{"_index":548,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":87,"title":{"interfaces/User.html":{}},"body":{"components/AppComponent.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/User.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.broadcaster_type",{"_index":1511,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["user.created_at",{"_index":1507,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["user.display_name",{"_index":1509,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["user.displayname",{"_index":1537,"title":{},"body":{"components/UsersComponent.html":{}}}],["user.email",{"_index":1538,"title":{},"body":{"components/UsersComponent.html":{}}}],["user.ts",{"_index":1479,"title":{},"body":{"interfaces/TtvUser.html":{},"coverage.html":{}}}],["user.view_count",{"_index":1514,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["user_name",{"_index":1436,"title":{},"body":{"interfaces/TtvStream.html":{}}}],["userinfo",{"_index":815,"title":{},"body":{"components/HeaderComponent.html":{}}}],["usermenu",{"_index":816,"title":{},"body":{"components/HeaderComponent.html":{}}}],["username",{"_index":396,"title":{},"body":{"injectables/DashboardService.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["username.trim",{"_index":462,"title":{},"body":{"injectables/DashboardService.html":{}}}],["users",{"_index":246,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/HomeComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/UsersComponent.html":{}}}],["users'},{'name",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["users.component",{"_index":1545,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.component.html",{"_index":1519,"title":{},"body":{"components/UsersComponent.html":{}}}],["users.component.scss",{"_index":1518,"title":{},"body":{"components/UsersComponent.html":{}}}],["users/users.component",{"_index":239,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["users/users.module",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["userscomponent",{"_index":88,"title":{"components/UsersComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"modules/UsersModule.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":125,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uuid",{"_index":610,"title":{},"body":{"components/GridComponent.html":{},"dependencies.html":{}}}],["uuid.uuid",{"_index":615,"title":{},"body":{"components/GridComponent.html":{}}}],["value",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["value.id",{"_index":806,"title":{},"body":{"injectables/GridService.html":{}}}],["value.refreshrate",{"_index":810,"title":{},"body":{"injectables/GridService.html":{}}}],["value.widgetid",{"_index":807,"title":{},"body":{"injectables/GridService.html":{}}}],["value.x",{"_index":808,"title":{},"body":{"injectables/GridService.html":{}}}],["value.y",{"_index":809,"title":{},"body":{"injectables/GridService.html":{}}}],["var",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["variable",{"_index":1736,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1837,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["verifyauthcomponent",{"_index":90,"title":{"components/VerifyAuthComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"modules/AuthModule.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["version",{"_index":1788,"title":{},"body":{"index.html":{}}}],["via",{"_index":1817,"title":{},"body":{"index.html":{}}}],["video",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["video.channeltitle",{"_index":1716,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["video.statistics.commentcount",{"_index":1723,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["video.statistics.dislikecount",{"_index":1721,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["video.statistics.likecount",{"_index":1719,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["video.statistics.viewcount",{"_index":1717,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["video.title",{"_index":1715,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["video.ts",{"_index":1681,"title":{},"body":{"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"coverage.html":{}}}],["videocount",{"_index":1651,"title":{},"body":{"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{}}}],["videoid",{"_index":468,"title":{},"body":{"injectables/DashboardService.html":{}}}],["videos",{"_index":1678,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["view_count",{"_index":1483,"title":{},"body":{"interfaces/TtvUser.html":{}}}],["viewcontainerref",{"_index":1624,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["viewcount",{"_index":1649,"title":{},"body":{"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{}}}],["viewer",{"_index":556,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["viewer_count",{"_index":1437,"title":{},"body":{"interfaces/TtvStream.html":{}}}],["viewers",{"_index":1473,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["views",{"_index":1513,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["void",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"injectables/GridService.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"interfaces/IResponse.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["w",{"_index":1412,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["watcher",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DashboardServiceProps.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["watcher'},{'name",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component",{"_index":568,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"interfaces/WidgetProps.html":{}}}],["watcher.component.html",{"_index":1233,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.scss",{"_index":1232,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts",{"_index":1231,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["watcher.component.ts:101",{"_index":1493,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:102",{"_index":1449,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:105",{"_index":1700,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:106",{"_index":1247,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:110",{"_index":1659,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:111",{"_index":1490,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["watcher.component.ts:112",{"_index":1446,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:114",{"_index":1697,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:117",{"_index":1663,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:118",{"_index":1244,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{}}}],["watcher.component.ts:119",{"_index":1455,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:121",{"_index":1707,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:125",{"_index":1256,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:127",{"_index":1661,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:128",{"_index":1494,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["watcher.component.ts:129",{"_index":1450,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:131",{"_index":1701,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:135",{"_index":1248,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:137",{"_index":1662,"title":{},"body":{"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:138",{"_index":1499,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["watcher.component.ts:139",{"_index":1454,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:141",{"_index":1705,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:145",{"_index":1254,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:17",{"_index":1500,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:18",{"_index":1456,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:19",{"_index":1458,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:20",{"_index":1501,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:21",{"_index":1457,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:22",{"_index":1258,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:23",{"_index":1261,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:24",{"_index":1459,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:25",{"_index":1260,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:26",{"_index":1259,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:27",{"_index":1264,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:28",{"_index":1263,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:29",{"_index":1265,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:30",{"_index":1262,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:31",{"_index":1257,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:32",{"_index":1706,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:33",{"_index":1255,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:36",{"_index":1487,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:37",{"_index":1443,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:40",{"_index":1694,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:41",{"_index":1241,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:42",{"_index":1452,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:45",{"_index":1702,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:46",{"_index":1250,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:55",{"_index":1495,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:56",{"_index":1451,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:59",{"_index":1496,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:60",{"_index":1249,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:63",{"_index":1498,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:64",{"_index":1251,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{},"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:67",{"_index":1704,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:68",{"_index":1253,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:71",{"_index":1488,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:72",{"_index":1444,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:75",{"_index":1695,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:76",{"_index":1242,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:78",{"_index":1497,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:79",{"_index":1453,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:82",{"_index":1703,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:83",{"_index":1252,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher.component.ts:92",{"_index":1491,"title":{},"body":{"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{}}}],["watcher.component.ts:93",{"_index":1447,"title":{},"body":{"components/TtvStreamWatcherComponent.html":{}}}],["watcher.component.ts:96",{"_index":1698,"title":{},"body":{"components/YtVideoWatcherComponent.html":{}}}],["watcher.component.ts:97",{"_index":1245,"title":{},"body":{"components/RdSubredditWatcherComponent.html":{}}}],["watcher/rd",{"_index":576,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"components/RdSubredditWatcherComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{}}}],["watcher/ttv",{"_index":569,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{}}}],["watcher/yt",{"_index":567,"title":{},"body":{"interfaces/DashboardWidget.html":{},"modules/GridModule.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["weather",{"_index":429,"title":{"interfaces/Weather.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/Weather.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["weather'},{'name",{"_index":94,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["weather.component.html",{"_index":1569,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather.component.scss",{"_index":1568,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather.date",{"_index":1611,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather.feelslike}}°c",{"_index":1609,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather.humidity",{"_index":1610,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather.observationpoint",{"_index":1607,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather.skytext",{"_index":1606,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather.temperature}}°c",{"_index":1605,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather.winddisplay",{"_index":1614,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather/weather.component",{"_index":577,"title":{},"body":{"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{}}}],["weather[0",{"_index":1601,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weather[0].observationtime}`).tolocalestring",{"_index":1603,"title":{},"body":{"components/WeatherComponent.html":{}}}],["weathercomponent",{"_index":93,"title":{"components/WeatherComponent.html":{}},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["weblink",{"_index":1006,"title":{},"body":{"interfaces/MicrosoftMail.html":{}}}],["weight",{"_index":1405,"title":{},"body":{"components/SpotifyArtistComponent.html":{}}}],["went",{"_index":1534,"title":{},"body":{"components/UsersComponent.html":{}}}],["white",{"_index":889,"title":{},"body":{"components/HeaderComponent.html":{}}}],["widget",{"_index":549,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/SpotifyArtistComponent.html":{},"miscellaneous/variables.html":{}}}],["widget.id",{"_index":649,"title":{},"body":{"components/GridComponent.html":{}}}],["widget.name",{"_index":680,"title":{},"body":{"components/GridComponent.html":{}}}],["widget.refreshrate",{"_index":652,"title":{},"body":{"components/GridComponent.html":{}}}],["widget.type",{"_index":647,"title":{},"body":{"components/GridComponent.html":{}}}],["widget.x",{"_index":650,"title":{},"body":{"components/GridComponent.html":{}}}],["widget.y",{"_index":651,"title":{},"body":{"components/GridComponent.html":{}}}],["widgetcomponents",{"_index":578,"title":{},"body":{"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"directives/WidgetRenderDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgetcomponents[this.componentref",{"_index":1636,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["widgetconfig",{"_index":443,"title":{"interfaces/WidgetConfig.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/WidgetConfig.html":{},"coverage.html":{}}}],["widgetgridconfig",{"_index":421,"title":{"interfaces/WidgetGridConfig.html":{}},"body":{"injectables/DashboardService.html":{},"injectables/GridService.html":{},"interfaces/WidgetGridConfig.html":{},"coverage.html":{}}}],["widgetid",{"_index":658,"title":{},"body":{"components/GridComponent.html":{},"directives/WidgetRenderDirective.html":{}}}],["widgetprops",{"_index":508,"title":{"interfaces/WidgetProps.html":{}},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"components/GridComponent.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{}}}],["widgetprops.cols",{"_index":656,"title":{},"body":{"components/GridComponent.html":{}}}],["widgetprops.id",{"_index":659,"title":{},"body":{"components/GridComponent.html":{}}}],["widgetprops.name",{"_index":660,"title":{},"body":{"components/GridComponent.html":{}}}],["widgetprops.rows",{"_index":657,"title":{},"body":{"components/GridComponent.html":{}}}],["widgetqueryconfig",{"_index":425,"title":{"interfaces/WidgetQueryConfig.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/WidgetQueryConfig.html":{},"coverage.html":{}}}],["widgetrefreshrate",{"_index":1622,"title":{},"body":{"directives/WidgetRenderDirective.html":{}}}],["widgetrenderdirective",{"_index":103,"title":{"directives/WidgetRenderDirective.html":{}},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{}}}],["widgets",{"_index":506,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/WeatherComponent.html":{},"directives/WidgetRenderDirective.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"miscellaneous/variables.html":{}}}],["widgets.ts",{"_index":562,"title":{},"body":{"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["widgets.ts:22",{"_index":566,"title":{},"body":{"interfaces/DashboardWidget.html":{}}}],["widgets/dashboard",{"_index":519,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"components/GridComponent.html":{},"directives/WidgetRenderDirective.html":{}}}],["widgets/ms",{"_index":748,"title":{},"body":{"modules/GridModule.html":{}}}],["widgets/rd",{"_index":756,"title":{},"body":{"modules/GridModule.html":{}}}],["widgets/spotify",{"_index":755,"title":{},"body":{"modules/GridModule.html":{}}}],["widgets/ttv",{"_index":749,"title":{},"body":{"modules/GridModule.html":{}}}],["widgets/weather/weather.component",{"_index":757,"title":{},"body":{"modules/GridModule.html":{}}}],["widgets/yt",{"_index":750,"title":{},"body":{"modules/GridModule.html":{}}}],["widgetstoremove",{"_index":672,"title":{},"body":{"components/GridComponent.html":{}}}],["width",{"_index":852,"title":{},"body":{"components/HeaderComponent.html":{},"components/SpotifyArtistComponent.html":{}}}],["wind",{"_index":1612,"title":{},"body":{"components/WeatherComponent.html":{}}}],["winddisplay",{"_index":1566,"title":{},"body":{"interfaces/Weather.html":{}}}],["window.location.href",{"_index":1093,"title":{},"body":{"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/SpotifyArtistComponent.html":{},"interfaces/SubredditCreationFormatted.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["withcredentials",{"_index":459,"title":{},"body":{"injectables/DashboardService.html":{},"interfaces/IResponse.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/VerifyAuthComponent.html":{}}}],["wrong",{"_index":1535,"title":{},"body":{"components/UsersComponent.html":{}}}],["x",{"_index":611,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{}}}],["y",{"_index":612,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"interfaces/WidgetConfig.html":{},"interfaces/WidgetGridConfig.html":{}}}],["yes",{"_index":1512,"title":{},"body":{"components/TtvUserWatcherComponent.html":{}}}],["youtube",{"_index":524,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"miscellaneous/variables.html":{}}}],["yt",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{}}}],["ytchannel",{"_index":452,"title":{"interfaces/YtChannel.html":{}},"body":{"injectables/DashboardService.html":{},"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"components/YtChannelWatcherComponent.html":{},"coverage.html":{}}}],["ytchannelswagstats",{"_index":1648,"title":{"interfaces/YtChannelSwagStats.html":{}},"body":{"interfaces/YtChannel.html":{},"interfaces/YtChannelSwagStats.html":{},"coverage.html":{}}}],["ytchannelwatcher",{"_index":523,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["ytchannelwatchercomponent",{"_index":95,"title":{"components/YtChannelWatcherComponent.html":{}},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ytvideo",{"_index":1680,"title":{"interfaces/YtVideo.html":{}},"body":{"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{}}}],["ytvideoswagstats",{"_index":1683,"title":{"interfaces/YtVideoSwagStats.html":{}},"body":{"interfaces/YtVideo.html":{},"interfaces/YtVideoSwagStats.html":{},"coverage.html":{}}}],["ytvideowatcher",{"_index":533,"title":{},"body":{"interfaces/DashboardServiceProps.html":{},"interfaces/DashboardWidget.html":{},"interfaces/WidgetProps.html":{},"miscellaneous/variables.html":{}}}],["ytvideowatchercomponent",{"_index":99,"title":{"components/YtVideoWatcherComponent.html":{}},"body":{"components/AppComponent.html":{},"interfaces/DashboardWidget.html":{},"components/FooterComponent.html":{},"components/GridComponent.html":{},"components/GridHeaderComponent.html":{},"modules/GridModule.html":{},"components/HeaderComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/MsCalendarComponent.html":{},"components/MsMailComponent.html":{},"components/NotFoundComponent.html":{},"components/OfficeOAuthCallbackComponent.html":{},"components/OfficeOAuthComponent.html":{},"components/RdSubredditWatcherComponent.html":{},"components/RefreshRateInputDialogComponent.html":{},"components/RegisterComponent.html":{},"components/SpotifyArtistComponent.html":{},"components/TtvStreamWatcherComponent.html":{},"components/TtvUserWatcherComponent.html":{},"components/UsersComponent.html":{},"components/VerifyAuthComponent.html":{},"components/WeatherComponent.html":{},"interfaces/WidgetProps.html":{},"components/YtChannelWatcherComponent.html":{},"components/YtVideoWatcherComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["zone.js",{"_index":1782,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GridModule.html":{},"modules/HomeModule.html":{},"modules/NotFoundModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The App component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'client'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * The App component\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: [ './app.component.scss' ]\n})\nexport class AppComponent {\n    title = 'client';\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nAppModule -->\n\nHomeModule->AppModule\n\n\n\n\n\nNotFoundModule\n\nNotFoundModule\n\nAppModule -->\n\nNotFoundModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            The App module.\nImports and configures everything required by the app.\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            HomeModule\n                        \n                        \n                            NotFoundModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NbMenuModule, NbSidebarModule, NbThemeModule } from '@nebular/theme';\nimport { NbEvaIconsModule } from '@nebular/eva-icons';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport {\n    NbAuthJWTToken,\n    NbAuthModule,\n    NbOAuth2AuthStrategy,\n    NbOAuth2ResponseType,\n    NbPasswordAuthStrategy\n} from '@nebular/auth';\nimport { AuthGuard } from './shared/guards/auth.guard';\nimport { AuthModule } from './auth/auth.module';\nimport { environment } from '../environments/environment';\nimport { Router } from '@angular/router';\nimport { AuthInterceptor } from './shared/interceptors/auth.interceptor';\nimport { HomeModule } from './home/home.module';\nimport { NotFoundModule } from './not-found/not-found.module';\nimport { UsersModule } from './users/users.module';\n\n/**\n * The App module.\n *\n * Imports and configures everything required by the app.\n */\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        NbThemeModule.forRoot({name: 'corporate'}),\n        NbSidebarModule.forRoot(),\n        NbMenuModule.forRoot(),\n        NbEvaIconsModule,\n        NbAuthModule.forRoot({\n            strategies: [\n                NbPasswordAuthStrategy.setup({\n                    name: 'email',\n                    token: {\n                        class: NbAuthJWTToken,\n                        key: 'token'\n                    },\n                    baseEndpoint: '/api',\n                    login: {\n                        endpoint: '/auth/sign-in',\n                        redirect: {\n                            success: '/home',\n                            failure: null\n                        }\n                    },\n                    register: {\n                        endpoint: '/auth/sign-up',\n                        redirect: {\n                            success: '/home',\n                            failure: null\n                        }\n                    },\n                    logout: {\n                        endpoint: '/auth/sign-out'\n                    }\n                }),\n                NbOAuth2AuthStrategy.setup({\n                    name: 'office',\n                    clientId: 'ca676b28-21b8-44fd-8073-d81c78fc66d3',\n                    authorize: {\n                        endpoint: 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',\n                        responseType: NbOAuth2ResponseType.TOKEN,\n                        scope: 'api://ca676b28-21b8-44fd-8073-d81c78fc66d3/user.read.basics',\n                        redirectUri: environment.thisUrl + '/auth/callback'\n                    }\n                })\n            ],\n            forms: {\n                register: {\n                    terms: false\n                }\n            }\n        }),\n        HomeModule,\n        AuthModule,\n        NotFoundModule,\n        UsersModule\n    ],\n    providers: [\n        AuthGuard,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useFactory: (router: Router) => {\n                return new AuthInterceptor(router);\n            },\n            multi: true,\n            deps: [ Router ]\n        }\n    ],\n    bootstrap: [ AppComponent ]\n})\n\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { NbAuthComponent, NbLogoutComponent } from '@nebular/auth';\nimport { AuthGuard } from './shared/guards/auth.guard';\nimport { LoginComponent } from './auth/login/login.component';\nimport { OfficeOAuthComponent } from './auth/office-oauth/office-oauth.component';\nimport { OfficeOAuthCallbackComponent } from './auth/office-oauth-callback/office-oauth-callback.component';\nimport { VerifyAuthComponent } from './auth/verify-auth/verify-auth.component';\nimport { RegisterComponent } from './auth/register/register.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { UsersComponent } from './users/users.component';\n\nconst routes: Routes = [\n    {\n        path: 'home',\n        component: HomeComponent,\n        canActivate: [ AuthGuard ]\n    },\n    {\n        path: '',\n        redirectTo: 'home',\n        pathMatch: 'full',\n        canActivate: [ AuthGuard ]\n    },\n    {\n        path: 'users',\n        component: UsersComponent,\n        canActivate: [ AuthGuard ]\n    },\n    {\n        path: 'auth',\n        component: NbAuthComponent,\n        children: [\n            {\n                path: '',\n                component: LoginComponent\n            },\n            {\n                path: 'login',\n                component: LoginComponent\n            },\n            {\n                path: 'login-office',\n                component: OfficeOAuthComponent\n            },\n            {\n                path: 'register',\n                component: RegisterComponent\n            },\n            {\n                path: 'logout',\n                component: NbLogoutComponent\n            },\n            {\n                path: 'callback',\n                component: OfficeOAuthCallbackComponent\n            },\n            {\n                path: 'verify',\n                component: VerifyAuthComponent\n            }\n        ]\n    },\n    {\n        path: '**',\n        component: NotFoundComponent\n    }\n];\n\n@NgModule({\n    imports: [ RouterModule.forRoot(routes) ],\n    exports: [ RouterModule ]\n})\nexport class AppRoutingModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/shared/guards/auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(nbAuthService: NbAuthService, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/guards/auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nbAuthService\n                                                  \n                                                        \n                                                                        NbAuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/guards/auth.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | Promise | boolean | UrlTree\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { NbAuthService } from '@nebular/auth';\nimport { AuthService } from '../services/auth.service';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n    constructor(private nbAuthService: NbAuthService, private router: Router, private authService: AuthService) {\n    }\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable | Promise | boolean | UrlTree {\n        if (this.authService.isLoggedIn()) {\n            return true;\n        }\n        return this.nbAuthService.isAuthenticated().pipe(\n            tap(authenticated => {\n                if (!authenticated) {\n                    this.router.navigateByUrl('/auth/login');\n                }\n            })\n        );\n    }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/AuthInterceptor.html":{"url":"interceptors/AuthInterceptor.html","title":"interceptor - AuthInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  AuthInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interceptors/auth.interceptor.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleAuthError\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/interceptors/auth.interceptor.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleAuthError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleAuthError(err: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/interceptors/auth.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/interceptors/auth.interceptor.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {Router} from '@angular/router';\nimport {catchError} from 'rxjs/operators';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n    constructor(private router: Router) {\n    }\n\n    private handleAuthError(err: HttpErrorResponse): Observable {\n        if (err.status === 401) {\n            this.router.navigateByUrl(`/auth/login`);\n        }\n        return throwError(err);\n    }\n\n    intercept(request: HttpRequest, next: HttpHandler): Observable> {\n        return next.handle(request).pipe(catchError(x => this.handleAuthError(x)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_declarations\n\n\n\n\nLoginComponent\n\nLoginComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nLoginComponent->AuthModule\n\n\n\n\n\nOfficeOAuthCallbackComponent\n\nOfficeOAuthCallbackComponent\n\nAuthModule -->\n\nOfficeOAuthCallbackComponent->AuthModule\n\n\n\n\n\nOfficeOAuthComponent\n\nOfficeOAuthComponent\n\nAuthModule -->\n\nOfficeOAuthComponent->AuthModule\n\n\n\n\n\nRegisterComponent\n\nRegisterComponent\n\nAuthModule -->\n\nRegisterComponent->AuthModule\n\n\n\n\n\nVerifyAuthComponent\n\nVerifyAuthComponent\n\nAuthModule -->\n\nVerifyAuthComponent->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/auth/auth.module.ts\n        \n\n\n        \n            Description\n        \n        \n            The Auth module\nDeclares all Auth components and imports all necessary modules.\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            LoginComponent\n                        \n                        \n                            OfficeOAuthCallbackComponent\n                        \n                        \n                            OfficeOAuthComponent\n                        \n                        \n                            RegisterComponent\n                        \n                        \n                            VerifyAuthComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n    NbAlertModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    NbIconModule,\n    NbInputModule,\n    NbLayoutModule,\n    NbSpinnerModule,\n    NbThemeModule\n} from '@nebular/theme';\nimport { NbAuthModule } from '@nebular/auth';\nimport { LoginComponent } from './login/login.component';\nimport { OfficeOAuthComponent } from './office-oauth/office-oauth.component';\nimport { OfficeOAuthCallbackComponent } from './office-oauth-callback/office-oauth-callback.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { VerifyAuthComponent } from './verify-auth/verify-auth.component';\nimport { RegisterComponent } from './register/register.component';\n\n/**\n * The Auth module\n *\n * Declares all Auth components and imports all necessary modules.\n */\n@NgModule({\n    declarations: [\n        LoginComponent,\n        OfficeOAuthComponent,\n        OfficeOAuthCallbackComponent,\n        VerifyAuthComponent,\n        RegisterComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule,\n        NbAlertModule,\n        NbInputModule,\n        NbButtonModule,\n        NbCheckboxModule,\n        NbLayoutModule,\n        NbIconModule,\n        NbThemeModule,\n        NbAuthModule,\n        NbSpinnerModule,\n        FontAwesomeModule\n    ]\n})\nexport class AuthModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isLogin\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLoggedIn\n                            \n                            \n                                setIsLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isLoggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nisLoggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/auth.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setIsLogin\n                        \n                        \n                    \n                \n            \n            \n                \nsetIsLogin(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLogin\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/services/auth.service.ts:7\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    isLogin = true;\n\n    isLoggedIn(): boolean {\n        return this.isLogin;\n    }\n\n    setIsLogin(value: boolean): void {\n        this.isLogin = value;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Authenticated.html":{"url":"interfaces/Authenticated.html","title":"interface - Authenticated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Authenticated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/authenticated.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        authenticated\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authenticated\n                                    \n                                \n                                \n                                    \n                                        authenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Authenticated {\n    authenticated: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardService.html":{"url":"injectables/DashboardService.html","title":"injectable - DashboardService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DashboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/dashboard.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteUser\n                            \n                            \n                                getMicrosoftCalendarEvents\n                            \n                            \n                                getMicrosoftCalendars\n                            \n                            \n                                getMicrosoftMailboxes\n                            \n                            \n                                getMicrosoftMails\n                            \n                            \n                                getSpotifyArtist\n                            \n                            \n                                getSubredditInfos\n                            \n                            \n                                getTwitchStreamInfos\n                            \n                            \n                                getTwitchUserInfos\n                            \n                            \n                                getUserProfile\n                            \n                            \n                                getUsers\n                            \n                            \n                                getWeatherInfosByCity\n                            \n                            \n                                getWidgetConfig\n                            \n                            \n                                getWidgetsConfig\n                            \n                            \n                                getYoutubeChannelInfos\n                            \n                            \n                                getYoutubeVideoInfos\n                            \n                            \n                                isGoogleLogged\n                            \n                            \n                                isMicrosoftLogged\n                            \n                            \n                                isRedditLogged\n                            \n                            \n                                isSpotifyLogged\n                            \n                            \n                                isTwitchLogged\n                            \n                            \n                                removeWidgets\n                            \n                            \n                                saveGridConfig\n                            \n                            \n                                saveQueryConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/dashboard.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteUser(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMicrosoftCalendarEvents\n                        \n                        \n                    \n                \n            \n            \n                \ngetMicrosoftCalendarEvents(calendarId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    calendarId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMicrosoftCalendars\n                        \n                        \n                    \n                \n            \n            \n                \ngetMicrosoftCalendars()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMicrosoftMailboxes\n                        \n                        \n                    \n                \n            \n            \n                \ngetMicrosoftMailboxes()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMicrosoftMails\n                        \n                        \n                    \n                \n            \n            \n                \ngetMicrosoftMails(mailboxId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:184\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mailboxId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSpotifyArtist\n                        \n                        \n                    \n                \n            \n            \n                \ngetSpotifyArtist(artistId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artistId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSubredditInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetSubredditInfos(subreddit: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subreddit\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTwitchStreamInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetTwitchStreamInfos(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTwitchUserInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetTwitchUserInfos(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserProfile()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWeatherInfosByCity\n                        \n                        \n                    \n                \n            \n            \n                \ngetWeatherInfosByCity(city)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWidgetConfig\n                        \n                        \n                    \n                \n            \n            \n                \ngetWidgetConfig(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWidgetsConfig\n                        \n                        \n                    \n                \n            \n            \n                \ngetWidgetsConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getYoutubeChannelInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetYoutubeChannelInfos(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getYoutubeVideoInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetYoutubeVideoInfos(url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isGoogleLogged\n                        \n                        \n                    \n                \n            \n            \n                \nisGoogleLogged()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isMicrosoftLogged\n                        \n                        \n                    \n                \n            \n            \n                \nisMicrosoftLogged()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isRedditLogged\n                        \n                        \n                    \n                \n            \n            \n                \nisRedditLogged()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isSpotifyLogged\n                        \n                        \n                    \n                \n            \n            \n                \nisSpotifyLogged()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isTwitchLogged\n                        \n                        \n                    \n                \n            \n            \n                \nisTwitchLogged()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeWidgets\n                        \n                        \n                    \n                \n            \n            \n                \nremoveWidgets(ids: Id[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                                Id[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveGridConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveGridConfig(configs: WidgetGridConfig[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n                                    \n                                                WidgetGridConfig[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveQueryConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveQueryConfig(configs: WidgetQueryConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/dashboard.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n                                    \n                                                WidgetQueryConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { Weather } from '../interfaces/weather';\nimport { Authenticated } from '../interfaces/authenticated';\nimport { SpotifyArtist } from '../interfaces/spotify-artist';\nimport { MicrosoftMail } from '../interfaces/microsoft-mail';\nimport { MicrosoftMailbox } from '../interfaces/microsoft-mailbox';\nimport { MicrosoftCalendarEvent } from '../interfaces/microsoft-calendar-event';\nimport { MicrosoftCalendar } from '../interfaces/microsoft-calendar';\nimport { WidgetConfig } from '../interfaces/widget-config';\nimport { WidgetQueryConfig } from '../interfaces/widget-query-config';\nimport { Id } from '../interfaces/id';\nimport { WidgetGridConfig } from '../interfaces/widget-grid-config';\nimport { Subreddit } from '../interfaces/subreddit';\nimport { TtvStream } from '../interfaces/ttv-stream';\nimport { TtvUser } from '../interfaces/ttv-user';\nimport { YtChannel } from '../interfaces/yt-channel';\nimport { User } from '../interfaces/user';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DashboardService {\n\n    constructor(private httpClient: HttpClient) {\n    }\n\n    getUserProfile(): Observable> {\n        return this.httpClient.get('/api/user/profile', {\n            observe: 'response',\n            withCredentials: true\n        });\n    }\n\n    getUsers(): Observable {\n        return this.httpClient.get('/api/users', {\n            withCredentials: true\n        });\n    }\n\n    deleteUser(id: string): Observable {\n        return this.httpClient.delete('/api/users/' + id, {\n            withCredentials: true\n        });\n    }\n\n    getYoutubeChannelInfos(username: string): Observable {\n        username = username.trim();\n        if (!username) {\n            return of(null);\n        }\n\n        return this.httpClient.get('/api/google/channels/' + username, {\n            withCredentials: true\n        });\n    }\n\n    getYoutubeVideoInfos(url: string): Observable {\n        url = url.trim();\n        if (!url) {\n            return of(null);\n        }\n        const parsedUrl = new URL(url);\n        if (!parsedUrl) {\n            return of(null);\n        }\n        const videoId = parsedUrl.searchParams.get('v');\n        if (!videoId) {\n            return of(null);\n        }\n        return this.httpClient.get('/api/google/videos/' + videoId, {\n            withCredentials: true\n        });\n    }\n\n    isGoogleLogged(): Observable {\n        return this.httpClient.get('/api/google/logged', {\n            withCredentials: true\n        });\n    }\n\n    getTwitchUserInfos(username: string): Observable {\n        username = username.trim();\n        if (!username) {\n            return of(null);\n        }\n\n        return this.httpClient.get('/api/twitch/users/' + username, {\n            withCredentials: true\n        });\n    }\n\n    getTwitchStreamInfos(username: string): Observable {\n        username = username.trim();\n        if (!username) {\n            return of(null);\n        }\n\n        return this.httpClient.get('/api/twitch/streams/' + username, {\n            withCredentials: true\n        });\n    }\n\n    isTwitchLogged(): Observable {\n        return this.httpClient.get('/api/twitch/logged', {\n            withCredentials: true\n        });\n    }\n\n    getSubredditInfos(subreddit: string): Observable {\n        subreddit = subreddit.trim();\n        if (!subreddit) {\n            return of(null);\n        }\n        if (subreddit.substr(0, 2) === '/r') {\n            subreddit = subreddit.substring(2);\n        }\n\n        return this.httpClient.get('/api/reddit/subreddits/' + subreddit, {\n            withCredentials: true\n        });\n    }\n\n    isRedditLogged(): Observable {\n        return this.httpClient.get('/api/reddit/logged', {\n            withCredentials: true\n        });\n    }\n\n    saveGridConfig(configs: WidgetGridConfig[]): Observable {\n        return this.httpClient.post('/api/user/widgets/grid', configs, {\n            withCredentials: true\n        });\n    }\n\n    removeWidgets(ids: Id[]): Observable {\n        const options = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json'\n            }),\n            body: ids\n        };\n\n        return this.httpClient.delete('/api/user/widgets', options);\n    }\n\n    saveQueryConfig(configs: WidgetQueryConfig): Observable {\n        return this.httpClient.post('/api/user/widgets/query', [ configs ], {\n            withCredentials: true\n        });\n    }\n\n    getWidgetsConfig(): Observable {\n        return this.httpClient.get('/api/user/widgets', {\n            withCredentials: true\n        });\n    }\n\n    getWidgetConfig(id: string): Observable {\n        return this.httpClient.get('/api/user/widgets/' + id, {\n            withCredentials: true\n        });\n    }\n\n    getMicrosoftCalendars(): Observable {\n        return this.httpClient.get('/api/microsoft/calendars', {\n            withCredentials: true\n        });\n    }\n\n    getMicrosoftCalendarEvents(calendarId: string): Observable {\n        return this.httpClient.get('/api/microsoft/calendars/' + calendarId, {\n            withCredentials: true\n        });\n    }\n\n    getMicrosoftMailboxes(): Observable {\n        return this.httpClient.get('/api/microsoft/mail/folders', {\n            withCredentials: true\n        });\n    }\n\n    getMicrosoftMails(mailboxId: string): Observable {\n        return this.httpClient.get('/api/microsoft/mail/folders/' + mailboxId, {\n            withCredentials: true\n        });\n    }\n\n    isMicrosoftLogged(): Observable {\n        return this.httpClient.get('/api/microsoft/logged', {\n            withCredentials: true\n        });\n    }\n\n    getSpotifyArtist(artistId: string): Observable {\n        return this.httpClient.get('/api/spotify/artists/' + artistId, {\n            withCredentials: true\n        });\n    }\n\n    isSpotifyLogged(): Observable {\n        return this.httpClient.get('/api/spotify/logged', {\n            withCredentials: true\n        });\n    }\n\n    getWeatherInfosByCity(city): Observable {\n        city = city.trim();\n        if (!city) {\n            return of(null);\n        }\n        return this.httpClient.get('/api/weather', {\n            withCredentials: true,\n            params: {\n                q: city,\n                degree: 'C'\n            }\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DashboardServiceProps.html":{"url":"interfaces/DashboardServiceProps.html","title":"interface - DashboardServiceProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DashboardServiceProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/home/grid/shared/dashboard-services.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        icon\n                                \n                                \n                                        name\n                                \n                                \n                                        widgets\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:     IconDefinition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IconDefinition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        widgets\n                                    \n                                \n                                \n                                    \n                                        widgets:         WidgetProps[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WidgetProps[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { faSun, IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { faGoogle, faMicrosoft, faReddit, faSpotify, faTwitch } from '@fortawesome/free-brands-svg-icons';\nimport { WidgetProps } from '../widgets/dashboard-widgets';\n\nexport interface DashboardServiceProps {\n    icon: IconDefinition;\n    name: string;\n    widgets: WidgetProps[];\n}\n\nexport const dashboardServices: DashboardServiceProps[] = [\n    {\n        icon: faGoogle,\n        name: 'Google service',\n        widgets: [\n            {\n                id: 'ytChannelWatcher',\n                name: 'Youtube channel watcher',\n                desc: 'Displays stats of a given Youtube channel.',\n                cols: 4,\n                rows: 3\n            },\n            {\n                id: 'ytVideoWatcher',\n                name: 'Youtube video watcher',\n                desc: 'Displays stats of a given Youtube video.',\n                cols: 5,\n                rows: 4\n            }\n        ]\n    },\n    {\n        icon: faMicrosoft,\n        name: 'Microsoft service',\n        widgets: [\n            {\n                id: 'msCalendar',\n                name: 'Microsoft calendar resume',\n                desc: 'Shows your calendar events',\n                cols: 3,\n                rows: 5\n            },\n            {\n                id: 'msMail',\n                name: 'Microsoft mail center',\n                desc: 'Easily catch up with your unread emails!',\n                cols: 4,\n                rows: 5\n            }\n        ]\n    },\n    {\n        icon: faTwitch,\n        name: 'Twitch service',\n        widgets: [\n            {\n                id: 'ttvUserWatcher',\n                name: 'Twitch user watcher',\n                desc: 'Use this widget to display stats of a given Twitch user.',\n                cols: 4,\n                rows: 3\n            },\n            {\n                id: 'ttvStreamWatcher',\n                name: 'Twitch stream watcher',\n                desc: 'Use this widget to display stats of a given Twitch online streamer.',\n                cols: 4,\n                rows: 3\n            }\n        ]\n    },\n    {\n        icon: faReddit,\n        name: 'Reddit service',\n        widgets: [\n            {\n                id: 'rdSubredditWatcher',\n                name: 'Reddit subreddit watcher',\n                desc: 'Use this widget to display stats of a given Reddit subreddit',\n                cols: 4,\n                rows: 3\n            }\n        ]\n    },\n    {\n        icon: faSun,\n        name: 'Weather service',\n        widgets: [\n            {\n                id: 'weather',\n                name: 'Weather viewer',\n                desc: 'Use this widget to display a city current weather',\n                cols: 3,\n                rows: 4\n            }\n        ]\n    },\n    {\n        icon: faSpotify,\n        name: 'Spotify service',\n        widgets: [\n            {\n                id: 'spotifyArtist',\n                name: 'Spotify artist statistics',\n                desc: 'Monitor stats of a given spotify artist.',\n                cols: 4,\n                rows: 2\n            }\n        ]\n    }\n];\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DashboardWidget.html":{"url":"interfaces/DashboardWidget.html","title":"interface - DashboardWidget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DashboardWidget\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/home/grid/widgets/dashboard-widgets.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    setRefreshRate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/dashboard-widgets.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { YtChannelWatcherComponent } from './yt-channel-watcher/yt-channel-watcher.component';\nimport { YtVideoWatcherComponent } from './yt-video-watcher/yt-video-watcher.component';\nimport { TtvUserWatcherComponent } from './ttv-user-watcher/ttv-user-watcher.component';\nimport { TtvStreamWatcherComponent } from './ttv-stream-watcher/ttv-stream-watcher.component';\nimport { MsCalendarComponent } from './ms-calendar/ms-calendar.component';\nimport { MsMailComponent } from './ms-mail-component/ms-mail.component';\nimport { SpotifyArtistComponent } from './spotify-artist/spotify-artist.component';\nimport { RdSubredditWatcherComponent } from './rd-subreddit-watcher/rd-subreddit-watcher.component';\nimport { WeatherComponent } from './weather/weather.component';\n\nexport interface WidgetProps {\n    id: string;\n    name: string;\n    desc: string;\n    cols: number;\n    rows: number;\n}\n\nexport interface DashboardWidget {\n    id: string;\n\n    setRefreshRate(rate: number): void;\n}\n\nexport const widgetComponents = {\n    msCalendar: MsCalendarComponent,\n    msMail: MsMailComponent,\n    rdSubredditWatcher: RdSubredditWatcherComponent,\n    spotifyArtist: SpotifyArtistComponent,\n    ttvStreamWatcher: TtvStreamWatcherComponent,\n    ttvUserWatcher: TtvUserWatcherComponent,\n    weather: WeatherComponent,\n    ytChannelWatcher: YtChannelWatcherComponent,\n    ytVideoWatcher: YtVideoWatcherComponent\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/footer/footer.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n            \n                styleUrls\n                ./footer.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/home/footer/footer.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/footer/footer.component.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import {Component, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'app-footer',\n    templateUrl: './footer.component.html',\n    styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n\n    \n\n    \n        Made with\n    \n    by Kylian BALAN & Nathan LECORCHET\n\n\n    \n\n    \n                \n                    ./footer.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Made with        by Kylian BALAN & Nathan LECORCHET'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GridComponent.html":{"url":"components/GridComponent.html","title":"component - GridComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GridComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/grid.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-grid\n            \n\n            \n                styleUrls\n                ./grid.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./grid.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addItem\n                            \n                            \n                                countSelectedWidget\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                removeAllWidgets\n                            \n                            \n                                removeItem\n                            \n                            \n                                saveGridLayoutToLocalStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    gridItems\n                                \n                                \n                                    serviceList\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(gridService: GridService, dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/grid.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gridService\n                                                  \n                                                        \n                                                                        GridService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addItem\n                        \n                        \n                    \n                \n            \n            \n                \naddItem(widgetProps: WidgetProps, shouldSave: boolean, uuid, x: number, y: number, refreshRate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.component.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    widgetProps\n                                    \n                                                WidgetProps\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    shouldSave\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    uuid\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        UUID.UUID()\n                                    \n\n                                \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    refreshRate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            countSelectedWidget\n                        \n                        \n                    \n                \n            \n            \n                \ncountSelectedWidget(widgetProps: WidgetProps)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.component.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    widgetProps\n                                    \n                                                WidgetProps\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeAllWidgets\n                        \n                        \n                    \n                \n            \n            \n                \nremoveAllWidgets()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.component.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeItem\n                        \n                        \n                    \n                \n            \n            \n                \nremoveItem(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.component.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveGridLayoutToLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \nsaveGridLayoutToLocalStorage()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.component.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/app/home/grid/grid.component.ts:17\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        gridItems\n                    \n                \n\n                \n                    \n                        getgridItems()\n                    \n                \n                            \n                                \n                                    Defined in src/app/home/grid/grid.component.ts:21\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        serviceList\n                    \n                \n\n                \n                    \n                        getserviceList()\n                    \n                \n                            \n                                \n                                    Defined in src/app/home/grid/grid.component.ts:25\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { UUID } from 'angular2-uuid';\nimport { GridsterConfig, GridsterItem } from 'angular-gridster2';\nimport { GridService } from './grid.service';\nimport { WidgetProps } from './widgets/dashboard-widgets';\nimport { DashboardServiceProps, dashboardServices } from './shared/dashboard-services';\nimport { DashboardService } from '../../shared/services/dashboard.service';\n\n@Component({\n    selector: 'app-grid',\n    templateUrl: './grid.component.html',\n    styleUrls: [ './grid.component.scss' ]\n})\nexport class GridComponent implements OnInit,\n                                      OnDestroy {\n\n    get options(): GridsterConfig {\n        return this.gridService.options;\n    }\n\n    get gridItems(): GridsterItem[] {\n        return this.gridService.gridItems;\n    }\n\n    get serviceList(): DashboardServiceProps[] {\n        return dashboardServices;\n    }\n\n    constructor(private gridService: GridService, private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.dashboardService.getWidgetsConfig().subscribe(widgets => {\n            for (const widget of widgets) {\n                for (const service of this.serviceList) {\n                    const foundWidget = service.widgets.find(item => item.id === widget.type);\n\n                    if (foundWidget) {\n                        this.addItem(foundWidget, false, widget.id, widget.x, widget.y, widget.refreshRate);\n                    }\n                }\n            }\n        }, error => {\n            console.error(error);\n        });\n    }\n\n    addItem(widgetProps: WidgetProps, shouldSave: boolean, uuid = UUID.UUID(), x = 0, y = 0, refreshRate: number = 5): void {\n        this.gridService.gridItems.push({\n            id: uuid,\n            cols: widgetProps.cols,\n            rows: widgetProps.rows,\n            x,\n            y,\n            widgetId: widgetProps.id,\n            name: widgetProps.name,\n            refreshRate\n        });\n        if (shouldSave) {\n            this.saveGridLayoutToLocalStorage();\n        }\n    }\n\n    removeItem(id: string): void {\n        const toRemoveFromGrid = this.gridItems.find(item => item.id === id);\n\n        if (toRemoveFromGrid) {\n            this.gridService.gridItems.splice(this.gridItems.indexOf(toRemoveFromGrid), 1);\n            this.gridService.removeItems([\n                {\n                    id: toRemoveFromGrid.id\n                }\n            ]);\n        }\n    }\n\n    countSelectedWidget(widgetProps: WidgetProps): number {\n        return this.gridItems.reduce((acc, curr) => {\n            if (curr.widgetId === widgetProps.id) {\n                return acc + 1;\n            }\n            return acc;\n        }, 0);\n    }\n\n    removeAllWidgets(): void {\n        const widgetsToRemove = this.gridService.gridItems.map(widget => {\n            return {\n                id: widget.id\n            };\n        });\n\n        this.gridService.removeItems(widgetsToRemove);\n        this.gridService.gridItems = [];\n    }\n\n    saveGridLayoutToLocalStorage(): void {\n        this.gridService.saveItems();\n    }\n\n    ngOnDestroy(): void {\n        this.gridService.reset();\n    }\n\n}\n\n    \n\n    \n        \n    \n        Select widgets\n        \n            \n                \n                \n                    \n                    {{ service.name }}\n                \n                \n                    [{{ countSelectedWidget(widget).toString() }}] {{ widget.name }}\n                \n            \n        \n    \n    \n        Remove all widgets\n    \n\n\n    \n        \n            \n            \n            \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./grid.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Select widgets                                                                                            {{ service.name }}                                                    [{{ countSelectedWidget(widget).toString() }}] {{ widget.name }}                                                    Remove all widgets                                                                            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'GridComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GridHeaderComponent.html":{"url":"components/GridHeaderComponent.html","title":"component - GridHeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GridHeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/grid-header/grid-header.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-grid-header\n            \n\n            \n                styleUrls\n                ./grid-header.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./grid-header.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                icons\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onTimerClicked\n                            \n                            \n                                onTrashClicked\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                refreshRate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                refreshRateChange\n                            \n                            \n                                removeClick\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogService: NbDialogService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/grid-header/grid-header.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogService\n                                                  \n                                                        \n                                                                    NbDialogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/home/grid/grid-header/grid-header.component.ts:13\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        refreshRate\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/home/grid/grid-header/grid-header.component.ts:15\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        refreshRateChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/home/grid/grid-header/grid-header.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        removeClick\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/home/grid/grid-header/grid-header.component.ts:18\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onTimerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonTimerClicked()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid-header/grid-header.component.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onTrashClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonTrashClicked()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid-header/grid-header.component.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icons\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        faClock,\n        faStopwatch,\n        faArrowsAlt,\n        faTrash\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/grid-header/grid-header.component.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { faArrowsAlt, faClock, faStopwatch, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { NbDialogService } from '@nebular/theme';\nimport { RefreshRateInputDialogComponent } from './refresh-rate-input-dialog/refresh-rate-input-dialog.component';\n\n@Component({\n    selector: 'app-grid-header',\n    templateUrl: './grid-header.component.html',\n    styleUrls: [ './grid-header.component.scss' ]\n})\nexport class GridHeaderComponent {\n\n    @Input() name: string;\n\n    @Input() refreshRate: number;\n    @Output() refreshRateChange = new EventEmitter();\n\n    @Output() removeClick = new EventEmitter();\n\n    icons = {\n        faClock,\n        faStopwatch,\n        faArrowsAlt,\n        faTrash\n    };\n\n    constructor(private dialogService: NbDialogService) {\n    }\n\n    onTimerClicked(): void {\n        this.dialogService.open(RefreshRateInputDialogComponent, {\n            context: {\n                refreshRate: this.refreshRate\n            }\n        })\n            .onClose.subscribe(newVal => {\n            const num = parseInt(newVal, 10);\n\n            if (newVal && num >= 1) {\n                this.refreshRate = num;\n                this.refreshRateChange.emit(this.refreshRate);\n            }\n        });\n    }\n\n    onTrashClicked(): void {\n        this.removeClick.emit();\n    }\n\n}\n\n    \n\n    \n        \n    \n        {{ name }}\n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\n    \n\n    \n                \n                    ./grid-header.component.scss\n                \n                .grid-widget-header {\n    border-bottom: 1px solid #9da6a9;\n    background-color: #ced7db;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ name }}                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'GridHeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GridModule.html":{"url":"modules/GridModule.html","title":"module - GridModule","body":"\n                   \n\n\n\n\n    Modules\n    GridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GridModule\n\n\n\ncluster_GridModule_exports\n\n\n\ncluster_GridModule_declarations\n\n\n\n\nGridComponent\n\nGridComponent\n\n\n\nGridModule\n\nGridModule\n\nGridModule -->\n\nGridComponent->GridModule\n\n\n\n\n\nGridHeaderComponent\n\nGridHeaderComponent\n\nGridModule -->\n\nGridHeaderComponent->GridModule\n\n\n\n\n\nMsCalendarComponent\n\nMsCalendarComponent\n\nGridModule -->\n\nMsCalendarComponent->GridModule\n\n\n\n\n\nMsMailComponent\n\nMsMailComponent\n\nGridModule -->\n\nMsMailComponent->GridModule\n\n\n\n\n\nRdSubredditWatcherComponent\n\nRdSubredditWatcherComponent\n\nGridModule -->\n\nRdSubredditWatcherComponent->GridModule\n\n\n\n\n\nRefreshRateInputDialogComponent\n\nRefreshRateInputDialogComponent\n\nGridModule -->\n\nRefreshRateInputDialogComponent->GridModule\n\n\n\n\n\nSpotifyArtistComponent\n\nSpotifyArtistComponent\n\nGridModule -->\n\nSpotifyArtistComponent->GridModule\n\n\n\n\n\nTtvStreamWatcherComponent\n\nTtvStreamWatcherComponent\n\nGridModule -->\n\nTtvStreamWatcherComponent->GridModule\n\n\n\n\n\nTtvUserWatcherComponent\n\nTtvUserWatcherComponent\n\nGridModule -->\n\nTtvUserWatcherComponent->GridModule\n\n\n\n\n\nWeatherComponent\n\nWeatherComponent\n\nGridModule -->\n\nWeatherComponent->GridModule\n\n\n\n\n\nWidgetRenderDirective\n\nWidgetRenderDirective\n\nGridModule -->\n\nWidgetRenderDirective->GridModule\n\n\n\n\n\nYtChannelWatcherComponent\n\nYtChannelWatcherComponent\n\nGridModule -->\n\nYtChannelWatcherComponent->GridModule\n\n\n\n\n\nYtVideoWatcherComponent\n\nYtVideoWatcherComponent\n\nGridModule -->\n\nYtVideoWatcherComponent->GridModule\n\n\n\n\n\nGridComponent \n\nGridComponent \n\nGridComponent  -->\n\nGridModule->GridComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/home/grid/grid.module.ts\n        \n\n\n        \n            Description\n        \n        \n            The Grid module.\nDeclares all necessary components to render the widget grid and imports all necessary modules.\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            GridComponent\n                        \n                        \n                            GridHeaderComponent\n                        \n                        \n                            MsCalendarComponent\n                        \n                        \n                            MsMailComponent\n                        \n                        \n                            RdSubredditWatcherComponent\n                        \n                        \n                            RefreshRateInputDialogComponent\n                        \n                        \n                            SpotifyArtistComponent\n                        \n                        \n                            TtvStreamWatcherComponent\n                        \n                        \n                            TtvUserWatcherComponent\n                        \n                        \n                            WeatherComponent\n                        \n                        \n                            WidgetRenderDirective\n                        \n                        \n                            YtChannelWatcherComponent\n                        \n                        \n                            YtVideoWatcherComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GridComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from './grid.component';\nimport {\n    NbButtonModule,\n    NbCardModule,\n    NbDialogModule,\n    NbFormFieldModule,\n    NbIconModule,\n    NbInputModule,\n    NbLayoutModule,\n    NbPopoverModule,\n    NbProgressBarModule,\n    NbSelectModule,\n    NbSpinnerModule,\n    NbThemeModule\n} from '@nebular/theme';\nimport { GridsterModule } from 'angular-gridster2';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FormsModule } from '@angular/forms';\nimport { MsCalendarComponent } from './widgets/ms-calendar/ms-calendar.component';\nimport { MsMailComponent } from './widgets/ms-mail-component/ms-mail.component';\nimport { TtvUserWatcherComponent } from './widgets/ttv-user-watcher/ttv-user-watcher.component';\nimport { TtvStreamWatcherComponent } from './widgets/ttv-stream-watcher/ttv-stream-watcher.component';\nimport { YtChannelWatcherComponent } from './widgets/yt-channel-watcher/yt-channel-watcher.component';\nimport { YtVideoWatcherComponent } from './widgets/yt-video-watcher/yt-video-watcher.component';\nimport { WidgetRenderDirective } from './shared/widget-render.directive';\nimport { GridHeaderComponent } from './grid-header/grid-header.component';\nimport { RefreshRateInputDialogComponent } from './grid-header/refresh-rate-input-dialog/refresh-rate-input-dialog.component';\nimport { SpotifyArtistComponent } from './widgets/spotify-artist/spotify-artist.component';\nimport { RdSubredditWatcherComponent } from './widgets/rd-subreddit-watcher/rd-subreddit-watcher.component';\nimport { WeatherComponent } from './widgets/weather/weather.component';\n\n/**\n * The Grid module.\n *\n * Declares all necessary components to render the widget grid and imports all necessary modules.\n */\n@NgModule({\n    declarations: [\n        GridComponent,\n        GridHeaderComponent,\n        RefreshRateInputDialogComponent,\n        MsCalendarComponent,\n        MsMailComponent,\n        TtvUserWatcherComponent,\n        TtvStreamWatcherComponent,\n        YtChannelWatcherComponent,\n        YtVideoWatcherComponent,\n        WidgetRenderDirective,\n        SpotifyArtistComponent,\n        RdSubredditWatcherComponent,\n        WeatherComponent\n    ],\n    exports: [\n        GridComponent\n    ],\n    imports: [\n        CommonModule,\n        NbLayoutModule,\n        NbThemeModule,\n        NbIconModule,\n        GridsterModule,\n        NbSelectModule,\n        FontAwesomeModule,\n        NbCardModule,\n        NgbModule,\n        NbButtonModule,\n        NbPopoverModule,\n        NbInputModule,\n        NbDialogModule.forRoot(),\n        NbSpinnerModule,\n        NbFormFieldModule,\n        FormsModule,\n        NbProgressBarModule\n    ]\n})\nexport class GridModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GridService.html":{"url":"injectables/GridService.html","title":"injectable - GridService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GridService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/home/grid/grid.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                gridItems\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onDragStop\n                            \n                            \n                                removeItems\n                            \n                            \n                                reset\n                            \n                            \n                                saveItems\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/grid.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDragStop\n                        \n                        \n                    \n                \n            \n            \n                \nonDragStop(item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            GridsterItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    itemComponent\n                                    \n                                            GridsterItemComponentInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeItems\n                        \n                        \n                    \n                \n            \n            \n                \nremoveItems(ids: Id[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                                Id[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveItems\n                        \n                        \n                    \n                \n            \n            \n                \nsaveItems()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            gridItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GridsterItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/grid.service.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GridsterConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        displayGrid: 'onDrag&Resize',\n        draggable: {\n            enabled: true,\n            ignoreContent: true,\n            stop: this.onDragStop.bind(this)\n        },\n        gridType: 'scrollVertical',\n        setGridSize: true,\n        minCols: 15,\n        maxCols: 15,\n        minRows: 10,\n        maxRows: 10,\n        resizable: {\n            enabled: false\n        },\n        scrollToNewItems: true\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/grid.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { GridsterConfig, GridsterItem, GridsterItemComponentInterface } from 'angular-gridster2';\nimport { DashboardService } from '../../shared/services/dashboard.service';\nimport { Id } from '../../shared/interfaces/id';\nimport { WidgetGridConfig } from '../../shared/interfaces/widget-grid-config';\n\nexport const gridConfigKey = 'gridConfig';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class GridService {\n\n    options: GridsterConfig = {\n        displayGrid: 'onDrag&Resize',\n        draggable: {\n            enabled: true,\n            ignoreContent: true,\n            stop: this.onDragStop.bind(this)\n        },\n        gridType: 'scrollVertical',\n        setGridSize: true,\n        minCols: 15,\n        maxCols: 15,\n        minRows: 10,\n        maxRows: 10,\n        resizable: {\n            enabled: false\n        },\n        scrollToNewItems: true\n    };\n\n    public gridItems: GridsterItem[] = [];\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    reset(): void {\n        this.gridItems = [];\n    }\n\n    onDragStop(item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent): void {\n        const index = this.gridItems.indexOf(item);\n\n        if (index >= 0) {\n            this.gridItems[index].x = itemComponent.$item.x;\n            this.gridItems[index].y = itemComponent.$item.y;\n        }\n        this.saveItems();\n    }\n\n    saveItems(): void {\n        const config: WidgetGridConfig[] = this.gridItems.map(value => {\n            return {\n                id: value.id,\n                type: value.widgetId,\n                x: value.x,\n                y: value.y,\n                refreshRate: value.refreshRate\n            };\n        });\n\n        this.dashboardService.saveGridConfig(config).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n    removeItems(ids: Id[]): void {\n        this.dashboardService.removeWidgets(ids).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/header/header.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                styleUrls\n                ./header.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userInfo\n                            \n                            \n                                userMenu\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                toggleSidebar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(sidebarService: NbSidebarService, dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/header/header.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sidebarService\n                                                  \n                                                        \n                                                                    NbSidebarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/header/header.component.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSidebar\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSidebar()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/header/header.component.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userInfo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        displayName: '',\n        email: ''\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/header/header.component.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userMenu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     NbMenuItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        {\n            title: this.userInfo.email,\n            group: true\n        },\n        {\n            title: 'Log out',\n            icon: 'log-out-outline',\n            url: '/api/auth/logout'\n        } ]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/header/header.component.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { NbMenuItem, NbSidebarService } from '@nebular/theme';\nimport { DashboardService } from '../../shared/services/dashboard.service';\nimport { User } from '../../shared/interfaces/user';\n\n@Component({\n    selector: 'app-header',\n    templateUrl: './header.component.html',\n    styleUrls: [ './header.component.scss' ]\n})\nexport class HeaderComponent implements OnInit {\n    userInfo: User = {\n        displayName: '',\n        email: ''\n    };\n    userMenu: NbMenuItem[] = [\n        {\n            title: this.userInfo.email,\n            group: true\n        },\n        {\n            title: 'Log out',\n            icon: 'log-out-outline',\n            url: '/api/auth/logout'\n        } ];\n\n    constructor(private sidebarService: NbSidebarService, private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.dashboardService.getUserProfile().subscribe(res => {\n            this.userMenu[0].title = res.body.email;\n            this.userInfo = res.body;\n        });\n    }\n\n    toggleSidebar(): boolean {\n        this.sidebarService.toggle();\n        return false;\n    }\n\n}\n\n    \n\n    \n        \n    \n        \n            \n        \n        dashboard\n    \n\n\n\n    \n\n        \n            \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./header.component.scss\n                \n                @import '../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../themes';\n\n@include nb-install-component() {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n\n    .logo-container {\n        display: flex;\n        align-items: center;\n        width: calc(#{nb-theme(sidebar-width)} - #{nb-theme(header-padding)});\n    }\n\n    nb-action {\n        height: auto;\n        display: flex;\n        align-content: center;\n    }\n\n    nb-user {\n        cursor: pointer;\n    }\n\n    ::ng-deep nb-search button {\n        padding: 0 !important;\n    }\n\n    .header-container {\n        display: flex;\n        align-items: center;\n        width: auto;\n\n        .sidebar-toggle {\n            @include nb-ltr(padding-right, 1.25rem);\n            @include nb-rtl(padding-left, 1.25rem);\n            text-decoration: none;\n            color: nb-theme(text-hint-color);\n\n            nb-icon {\n                font-size: 1.75rem;\n            }\n        }\n\n        .logo {\n            padding: 0 1.25rem;\n            font-size: 1.75rem;\n            @include nb-ltr(border-left, 1px solid nb-theme(divider-color));\n            @include nb-rtl(border-right, 1px solid nb-theme(divider-color));\n            white-space: nowrap;\n            text-decoration: none;\n        }\n    }\n\n    @include media-breakpoint-down(sm) {\n        .control-item {\n            display: none;\n        }\n        .user-action {\n            border: none;\n            padding: 0;\n        }\n    }\n\n    @include media-breakpoint-down(is) {\n        nb-select {\n            display: none;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        dashboard                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HomeComponent.html":{"url":"components/HomeComponent.html","title":"component - HomeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  HomeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/home.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-home\n            \n\n            \n                styleUrls\n                ./home.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./home.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                items\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/home/home.component.ts:23\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/home.component.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            items\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     NbMenuItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        {\n            title: 'Home',\n            icon: 'home-outline',\n            link: '/home',\n            home: true\n        },\n        {\n            title: 'Users',\n            icon: 'people-outline',\n            link: '/users',\n            home: false\n        }\n    ]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/home.component.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { NbMenuItem } from '@nebular/theme';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styleUrls: [ './home.component.scss' ]\n})\nexport class HomeComponent implements OnInit {\n    items: NbMenuItem[] = [\n        {\n            title: 'Home',\n            icon: 'home-outline',\n            link: '/home',\n            home: true\n        },\n        {\n            title: 'Users',\n            icon: 'people-outline',\n            link: '/users',\n            home: false\n        }\n    ];\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n    \n\n\n\n    \n\n    \n                \n                    ./home.component.scss\n                \n                @import '../../themes';\n@import '../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../node_modules/@nebular/theme/styles/global/breakpoints';\n\n@include nb-install-component() {\n    .menu-sidebar ::ng-deep .scrollable {\n        padding-top: nb-theme(layout-padding-top);\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'HomeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomeModule.html":{"url":"modules/HomeModule.html","title":"module - HomeModule","body":"\n                   \n\n\n\n\n    Modules\n    HomeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_exports\n\n\n\ncluster_HomeModule_declarations\n\n\n\ncluster_HomeModule_imports\n\n\n\n\nFooterComponent\n\nFooterComponent\n\n\n\nHomeModule\n\nHomeModule\n\nHomeModule -->\n\nFooterComponent->HomeModule\n\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\nHomeModule -->\n\nHeaderComponent->HomeModule\n\n\n\n\n\nHomeComponent\n\nHomeComponent\n\nHomeModule -->\n\nHomeComponent->HomeModule\n\n\n\n\n\nFooterComponent \n\nFooterComponent \n\nFooterComponent  -->\n\nHomeModule->FooterComponent \n\n\n\n\n\nHeaderComponent \n\nHeaderComponent \n\nHeaderComponent  -->\n\nHomeModule->HeaderComponent \n\n\n\n\n\nGridModule\n\nGridModule\n\nHomeModule -->\n\nGridModule->HomeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/home/home.module.ts\n        \n\n\n        \n            Description\n        \n        \n            The Home module.\nDeclares components of Home page and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FooterComponent\n                        \n                        \n                            HeaderComponent\n                        \n                        \n                            HomeComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GridModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FooterComponent\n                        \n                        \n                            HeaderComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from './header/header.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { HomeComponent } from './home.component';\nimport { GridModule } from './grid/grid.module';\nimport {\n    NbActionsModule,\n    NbContextMenuModule,\n    NbIconModule,\n    NbLayoutModule,\n    NbMenuModule,\n    NbSidebarModule,\n    NbUserModule\n} from '@nebular/theme';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NbEvaIconsModule } from '@nebular/eva-icons';\n\n/**\n * The Home module.\n *\n * Declares components of Home page and imports necessary modules.\n */\n@NgModule({\n    declarations: [\n        HeaderComponent,\n        FooterComponent,\n        HomeComponent\n    ],\n    exports: [\n        FooterComponent,\n        HeaderComponent\n    ],\n    imports: [\n        CommonModule,\n        GridModule,\n        NbLayoutModule,\n        NbSidebarModule,\n        NbMenuModule,\n        NgbModule,\n        NbActionsModule,\n        NbUserModule,\n        NbContextMenuModule,\n        NbIconModule,\n        NbEvaIconsModule\n    ]\n})\nexport class HomeModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IResponse.html":{"url":"interfaces/IResponse.html","title":"interface - IResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/auth/office-oauth-callback/office-oauth-callback.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnDestroy } from '@angular/core';\nimport { NbAuthResult, NbAuthService } from '@nebular/auth';\nimport { Router } from '@angular/router';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthService } from '../../shared/services/auth.service';\n\ninterface IResponse {\n    token: string;\n}\n\n@Component({\n    selector: 'app-office-oauth-callback',\n    templateUrl: './office-oauth-callback.component.html',\n    styleUrls: [ './office-oauth-callback.component.scss' ]\n})\nexport class OfficeOAuthCallbackComponent implements OnDestroy {\n    private destroy$ = new Subject();\n\n    constructor(private nbAuthService: NbAuthService, private router: Router, private httpClient: HttpClient, private authService: AuthService) {\n        this.nbAuthService.authenticate('office')\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((authResult: NbAuthResult) => {\n                if (authResult.isSuccess()) {\n                    this.httpClient.get('/api/auth/office-jwt', {\n                        withCredentials: true,\n                        headers: {Authorization: 'Bearer ' + authResult.getToken().getValue()}\n                    }).subscribe((_ => {\n                        authService.setIsLogin(true);\n                        this.router.navigateByUrl('/home');\n                    }), _ => {\n                        authService.setIsLogin(false);\n                        this.router.navigateByUrl('/auth/login');\n                    });\n                } else {\n                    authService.setIsLogin(false);\n                    this.router.navigateByUrl('/auth/login');\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Id.html":{"url":"interfaces/Id.html","title":"interface - Id","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Id\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/id.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Id {\n    id: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/auth/login/login.component.ts\n\n\n\n    \n        Extends\n    \n    \n                NbLoginComponent\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                styleUrls\n                ./login.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                oAuthLogins\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: NbAuthService, options: literal type, cd: ChangeDetectorRef, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/auth/login/login.component.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        NbAuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/auth/login/login.component.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            oAuthLogins\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         OAuthLogin[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        {\n            icon: faMicrosoft,\n            link: '/auth/login-office'\n        }\n    ]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/auth/login/login.component.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';\nimport { NB_AUTH_OPTIONS, NbAuthService, NbLoginComponent } from '@nebular/auth';\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { faMicrosoft } from '@fortawesome/free-brands-svg-icons';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../shared/services/auth.service';\n\ninterface OAuthLogin {\n    icon: IconDefinition;\n    link: string;\n}\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: [ './login.component.scss' ]\n})\nexport class LoginComponent extends NbLoginComponent implements OnInit {\n    oAuthLogins: OAuthLogin[] = [\n        {\n            icon: faMicrosoft,\n            link: '/auth/login-office'\n        }\n    ];\n\n    constructor(service: NbAuthService, @Inject(NB_AUTH_OPTIONS) options: {}, cd: ChangeDetectorRef, router: Router, private authService: AuthService) {\n        super(service, options, cd, router);\n    }\n\n    async ngOnInit(): Promise {\n        if (this.authService.isLoggedIn()) {\n            await this.router.navigateByUrl('/auth/verify');\n        }\n    }\n}\n\n    \n\n    \n        Login\nHello! Log in with your email.\n\n\n    Oh snap!\n    \n        {{ error }}\n    \n\n\n\n    Hooray!\n    \n        {{ message }}\n    \n\n\n\n\n    \n        Email address:\n        \n        \n            \n                Email is required!\n            \n            \n                Email should be the real one!\n            \n        \n    \n\n    \n        Password:\n        \n        \n            \n                Password is required!\n            \n            \n                Password should contains\n                from {{ getConfigValue('forms.validation.password.minLength') }}\n                to {{ getConfigValue('forms.validation.password.maxLength') }}\n                characters\n            \n        \n    \n\n    \n        Remember me\n    \n\n    \n        Log In\n    \n\n\n 0\" class=\"links\" aria-label=\"Social sign in\">\n    or authenticate with:\n    \n        \n            \n                \n            \n        \n    \n\n\n\n    Don't have an account? Register\n\n\n    \n\n    \n                \n                    ./login.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'LoginHello! Log in with your email.    Oh snap!            {{ error }}        Hooray!            {{ message }}                Email address:                                            Email is required!                                        Email should be the real one!                                    Password:                                            Password is required!                                        Password should contains                from {{ getConfigValue(\\'forms.validation.password.minLength\\') }}                to {{ getConfigValue(\\'forms.validation.password.maxLength\\') }}                characters                                    Remember me                Log In     0\" class=\"links\" aria-label=\"Social sign in\">    or authenticate with:                                                                    Don\\'t have an account? Register'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MicrosoftCalendar.html":{"url":"interfaces/MicrosoftCalendar.html","title":"interface - MicrosoftCalendar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MicrosoftCalendar\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/microsoft-calendar.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MicrosoftCalendar {\n    id: string;\n    name: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MicrosoftCalendarEvent.html":{"url":"interfaces/MicrosoftCalendarEvent.html","title":"interface - MicrosoftCalendarEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MicrosoftCalendarEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/microsoft-calendar-event.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        end\n                                \n                                \n                                        id\n                                \n                                \n                                        start\n                                \n                                \n                                        subject\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MicrosoftCalendarEvent {\n    id: string;\n    subject: string;\n    start: {\n        dateTime: string;\n        timeZone: string;\n    };\n    end: {\n        dateTime: string;\n        timeZone: string;\n    };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MicrosoftMail.html":{"url":"interfaces/MicrosoftMail.html","title":"interface - MicrosoftMail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MicrosoftMail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/microsoft-mail.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        isRead\n                                \n                                \n                                        receivedDateTime\n                                \n                                \n                                        sender\n                                \n                                \n                                        subject\n                                \n                                \n                                        webLink\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isRead\n                                    \n                                \n                                \n                                    \n                                        isRead:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        receivedDateTime\n                                    \n                                \n                                \n                                    \n                                        receivedDateTime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sender\n                                    \n                                \n                                \n                                    \n                                        sender:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webLink\n                                    \n                                \n                                \n                                    \n                                        webLink:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MicrosoftMail {\n    id: string;\n    receivedDateTime: string;\n    subject: string;\n    isRead: boolean;\n    webLink: string;\n    sender: {\n        emailAddress: {\n            address: string;\n        }\n    };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MicrosoftMailbox.html":{"url":"interfaces/MicrosoftMailbox.html","title":"interface - MicrosoftMailbox","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MicrosoftMailbox\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/microsoft-mailbox.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayName\n                                \n                                \n                                        id\n                                \n                                \n                                        unreadItemCount\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unreadItemCount\n                                    \n                                \n                                \n                                    \n                                        unreadItemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MicrosoftMailbox {\n    id: string;\n    displayName: string;\n    unreadItemCount: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MsCalendarComponent.html":{"url":"components/MsCalendarComponent.html","title":"component - MsCalendarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MsCalendarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    DashboardWidget\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-ms-calendar\n            \n\n            \n                styleUrls\n                ./ms-calendar.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./ms-calendar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                calendarList\n                            \n                            \n                                errorMsg\n                            \n                            \n                                eventList\n                            \n                            \n                                fetchCalendarListRequest\n                            \n                            \n                                fetchEventListRequest\n                            \n                            \n                                icons\n                            \n                            \n                                id\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                isLoading\n                            \n                            \n                                refreshRate\n                            \n                            \n                                selectedCalendar\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearSelection\n                            \n                            \n                                    Async\n                                fetchCalendarList\n                            \n                            \n                                    Async\n                                fetchEventList\n                            \n                            \n                                getEventEndTime\n                            \n                            \n                                getEventStartTime\n                            \n                            \n                                    Async\n                                loadConfig\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Async\n                                ngOnInit\n                            \n                            \n                                    Async\n                                onCalendarSelected\n                            \n                            \n                                onLoginClick\n                            \n                            \n                                repeatFetchCalendarList\n                            \n                            \n                                repeatFetchEventList\n                            \n                            \n                                saveConfig\n                            \n                            \n                                setRefreshRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearSelection\n                        \n                        \n                    \n                \n            \n            \n                \nclearSelection(save: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    save\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchCalendarList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchCalendarList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchEventList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchEventList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventEndTime\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventEndTime(event: MicrosoftCalendarEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                MicrosoftCalendarEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventStartTime\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventStartTime(event: MicrosoftCalendarEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                MicrosoftCalendarEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onCalendarSelected\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onCalendarSelected(selectedCalendar: MicrosoftCalendar)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    selectedCalendar\n                                    \n                                                MicrosoftCalendar\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onLoginClick\n                        \n                        \n                    \n                \n            \n            \n                \nonLoginClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            repeatFetchCalendarList\n                        \n                        \n                    \n                \n            \n            \n                \nrepeatFetchCalendarList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            repeatFetchEventList\n                        \n                        \n                    \n                \n            \n            \n                \nrepeatFetchEventList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            calendarList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MicrosoftCalendar[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            errorMsg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MicrosoftCalendarEvent[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchCalendarListRequest\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchEventListRequest\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icons\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        faMicrosoft\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAuthenticated\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshRate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedCalendar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MicrosoftCalendar\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { MicrosoftCalendar } from '../../../../shared/interfaces/microsoft-calendar';\nimport { MicrosoftCalendarEvent } from '../../../../shared/interfaces/microsoft-calendar-event';\nimport { faMicrosoft } from '@fortawesome/free-brands-svg-icons';\nimport { interval, Subscription } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-ms-calendar',\n    templateUrl: './ms-calendar.component.html',\n    styleUrls: [ './ms-calendar.component.scss' ]\n})\nexport class MsCalendarComponent implements OnInit, OnDestroy, DashboardWidget {\n\n    id: string;\n    refreshRate: number;\n\n    isAuthenticated = false;\n    isLoading = true;\n\n    fetchCalendarListRequest: Subscription;\n    fetchEventListRequest: Subscription;\n\n    calendarList: MicrosoftCalendar[];\n    selectedCalendar: MicrosoftCalendar;\n    eventList: MicrosoftCalendarEvent[];\n    errorMsg = '';\n\n    icons = {\n        faMicrosoft\n    };\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate !== rate) {\n            this.refreshRate = rate;\n        }\n        if (this.isAuthenticated) {\n            this.repeatFetchCalendarList();\n        }\n        if (this.selectedCalendar) {\n            this.repeatFetchEventList();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    async ngOnInit(): Promise {\n        try {\n            const isLogged = await this.dashboardService.isMicrosoftLogged().toPromise();\n\n            this.isAuthenticated = isLogged.authenticated;\n            if (this.isAuthenticated) {\n                await this.fetchCalendarList();\n                await this.loadConfig();\n            }\n            if (this.selectedCalendar) {\n                await this.fetchEventList();\n            }\n        } catch {\n            this.isAuthenticated = false;\n        }\n        this.isLoading = false;\n    }\n\n    ngOnDestroy(): void {\n        this.fetchCalendarListRequest?.unsubscribe();\n        this.fetchEventListRequest?.unsubscribe();\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.selectedCalendar?.id || ''}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n    async loadConfig(): Promise {\n        this.isLoading = true;\n\n        try {\n            const config = await this.dashboardService.getWidgetConfig(this.id).toPromise();\n\n            this.selectedCalendar = this.calendarList.find(cal => cal.id === config.query);\n        } catch {\n            this.errorMsg = 'Could not load widget config';\n        }\n        this.isLoading = false;\n    }\n\n    async onCalendarSelected(selectedCalendar: MicrosoftCalendar): Promise {\n        this.selectedCalendar = selectedCalendar;\n        this.saveConfig();\n        await this.fetchEventList();\n    }\n\n    onLoginClick(): void {\n        window.location.href = '/api/connect/microsoft';\n    }\n\n    async fetchCalendarList(): Promise {\n        this.isLoading = true;\n        try {\n            this.calendarList = await this.dashboardService.getMicrosoftCalendars().toPromise();\n            if (this.calendarList.length === 0) {\n                this.errorMsg = 'No calendars found.';\n            } else {\n                this.errorMsg = '';\n            }\n            this.repeatFetchCalendarList();\n        } catch {\n            this.isAuthenticated = false;\n        }\n        this.isLoading = false;\n    }\n\n    async fetchEventList(): Promise {\n        this.isLoading = true;\n        try {\n            this.eventList = await this.dashboardService.getMicrosoftCalendarEvents(this.selectedCalendar.id)\n                                       .toPromise();\n            if (this.eventList.length === 0) {\n                this.errorMsg = 'No events found.';\n            } else {\n                this.errorMsg = '';\n            }\n            this.repeatFetchEventList();\n        } catch {\n            this.selectedCalendar = null;\n            this.errorMsg = 'Could not get events from calendar.';\n        }\n        this.isLoading = false;\n    }\n\n    getEventStartTime(event: MicrosoftCalendarEvent): string {\n        return new Date(event.start.dateTime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n    }\n\n    getEventEndTime(event: MicrosoftCalendarEvent): string {\n        return new Date(event.end.dateTime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n    }\n\n    clearSelection(save: boolean): void {\n        this.selectedCalendar = null;\n        this.eventList = null;\n        this.fetchCalendarListRequest?.unsubscribe();\n        this.fetchCalendarListRequest = null;\n        this.fetchEventListRequest?.unsubscribe();\n        this.fetchEventListRequest = null;\n        if (save === true) {\n            this.saveConfig();\n        }\n    }\n\n    repeatFetchCalendarList(): void {\n        if (this.fetchCalendarListRequest?.closed === false) {\n            this.fetchCalendarListRequest.unsubscribe();\n        }\n        this.fetchCalendarListRequest = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getMicrosoftCalendars();\n        })).subscribe(\n            calendarList => {\n                this.calendarList = calendarList;\n                if (this.selectedCalendar && !this.calendarList.find(cal => cal.id === this.selectedCalendar.id)) {\n                    this.clearSelection(true);\n                }\n                if (this.calendarList.length === 0) {\n                    this.errorMsg = 'No calendars found.';\n                } else {\n                    this.errorMsg = '';\n                }\n            }, _ => {\n                this.isAuthenticated = false;\n                this.clearSelection(false);\n            }\n        );\n    }\n\n    repeatFetchEventList(): void {\n        if (this.fetchEventListRequest?.closed === false) {\n            this.fetchEventListRequest.unsubscribe();\n        }\n        this.fetchEventListRequest = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getMicrosoftCalendarEvents(this.selectedCalendar.id);\n        })).subscribe(\n            eventList => {\n                this.eventList = eventList;\n                if (this.eventList.length === 0) {\n                    this.errorMsg = 'No events found.';\n                } else {\n                    this.errorMsg = '';\n                }\n            }, _ => {\n                this.selectedCalendar = null;\n                this.eventList = null;\n                this.fetchEventListRequest?.unsubscribe();\n                this.fetchEventListRequest = null;\n                this.errorMsg = '';\n            }\n        );\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n    \n        \n        &nbsp; Login with microsoft\n    \n\n\n\n    \n        {{ calendar.name }}\n    \n    \n        \n            \n            \n                Event #{{ index + 1 }}\n                [{{ getEventStartTime(event) }} - {{ getEventEndTime(event) }}]\n            \n            \n                {{ event.subject }}\n            \n        \n    \n     0\" class=\"m-2 h-100\">\n        {{ errorMsg }}\n    \n\n\n    \n\n    \n                \n                    ./ms-calendar.component.scss\n                \n                @import '../../../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../../../themes';\n\n@include nb-install-component() {\n    height: 100%;\n    position: relative;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                      Login with microsoft                {{ calendar.name }}                                                        Event #{{ index + 1 }}                [{{ getEventStartTime(event) }} - {{ getEventEndTime(event) }}]                                        {{ event.subject }}                             0\" class=\"m-2 h-100\">        {{ errorMsg }}    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'MsCalendarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MsMailComponent.html":{"url":"components/MsMailComponent.html","title":"component - MsMailComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MsMailComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    DashboardWidget\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-ms-mail-component\n            \n\n            \n                styleUrls\n                ./ms-mail.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./ms-mail.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMsg\n                            \n                            \n                                fetchMailboxListRequest\n                            \n                            \n                                fetchMailListRequest\n                            \n                            \n                                icons\n                            \n                            \n                                id\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                isLoading\n                            \n                            \n                                mailboxList\n                            \n                            \n                                mailList\n                            \n                            \n                                refreshRate\n                            \n                            \n                                selectedMailbox\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearSelection\n                            \n                            \n                                    Async\n                                fetchMailboxList\n                            \n                            \n                                    Async\n                                fetchMailList\n                            \n                            \n                                getFormattedMailSendTime\n                            \n                            \n                                    Async\n                                loadConfig\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Async\n                                ngOnInit\n                            \n                            \n                                onLoginClick\n                            \n                            \n                                    Async\n                                onMailboxSelected\n                            \n                            \n                                repeatFetchMailboxList\n                            \n                            \n                                repeatFetchMailList\n                            \n                            \n                                saveConfig\n                            \n                            \n                                setRefreshRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearSelection\n                        \n                        \n                    \n                \n            \n            \n                \nclearSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchMailboxList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMailboxList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchMailList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMailList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getFormattedMailSendTime\n                        \n                        \n                    \n                \n            \n            \n                \ngetFormattedMailSendTime(mail: MicrosoftMail)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                MicrosoftMail\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onLoginClick\n                        \n                        \n                    \n                \n            \n            \n                \nonLoginClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onMailboxSelected\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onMailboxSelected(selectedMailbox: MicrosoftMailbox)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    selectedMailbox\n                                    \n                                                MicrosoftMailbox\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            repeatFetchMailboxList\n                        \n                        \n                    \n                \n            \n            \n                \nrepeatFetchMailboxList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            repeatFetchMailList\n                        \n                        \n                    \n                \n            \n            \n                \nrepeatFetchMailList()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            errorMsg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchMailboxListRequest\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchMailListRequest\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icons\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        faMicrosoft\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAuthenticated\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mailboxList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MicrosoftMailbox[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mailList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MicrosoftMail[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshRate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedMailbox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MicrosoftMailbox\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { faMicrosoft } from '@fortawesome/free-brands-svg-icons';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { interval, Subscription } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { MicrosoftMail } from '../../../../shared/interfaces/microsoft-mail';\nimport { MicrosoftMailbox } from '../../../../shared/interfaces/microsoft-mailbox';\n\n@Component({\n    selector: 'app-ms-mail-component',\n    templateUrl: './ms-mail.component.html',\n    styleUrls: [ './ms-mail.component.scss' ]\n})\nexport class MsMailComponent implements OnInit, OnDestroy, DashboardWidget {\n\n    id: string;\n    refreshRate: number;\n\n    isAuthenticated = false;\n    isLoading = true;\n\n    fetchMailboxListRequest: Subscription;\n    fetchMailListRequest: Subscription;\n\n    mailboxList: MicrosoftMailbox[];\n    selectedMailbox: MicrosoftMailbox;\n    mailList: MicrosoftMail[];\n    errorMsg = '';\n\n    icons = {\n        faMicrosoft\n    };\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate !== rate) {\n            this.refreshRate = rate;\n        }\n        if (this.isAuthenticated) {\n            this.repeatFetchMailboxList();\n        }\n        if (this.selectedMailbox) {\n            this.repeatFetchMailList();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    async ngOnInit(): Promise {\n        try {\n            const isLogged = await this.dashboardService.isMicrosoftLogged().toPromise();\n\n            this.isAuthenticated = isLogged.authenticated;\n            if (this.isAuthenticated) {\n                await this.fetchMailboxList();\n                await this.loadConfig();\n            }\n            if (this.selectedMailbox) {\n                await this.fetchMailList();\n            }\n        } catch {\n            this.isAuthenticated = false;\n        }\n        this.isLoading = false;\n    }\n\n    ngOnDestroy(): void {\n        this.fetchMailboxListRequest?.unsubscribe();\n        this.fetchMailListRequest?.unsubscribe();\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.selectedMailbox?.id || ''}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n    async loadConfig(): Promise {\n        this.isLoading = true;\n\n        try {\n            const config = await this.dashboardService.getWidgetConfig(this.id).toPromise();\n\n            this.selectedMailbox = this.mailboxList.find(box => box.id === config.query);\n        } catch {\n            this.errorMsg = 'Could not load widget config';\n        }\n        this.isLoading = false;\n    }\n\n    onLoginClick(): void {\n        window.location.href = '/api/connect/microsoft';\n    }\n\n    async onMailboxSelected(selectedMailbox: MicrosoftMailbox): Promise {\n        this.selectedMailbox = selectedMailbox;\n        this.saveConfig();\n        await this.fetchMailList();\n    }\n\n    async fetchMailboxList(): Promise {\n        this.isLoading = true;\n        try {\n            this.mailboxList = await this.dashboardService.getMicrosoftMailboxes().toPromise();\n            if (this.mailboxList.length === 0) {\n                this.errorMsg = 'No mailbox found.';\n            } else {\n                this.errorMsg = '';\n            }\n            this.repeatFetchMailboxList();\n        } catch {\n            this.isAuthenticated = false;\n        }\n        this.isLoading = false;\n    }\n\n    async fetchMailList(): Promise {\n        this.isLoading = true;\n        try {\n            this.mailList = await this.dashboardService.getMicrosoftMails(this.selectedMailbox.id).toPromise();\n            if (this.mailList.length === 0) {\n                this.errorMsg = 'No mails found.';\n            } else {\n                this.errorMsg = '';\n            }\n            this.repeatFetchMailList();\n        } catch {\n            this.selectedMailbox = null;\n            this.errorMsg = 'Could not get mails from mailbox.';\n        }\n        this.isLoading = false;\n    }\n\n    getFormattedMailSendTime(mail: MicrosoftMail): string {\n        const date = new Date(mail.receivedDateTime);\n\n        return `${date.toLocaleDateString('fr-FR')}, ${date.toLocaleTimeString('fr-FR')}`;\n    }\n\n    clearSelection(): void {\n        this.selectedMailbox = null;\n        this.mailList = null;\n        this.fetchMailboxListRequest?.unsubscribe();\n        this.fetchMailboxListRequest = null;\n        this.fetchMailListRequest?.unsubscribe();\n        this.fetchMailListRequest = null;\n        this.saveConfig();\n    }\n\n    repeatFetchMailboxList(): void {\n        if (this.fetchMailboxListRequest?.closed === false) {\n            this.fetchMailboxListRequest.unsubscribe();\n        }\n        this.fetchMailboxListRequest = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getMicrosoftMailboxes();\n        })).subscribe(\n            mailboxList => {\n                this.mailboxList = mailboxList;\n                if (this.selectedMailbox && !this.mailboxList.find(box => box.id === this.selectedMailbox.id)) {\n                    this.clearSelection();\n                }\n                if (this.mailboxList.length === 0) {\n                    this.errorMsg = 'No calendars found.';\n                } else {\n                    this.errorMsg = '';\n                }\n            }, _ => {\n                this.isAuthenticated = false;\n                this.clearSelection();\n            }\n        );\n    }\n\n    repeatFetchMailList(): void {\n        if (this.fetchMailListRequest?.closed === false) {\n            this.fetchMailListRequest.unsubscribe();\n        }\n        this.fetchMailListRequest = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getMicrosoftMails(this.selectedMailbox.id);\n        })).subscribe(\n            mailList => {\n                this.mailList = mailList;\n                if (this.mailList.length === 0) {\n                    this.errorMsg = 'No events found.';\n                } else {\n                    this.errorMsg = '';\n                }\n            }, _ => {\n                this.selectedMailbox = null;\n                this.mailList = null;\n                this.fetchMailListRequest?.unsubscribe();\n                this.fetchMailListRequest = null;\n                this.errorMsg = '';\n            }\n        );\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n    \n        \n        &nbsp; Login with microsoft\n    \n\n\n\n    \n        \n            {{ selectedMailbox?.displayName }}\n        \n\n        \n             0 ? 'text-danger' : 'text-secondary'\">\n                [{{ mailbox.unreadItemCount }}]\n            \n            \n                {{ mailbox.displayName }}\n            \n        \n    \n    \n        \n            \n            \n                [{{ getFormattedMailSendTime(mail) }}]\n            \n            \n                {{ mail.sender.emailAddress.address }}\n            \n            \n                {{ mail.subject }}\n            \n        \n    \n     0\" class=\"m-2 h-100\">\n        {{ errorMsg }}\n    \n\n\n    \n\n    \n                \n                    ./ms-mail.component.scss\n                \n                @import '../../../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../../../themes';\n\n@include nb-install-component() {\n    height: 100%;\n    position: relative;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                      Login with microsoft                            {{ selectedMailbox?.displayName }}                             0 ? \\'text-danger\\' : \\'text-secondary\\'\">                [{{ mailbox.unreadItemCount }}]                                        {{ mailbox.displayName }}                                                                            [{{ getFormattedMailSendTime(mail) }}]                                        {{ mail.sender.emailAddress.address }}                                        {{ mail.subject }}                             0\" class=\"m-2 h-100\">        {{ errorMsg }}    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'MsMailComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFoundComponent.html":{"url":"components/NotFoundComponent.html","title":"component - NotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/not-found/not-found.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-not-found\n            \n\n            \n                styleUrls\n                ./not-found.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./not-found.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/not-found/not-found.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/not-found/not-found.component.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.scss']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        \n    404 - Not found\n\n\n    \n\n    \n                \n                    ./not-found.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    404 - Not found'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'NotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotFoundModule.html":{"url":"modules/NotFoundModule.html","title":"module - NotFoundModule","body":"\n                   \n\n\n\n\n    Modules\n    NotFoundModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotFoundModule\n\n\n\ncluster_NotFoundModule_declarations\n\n\n\n\nNotFoundComponent\n\nNotFoundComponent\n\n\n\nNotFoundModule\n\nNotFoundModule\n\nNotFoundModule -->\n\nNotFoundComponent->NotFoundModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/not-found/not-found.module.ts\n        \n\n\n        \n            Description\n        \n        \n            The NotFound module.\nJust declares NotFoundComponent.\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NotFoundComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NotFoundComponent } from './not-found.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * The NotFound module.\n *\n * Just declares {@link NotFoundComponent}.\n */\n@NgModule({\n    declarations: [\n        NotFoundComponent\n    ],\n    imports: [\n        CommonModule,\n        NgbModule\n    ]\n})\nexport class NotFoundModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OAuthLogin.html":{"url":"interfaces/OAuthLogin.html","title":"interface - OAuthLogin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OAuthLogin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/auth/login/login.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        icon\n                                \n                                \n                                        link\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                    \n                                \n                                \n                                    \n                                        icon:     IconDefinition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IconDefinition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';\nimport { NB_AUTH_OPTIONS, NbAuthService, NbLoginComponent } from '@nebular/auth';\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { faMicrosoft } from '@fortawesome/free-brands-svg-icons';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../shared/services/auth.service';\n\ninterface OAuthLogin {\n    icon: IconDefinition;\n    link: string;\n}\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: [ './login.component.scss' ]\n})\nexport class LoginComponent extends NbLoginComponent implements OnInit {\n    oAuthLogins: OAuthLogin[] = [\n        {\n            icon: faMicrosoft,\n            link: '/auth/login-office'\n        }\n    ];\n\n    constructor(service: NbAuthService, @Inject(NB_AUTH_OPTIONS) options: {}, cd: ChangeDetectorRef, router: Router, private authService: AuthService) {\n        super(service, options, cd, router);\n    }\n\n    async ngOnInit(): Promise {\n        if (this.authService.isLoggedIn()) {\n            await this.router.navigateByUrl('/auth/verify');\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OfficeOAuthCallbackComponent.html":{"url":"components/OfficeOAuthCallbackComponent.html","title":"component - OfficeOAuthCallbackComponent","body":"\n                   \n\n\n\n\n\n  Components\n  OfficeOAuthCallbackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/auth/office-oauth-callback/office-oauth-callback.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-office-oauth-callback\n            \n\n            \n                styleUrls\n                ./office-oauth-callback.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./office-oauth-callback.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(nbAuthService: NbAuthService, router: Router, httpClient: HttpClient, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/auth/office-oauth-callback/office-oauth-callback.component.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nbAuthService\n                                                  \n                                                        \n                                                                        NbAuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/auth/office-oauth-callback/office-oauth-callback.component.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            destroy$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/auth/office-oauth-callback/office-oauth-callback.component.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy } from '@angular/core';\nimport { NbAuthResult, NbAuthService } from '@nebular/auth';\nimport { Router } from '@angular/router';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthService } from '../../shared/services/auth.service';\n\ninterface IResponse {\n    token: string;\n}\n\n@Component({\n    selector: 'app-office-oauth-callback',\n    templateUrl: './office-oauth-callback.component.html',\n    styleUrls: [ './office-oauth-callback.component.scss' ]\n})\nexport class OfficeOAuthCallbackComponent implements OnDestroy {\n    private destroy$ = new Subject();\n\n    constructor(private nbAuthService: NbAuthService, private router: Router, private httpClient: HttpClient, private authService: AuthService) {\n        this.nbAuthService.authenticate('office')\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((authResult: NbAuthResult) => {\n                if (authResult.isSuccess()) {\n                    this.httpClient.get('/api/auth/office-jwt', {\n                        withCredentials: true,\n                        headers: {Authorization: 'Bearer ' + authResult.getToken().getValue()}\n                    }).subscribe((_ => {\n                        authService.setIsLogin(true);\n                        this.router.navigateByUrl('/home');\n                    }), _ => {\n                        authService.setIsLogin(false);\n                        this.router.navigateByUrl('/auth/login');\n                    });\n                } else {\n                    authService.setIsLogin(false);\n                    this.router.navigateByUrl('/auth/login');\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./office-oauth-callback.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'OfficeOAuthCallbackComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OfficeOAuthComponent.html":{"url":"components/OfficeOAuthComponent.html","title":"component - OfficeOAuthComponent","body":"\n                   \n\n\n\n\n\n  Components\n  OfficeOAuthComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/auth/office-oauth/office-oauth.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-office-oauth\n            \n\n            \n                styleUrls\n                ./office-oauth.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./office-oauth.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroy$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: NbAuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/auth/office-oauth/office-oauth.component.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        NbAuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin()\n                \n            \n\n\n            \n                \n                    Defined in src/app/auth/office-oauth/office-oauth.component.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/auth/office-oauth/office-oauth.component.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            destroy$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/auth/office-oauth/office-oauth.component.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { NbAuthService } from '@nebular/auth';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-office-oauth',\n    templateUrl: './office-oauth.component.html',\n    styleUrls: [ './office-oauth.component.scss' ]\n})\nexport class OfficeOAuthComponent implements OnDestroy {\n    private destroy$ = new Subject();\n\n    constructor(private authService: NbAuthService) {\n        this.login();\n    }\n\n    login(): void {\n        this.authService.authenticate('office')\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((_) => {\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./office-oauth.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'OfficeOAuthComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RdSubredditWatcherComponent.html":{"url":"components/RdSubredditWatcherComponent.html","title":"component - RdSubredditWatcherComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RdSubredditWatcherComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    DashboardWidget\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-rd-subreddit-watcher\n            \n\n            \n                styleUrls\n                ./rd-subreddit-watcher.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./rd-subreddit-watcher.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                faReddit\n                            \n                            \n                                id\n                            \n                            \n                                isLoading\n                            \n                            \n                                isRedditAuthed\n                            \n                            \n                                refreshRate\n                            \n                            \n                                request\n                            \n                            \n                                search\n                            \n                            \n                                searchBuffer\n                            \n                            \n                                subreddit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearRequest\n                            \n                            \n                                getSubredditErrorCb\n                            \n                            \n                                getSubredditInfos\n                            \n                            \n                                getSubredditNextCb\n                            \n                            \n                                loadConfig\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onLoginClick\n                            \n                            \n                                onSubmit\n                            \n                            \n                                reset\n                            \n                            \n                                saveConfig\n                            \n                            \n                                setRefreshRate\n                            \n                            \n                                startRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearRequest\n                        \n                        \n                    \n                \n            \n            \n                \nclearRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSubredditErrorCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetSubredditErrorCb(error)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSubredditInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetSubredditInfos()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSubredditNextCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetSubredditNextCb(subreddit)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subreddit\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \nloadConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onLoginClick\n                        \n                        \n                    \n                \n            \n            \n                \nonLoginClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startRequest\n                        \n                        \n                    \n                \n            \n            \n                \nstartRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            faReddit\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : faReddit\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isRedditAuthed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshRate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchBuffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subreddit\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { interval, Subscription } from 'rxjs';\nimport { faReddit } from '@fortawesome/free-brands-svg-icons';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { mergeMap } from 'rxjs/operators';\nimport { Subreddit } from '../../../../shared/interfaces/subreddit';\n\ninterface SubredditCreationFormatted {\n    created: string;\n}\n\n@Component({\n    selector: 'app-rd-subreddit-watcher',\n    templateUrl: './rd-subreddit-watcher.component.html',\n    styleUrls: [ './rd-subreddit-watcher.component.scss' ]\n})\nexport class RdSubredditWatcherComponent implements OnInit,\n                                                    OnDestroy,\n                                                    DashboardWidget {\n\n    id: string;\n    refreshRate: number;\n\n    isRedditAuthed = false;\n    isLoading = true;\n    searchBuffer = '';\n    search = '';\n    subreddit: Subreddit & SubredditCreationFormatted = null;\n    request: Subscription;\n    faReddit = faReddit;\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate === rate) {\n            return;\n        }\n        this.refreshRate = rate;\n        if (this.search.trim()) {\n            this.startRequest();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.dashboardService.isRedditLogged().subscribe(isAuthenticated => {\n            this.isRedditAuthed = isAuthenticated.authenticated;\n            if (!this.isRedditAuthed) {\n                this.isLoading = false;\n                return;\n            }\n            this.loadConfig();\n        }, _ => {\n            this.isLoading = false;\n            this.isRedditAuthed = false;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.clearRequest();\n    }\n\n    onLoginClick(): void {\n        window.location.href = '/api/connect/reddit';\n    }\n\n    reset(): void {\n        this.clearRequest();\n        this.search = '';\n        this.isLoading = false;\n        this.subreddit = null;\n        this.saveConfig();\n    }\n\n    clearRequest(): void {\n        if (this.request && !this.request.closed) {\n            this.request.unsubscribe();\n            this.request = null;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.searchBuffer.trim() === '') {\n            this.reset();\n            return;\n        }\n\n        this.search = this.searchBuffer;\n        if (!this.request) {\n            this.startRequest();\n        }\n        this.getSubredditInfos();\n        this.saveConfig();\n    }\n\n    getSubredditInfos(): void {\n        this.isLoading = true;\n        this.dashboardService.getSubredditInfos(this.search)\n            .subscribe(\n                (stream) => this.getSubredditNextCb(stream),\n                (error) => this.getSubredditErrorCb(error)\n            );\n    }\n\n    getSubredditNextCb(subreddit): void {\n        if (!subreddit) {\n            this.reset();\n        } else {\n            this.subreddit = {\n                ...subreddit,\n                created: new Date(subreddit.created_utc * 1000).toLocaleDateString()\n            };\n            this.isLoading = false;\n        }\n    }\n\n    getSubredditErrorCb(error): void {\n        if (error && error.status === 403) {\n            this.isRedditAuthed = false;\n        }\n        this.reset();\n    }\n\n    startRequest(): void {\n        this.clearRequest();\n        this.request = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getSubredditInfos(this.search);\n        })).subscribe(\n            (subreddit) => this.getSubredditNextCb(subreddit),\n            (error) => this.getSubredditErrorCb(error)\n        );\n    }\n\n    loadConfig(): void {\n        this.isLoading = true;\n        this.dashboardService.getWidgetConfig(this.id).subscribe(config => {\n            this.searchBuffer = config.query;\n            this.onSubmit();\n        }, _ => {\n            this.isLoading = false;\n        });\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.search.trim()}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n}\n\n    \n\n    \n        \n    \n\n\n    \n        \n            \n            &nbsp; Login with Reddit\n        \n    \n\n\n    \n        \n            \n                \n                    \n                    \n                \n            \n        \n    \n    \n        Nothing to display\n    \n    \n        \n            \n            \n                #\n                Value\n            \n            \n            \n            \n                Title\n                {{subreddit.display_name}}\n            \n            \n                Active users\n                {{subreddit.active_user_count}}\n            \n            \n                Subscribers\n                {{subreddit.subscribers}}\n            \n            \n                Creation\n                {{subreddit.created}}\n            \n            \n                Language\n                {{subreddit.lang}}\n            \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./rd-subreddit-watcher.component.scss\n                \n                @import '../../../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../../../themes';\n\n@include nb-install-component() {\n    height: 100% !important;\n    overflow: auto;\n    position: relative;\n\n    nb-card, nb-card-body {\n        margin-bottom: 0;\n    }\n    nb-card-body {\n        padding: 0.5rem 1.5rem;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                          Login with Reddit                                                                                                                                                Nothing to display                                                        #                Value                                                                Title                {{subreddit.display_name}}                                        Active users                {{subreddit.active_user_count}}                                        Subscribers                {{subreddit.subscribers}}                                        Creation                {{subreddit.created}}                                        Language                {{subreddit.lang}}                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'RdSubredditWatcherComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RefreshRateInputDialogComponent.html":{"url":"components/RefreshRateInputDialogComponent.html","title":"component - RefreshRateInputDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RefreshRateInputDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/grid-header/refresh-rate-input-dialog/refresh-rate-input-dialog.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-refresh-rate-input-dialog\n            \n\n            \n                styleUrls\n                ./refresh-rate-input-dialog.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./refresh-rate-input-dialog.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                submit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                refreshRate\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(ref: NbDialogRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/grid-header/refresh-rate-input-dialog/refresh-rate-input-dialog.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ref\n                                                  \n                                                        \n                                                                        NbDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        refreshRate\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/home/grid/grid-header/refresh-rate-input-dialog/refresh-rate-input-dialog.component.ts:11\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid-header/refresh-rate-input-dialog/refresh-rate-input-dialog.component.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            submit\n                        \n                        \n                    \n                \n            \n            \n                \nsubmit(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/grid-header/refresh-rate-input-dialog/refresh-rate-input-dialog.component.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { NbDialogRef } from '@nebular/theme';\n\n@Component({\n    selector: 'app-refresh-rate-input-dialog',\n    templateUrl: './refresh-rate-input-dialog.component.html',\n    styleUrls: [ './refresh-rate-input-dialog.component.scss' ]\n})\nexport class RefreshRateInputDialogComponent {\n\n    @Input() refreshRate: number;\n\n    constructor(private ref: NbDialogRef) {\n    }\n\n    cancel(): void {\n        this.ref.close();\n    }\n\n    submit(value: any): void {\n        this.ref.close(value);\n    }\n\n}\n\n    \n\n    \n        \n    Enter the refresh rate for this widget (in seconds)\n    \n        \n    \n    \n        Cancel\n        Submit\n    \n\n\n    \n\n    \n                \n                    ./refresh-rate-input-dialog.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Enter the refresh rate for this widget (in seconds)                            Cancel        Submit    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'RefreshRateInputDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterComponent.html":{"url":"components/RegisterComponent.html","title":"component - RegisterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RegisterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/auth/register/register.component.ts\n\n\n\n    \n        Extends\n    \n    \n                NbRegisterComponent\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register\n            \n\n            \n                styleUrls\n                ./register.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./register.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(service: NbAuthService, options: literal type, cd: ChangeDetectorRef, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/auth/register/register.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        NbAuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/auth/register/register.component.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';\nimport { NB_AUTH_OPTIONS, NbAuthService, NbRegisterComponent } from '@nebular/auth';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../shared/services/auth.service';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: [ './register.component.scss' ]\n})\nexport class RegisterComponent extends NbRegisterComponent implements OnInit {\n    constructor(service: NbAuthService, @Inject(NB_AUTH_OPTIONS) options: {}, cd: ChangeDetectorRef, router: Router, private authService: AuthService) {\n        super(service, options, cd, router);\n    }\n\n    async ngOnInit(): Promise {\n        if (this.authService.isLoggedIn()) {\n            await this.router.navigateByUrl('/auth/verify');\n        }\n    }\n}\n\n    \n\n    \n        Register\n\n\n    Oh snap!\n    \n        {{ error }}\n    \n\n\n\n    Hooray!\n    \n        {{ message }}\n    \n\n\n\n\n    \n        Full name:\n        \n        \n            \n                Full name is required!\n            \n            \n                Full name should contains\n                from {{getConfigValue('forms.validation.fullName.minLength')}}\n                to {{getConfigValue('forms.validation.fullName.maxLength')}}\n                characters\n            \n        \n    \n\n    \n        Email address:\n        \n        \n            \n                Email is required!\n            \n            \n                Email should be the real one!\n            \n        \n    \n\n    \n        Password:\n        \n        \n            \n                Password is required!\n            \n            \n                Password should contains\n                from {{ getConfigValue('forms.validation.password.minLength') }}\n                to {{ getConfigValue('forms.validation.password.maxLength') }}\n                characters\n            \n        \n    \n\n    \n        Repeat password:\n        \n        \n            \n                Password confirmation is required!\n            \n            \n                Password does not match the confirm password.\n            \n        \n    \n\n    \n        \n            Agree to Terms & Conditions\n        \n    \n\n    \n        Register\n    \n\n\n 0\" class=\"links\" aria-label=\"Social sign in\">\n    or enter with:\n    \n        \n            {{ socialLink.title }}\n            {{ socialLink.title }}\n        \n    \n\n\n\n    Already have an account? Log in\n\n\n    \n\n    \n                \n                    ./register.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Register    Oh snap!            {{ error }}        Hooray!            {{ message }}                Full name:                                            Full name is required!                                        Full name should contains                from {{getConfigValue(\\'forms.validation.fullName.minLength\\')}}                to {{getConfigValue(\\'forms.validation.fullName.maxLength\\')}}                characters                                    Email address:                                            Email is required!                                        Email should be the real one!                                    Password:                                            Password is required!                                        Password should contains                from {{ getConfigValue(\\'forms.validation.password.minLength\\') }}                to {{ getConfigValue(\\'forms.validation.password.maxLength\\') }}                characters                                    Repeat password:                                            Password confirmation is required!                                        Password does not match the confirm password.                                                Agree to Terms & Conditions                        Register     0\" class=\"links\" aria-label=\"Social sign in\">    or enter with:                        {{ socialLink.title }}            {{ socialLink.title }}                Already have an account? Log in'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'RegisterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpotifyArtist.html":{"url":"interfaces/SpotifyArtist.html","title":"interface - SpotifyArtist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpotifyArtist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/spotify-artist.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        followers\n                                \n                                \n                                        genres\n                                \n                                \n                                        id\n                                \n                                \n                                        image\n                                \n                                \n                                        name\n                                \n                                \n                                        popularity\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        genres\n                                    \n                                \n                                \n                                    \n                                        genres:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        popularity\n                                    \n                                \n                                \n                                    \n                                        popularity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SpotifyArtist {\n    id: string;\n    name: string;\n    popularity: number;\n    genres: string[];\n    followers: number;\n    image: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SpotifyArtistComponent.html":{"url":"components/SpotifyArtistComponent.html","title":"component - SpotifyArtistComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SpotifyArtistComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    DashboardWidget\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-spotify-artist\n            \n\n            \n                styleUrls\n                ./spotify-artist.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./spotify-artist.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                artistQuery\n                            \n                            \n                                currentArtist\n                            \n                            \n                                errorMsg\n                            \n                            \n                                fetchArtistDataRequest\n                            \n                            \n                                icons\n                            \n                            \n                                id\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                isLoading\n                            \n                            \n                                refreshRate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearSelection\n                            \n                            \n                                    Async\n                                fetchArtistData\n                            \n                            \n                                    Async\n                                loadConfig\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Async\n                                ngOnInit\n                            \n                            \n                                onExitClick\n                            \n                            \n                                onLoginClick\n                            \n                            \n                                    Async\n                                onSubmit\n                            \n                            \n                                repeatFetchArtistData\n                            \n                            \n                                saveConfig\n                            \n                            \n                                setRefreshRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearSelection\n                        \n                        \n                    \n                \n            \n            \n                \nclearSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchArtistData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchArtistData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onExitClick\n                        \n                        \n                    \n                \n            \n            \n                \nonExitClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onLoginClick\n                        \n                        \n                    \n                \n            \n            \n                \nonLoginClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onSubmit(formData: NgForm)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formData\n                                    \n                                                NgForm\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            repeatFetchArtistData\n                        \n                        \n                    \n                \n            \n            \n                \nrepeatFetchArtistData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            artistQuery\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentArtist\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpotifyArtist\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            errorMsg\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fetchArtistDataRequest\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icons\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        faSpotify,\n        faTimes\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAuthenticated\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshRate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { faSpotify } from '@fortawesome/free-brands-svg-icons';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { NgForm } from '@angular/forms';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { interval, Subscription } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { SpotifyArtist } from '../../../../shared/interfaces/spotify-artist';\n\n@Component({\n    selector: 'app-spotify-artist',\n    templateUrl: './spotify-artist.component.html',\n    styleUrls: [ './spotify-artist.component.scss' ]\n})\nexport class SpotifyArtistComponent implements OnInit, OnDestroy, DashboardWidget {\n\n    id: string;\n    refreshRate: number;\n\n    isAuthenticated = false;\n    isLoading = true;\n\n    fetchArtistDataRequest: Subscription;\n\n    artistQuery = '';\n    currentArtist: SpotifyArtist;\n    errorMsg = '';\n\n    icons = {\n        faSpotify,\n        faTimes\n    };\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate !== rate) {\n            this.refreshRate = rate;\n        }\n        if (this.artistQuery.length > 0) {\n            this.repeatFetchArtistData();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    async ngOnInit(): Promise {\n        try {\n            const isLogged = await this.dashboardService.isSpotifyLogged().toPromise();\n\n            this.isAuthenticated = isLogged.authenticated;\n            if (this.isAuthenticated) {\n                await this.loadConfig();\n                if (this.artistQuery.length > 0) {\n                    await this.fetchArtistData();\n                }\n            }\n        } catch {\n            this.isAuthenticated = false;\n        }\n        this.isLoading = false;\n    }\n\n    ngOnDestroy(): void {\n        this.fetchArtistDataRequest?.unsubscribe();\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.artistQuery}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n    async loadConfig(): Promise {\n        this.isLoading = true;\n        try {\n            const config = await this.dashboardService.getWidgetConfig(this.id).toPromise();\n\n            this.artistQuery = config.query;\n        } catch {\n            this.errorMsg = 'Could not load widget config';\n        }\n        this.isLoading = false;\n    }\n\n    onLoginClick(): void {\n        window.location.href = '/api/connect/spotify';\n    }\n\n    async onSubmit(formData: NgForm): Promise {\n        this.artistQuery = formData.value.search.trim();\n        if (this.artistQuery.length > 0) {\n            if (await this.fetchArtistData() === true) {\n                this.saveConfig();\n            }\n        }\n    }\n\n    onExitClick(): void {\n        this.clearSelection();\n    }\n\n    clearSelection(): void {\n        this.artistQuery = '';\n        this.currentArtist = null;\n        this.errorMsg = '';\n        this.fetchArtistDataRequest?.unsubscribe();\n        this.saveConfig();\n    }\n\n    async fetchArtistData(): Promise {\n        this.isLoading = true;\n        try {\n            this.currentArtist = await this.dashboardService.getSpotifyArtist(this.artistQuery).toPromise();\n            this.repeatFetchArtistData();\n            this.isLoading = false;\n            return true;\n        } catch {\n            this.artistQuery = '';\n            this.errorMsg = 'Invalid artist ID.';\n            this.isLoading = false;\n            return false;\n        }\n    }\n\n    repeatFetchArtistData(): void {\n        if (this.fetchArtistDataRequest?.closed === false) {\n            this.fetchArtistDataRequest.unsubscribe();\n        }\n        this.fetchArtistDataRequest = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getSpotifyArtist(this.artistQuery);\n        })).subscribe(\n            currentArtist => {\n                this.currentArtist = currentArtist;\n            }, _ => {\n                this.isAuthenticated = false;\n                this.clearSelection();\n            }\n        );\n    }\n\n}\n\n    \n\n    \n        \n\n\n\n    \n        \n        &nbsp; Login with spotify\n    \n\n\n\n    \n        \n            \n            \n        \n         0\" class=\"text-danger font-weight-bold\">{{ errorMsg }}\n        Go\n    \n    \n        \n        \n            {{ currentArtist.name }}\n            \n                {{ currentArtist.followers }}\n                 followers\n            \n            \n                {{ genre }}\n            \n            \n                Popularity: {{ currentArtist.popularity }}\n            \n        \n        \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./spotify-artist.component.scss\n                \n                @import '../../../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../../../themes';\n\n@include nb-install-component() {\n    height: 100%;\n    position: relative;\n}\n\n.w-35 {\n    width: 35% !important;\n}\n\n.centered-and-cropped {\n    object-fit: cover;\n}\n\n.music-genre-tag {\n    background-color: grey;\n    border-radius: 1rem;\n    border-width: 1px;\n    padding-left: .25rem;\n    padding-right: .25rem;\n}\n\n.cancel-button {\n    position: absolute;\n    top: 0;\n    right: 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                      Login with spotify                                                         0\" class=\"text-danger font-weight-bold\">{{ errorMsg }}        Go                                    {{ currentArtist.name }}                            {{ currentArtist.followers }}                 followers                                        {{ genre }}                                        Popularity: {{ currentArtist.popularity }}                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'SpotifyArtistComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subreddit.html":{"url":"interfaces/Subreddit.html","title":"interface - Subreddit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Subreddit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/subreddit.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active_user_count\n                                \n                                \n                                        created_utc\n                                \n                                \n                                        display_name\n                                \n                                \n                                        lang\n                                \n                                \n                                        subscribers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active_user_count\n                                    \n                                \n                                \n                                    \n                                        active_user_count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created_utc\n                                    \n                                \n                                \n                                    \n                                        created_utc:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display_name\n                                    \n                                \n                                \n                                    \n                                        display_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lang\n                                    \n                                \n                                \n                                    \n                                        lang:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscribers\n                                    \n                                \n                                \n                                    \n                                        subscribers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Subreddit {\n    display_name: string;\n    active_user_count: number;\n    subscribers: number;\n    created_utc: number;\n    lang: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubredditCreationFormatted.html":{"url":"interfaces/SubredditCreationFormatted.html","title":"interface - SubredditCreationFormatted","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubredditCreationFormatted\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        created\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        created\n                                    \n                                \n                                \n                                    \n                                        created:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { interval, Subscription } from 'rxjs';\nimport { faReddit } from '@fortawesome/free-brands-svg-icons';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { mergeMap } from 'rxjs/operators';\nimport { Subreddit } from '../../../../shared/interfaces/subreddit';\n\ninterface SubredditCreationFormatted {\n    created: string;\n}\n\n@Component({\n    selector: 'app-rd-subreddit-watcher',\n    templateUrl: './rd-subreddit-watcher.component.html',\n    styleUrls: [ './rd-subreddit-watcher.component.scss' ]\n})\nexport class RdSubredditWatcherComponent implements OnInit,\n                                                    OnDestroy,\n                                                    DashboardWidget {\n\n    id: string;\n    refreshRate: number;\n\n    isRedditAuthed = false;\n    isLoading = true;\n    searchBuffer = '';\n    search = '';\n    subreddit: Subreddit & SubredditCreationFormatted = null;\n    request: Subscription;\n    faReddit = faReddit;\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate === rate) {\n            return;\n        }\n        this.refreshRate = rate;\n        if (this.search.trim()) {\n            this.startRequest();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.dashboardService.isRedditLogged().subscribe(isAuthenticated => {\n            this.isRedditAuthed = isAuthenticated.authenticated;\n            if (!this.isRedditAuthed) {\n                this.isLoading = false;\n                return;\n            }\n            this.loadConfig();\n        }, _ => {\n            this.isLoading = false;\n            this.isRedditAuthed = false;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.clearRequest();\n    }\n\n    onLoginClick(): void {\n        window.location.href = '/api/connect/reddit';\n    }\n\n    reset(): void {\n        this.clearRequest();\n        this.search = '';\n        this.isLoading = false;\n        this.subreddit = null;\n        this.saveConfig();\n    }\n\n    clearRequest(): void {\n        if (this.request && !this.request.closed) {\n            this.request.unsubscribe();\n            this.request = null;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.searchBuffer.trim() === '') {\n            this.reset();\n            return;\n        }\n\n        this.search = this.searchBuffer;\n        if (!this.request) {\n            this.startRequest();\n        }\n        this.getSubredditInfos();\n        this.saveConfig();\n    }\n\n    getSubredditInfos(): void {\n        this.isLoading = true;\n        this.dashboardService.getSubredditInfos(this.search)\n            .subscribe(\n                (stream) => this.getSubredditNextCb(stream),\n                (error) => this.getSubredditErrorCb(error)\n            );\n    }\n\n    getSubredditNextCb(subreddit): void {\n        if (!subreddit) {\n            this.reset();\n        } else {\n            this.subreddit = {\n                ...subreddit,\n                created: new Date(subreddit.created_utc * 1000).toLocaleDateString()\n            };\n            this.isLoading = false;\n        }\n    }\n\n    getSubredditErrorCb(error): void {\n        if (error && error.status === 403) {\n            this.isRedditAuthed = false;\n        }\n        this.reset();\n    }\n\n    startRequest(): void {\n        this.clearRequest();\n        this.request = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getSubredditInfos(this.search);\n        })).subscribe(\n            (subreddit) => this.getSubredditNextCb(subreddit),\n            (error) => this.getSubredditErrorCb(error)\n        );\n    }\n\n    loadConfig(): void {\n        this.isLoading = true;\n        this.dashboardService.getWidgetConfig(this.id).subscribe(config => {\n            this.searchBuffer = config.query;\n            this.onSubmit();\n        }, _ => {\n            this.isLoading = false;\n        });\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.search.trim()}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Thumbnail.html":{"url":"interfaces/Thumbnail.html","title":"interface - Thumbnail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Thumbnail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/thumbnail.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Thumbnail {\n    url: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TtvStream.html":{"url":"interfaces/TtvStream.html","title":"interface - TtvStream","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TtvStream\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/ttv-stream.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        game_name\n                                \n                                \n                                        language\n                                \n                                \n                                        started_at\n                                \n                                \n                                        title\n                                \n                                \n                                        type\n                                \n                                \n                                        user_name\n                                \n                                \n                                        viewer_count\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        game_name\n                                    \n                                \n                                \n                                    \n                                        game_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        language\n                                    \n                                \n                                \n                                    \n                                        language:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        started_at\n                                    \n                                \n                                \n                                    \n                                        started_at:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_name\n                                    \n                                \n                                \n                                    \n                                        user_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewer_count\n                                    \n                                \n                                \n                                    \n                                        viewer_count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TtvStream {\n    user_name: string;\n    game_name: string;\n    type: string;\n    title: string;\n    viewer_count: number;\n    started_at: string;\n    language: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TtvStreamWatcherComponent.html":{"url":"components/TtvStreamWatcherComponent.html","title":"component - TtvStreamWatcherComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TtvStreamWatcherComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    DashboardWidget\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-ttv-stream-watcher\n            \n\n            \n                styleUrls\n                ./ttv-stream-watcher.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./ttv-stream-watcher.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                faTwitch\n                            \n                            \n                                id\n                            \n                            \n                                isLoading\n                            \n                            \n                                isTwitchAuthed\n                            \n                            \n                                refreshRate\n                            \n                            \n                                request\n                            \n                            \n                                search\n                            \n                            \n                                searchBuffer\n                            \n                            \n                                stream\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearRequest\n                            \n                            \n                                getStreamErrorCb\n                            \n                            \n                                getStreamInfos\n                            \n                            \n                                getStreamNextCb\n                            \n                            \n                                loadConfig\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onLoginClick\n                            \n                            \n                                onSubmit\n                            \n                            \n                                reset\n                            \n                            \n                                saveConfig\n                            \n                            \n                                setRefreshRate\n                            \n                            \n                                startRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearRequest\n                        \n                        \n                    \n                \n            \n            \n                \nclearRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStreamErrorCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetStreamErrorCb(error)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStreamInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetStreamInfos()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStreamNextCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetStreamNextCb(stream)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \nloadConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onLoginClick\n                        \n                        \n                    \n                \n            \n            \n                \nonLoginClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startRequest\n                        \n                        \n                    \n                \n            \n            \n                \nstartRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            faTwitch\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : faTwitch\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isTwitchAuthed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshRate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchBuffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stream\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TtvStream\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { interval, Subscription } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { faTwitch } from '@fortawesome/free-brands-svg-icons';\nimport { TtvStream } from '../../../../shared/interfaces/ttv-stream';\n\n@Component({\n    selector: 'app-ttv-stream-watcher',\n    templateUrl: './ttv-stream-watcher.component.html',\n    styleUrls: [ './ttv-stream-watcher.component.scss' ]\n})\nexport class TtvStreamWatcherComponent implements OnInit,\n                                                  OnDestroy,\n                                                  DashboardWidget {\n\n    id: string;\n    refreshRate: number;\n\n    isTwitchAuthed = false;\n    isLoading = true;\n    searchBuffer = '';\n    search = '';\n    stream: TtvStream = null;\n    request: Subscription;\n    faTwitch = faTwitch;\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate === rate) {\n            return;\n        }\n        this.refreshRate = rate;\n        if (this.search.trim()) {\n            this.startRequest();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.dashboardService.isTwitchLogged().subscribe(isAuthenticated => {\n            this.isTwitchAuthed = isAuthenticated.authenticated;\n            if (!this.isTwitchAuthed) {\n                this.isLoading = false;\n                return;\n            }\n            this.loadConfig();\n        }, _ => {\n            this.isLoading = false;\n            this.isTwitchAuthed = false;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.clearRequest();\n    }\n\n    onLoginClick(): void {\n        window.location.href = '/api/connect/twitch';\n    }\n\n    reset(): void {\n        this.clearRequest();\n        this.search = '';\n        this.isLoading = false;\n        this.stream = null;\n        this.saveConfig();\n    }\n\n    clearRequest(): void {\n        if (this.request && !this.request.closed) {\n            this.request.unsubscribe();\n            this.request = null;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.searchBuffer.trim() === '') {\n            this.reset();\n            return;\n        }\n\n        this.search = this.searchBuffer;\n        if (!this.request) {\n            this.startRequest();\n        }\n        this.getStreamInfos();\n        this.saveConfig();\n    }\n\n    getStreamInfos(): void {\n        this.isLoading = true;\n        this.dashboardService.getTwitchStreamInfos(this.search)\n            .subscribe(\n                (stream) => this.getStreamNextCb(stream),\n                (error) => this.getStreamErrorCb(error)\n            );\n    }\n\n    getStreamNextCb(stream): void {\n        if (!stream) {\n            this.reset();\n        } else {\n            stream.started_at = new Date(stream.started_at).toLocaleDateString();\n            this.stream = stream;\n            this.isLoading = false;\n        }\n    }\n\n    getStreamErrorCb(error): void {\n        if (error && error.status === 403) {\n            this.isTwitchAuthed = false;\n        }\n        this.reset();\n    }\n\n    startRequest(): void {\n        this.clearRequest();\n        this.request = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getTwitchStreamInfos(this.search);\n        })).subscribe(\n            (stream) => this.getStreamNextCb(stream),\n            (error) => this.getStreamErrorCb(error)\n        );\n    }\n\n    loadConfig(): void {\n        this.isLoading = true;\n        this.dashboardService.getWidgetConfig(this.id).subscribe(config => {\n            this.searchBuffer = config.query;\n            this.onSubmit();\n        }, _ => {\n            this.isLoading = false;\n        });\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.search.trim()}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n}\n\n    \n\n    \n        \n    \n\n\n    \n        \n            \n            &nbsp; Login with Twitch\n        \n    \n\n\n    \n        \n            \n                \n                    \n                    \n                \n            \n        \n    \n    \n        Nothing to display\n    \n    \n        \n            \n            \n                #\n                Value\n            \n            \n            \n            \n                Title\n                {{stream.title}}\n            \n            \n                Channel\n                {{stream.user_name}}\n            \n            \n                Viewers\n                {{stream.viewer_count}}\n            \n            \n                Game\n                {{stream.game_name}}\n            \n            \n                Language\n                {{stream.language}}\n            \n            \n                Started at\n                {{stream.started_at}}\n            \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./ttv-stream-watcher.component.scss\n                \n                @import '../../../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../../../themes';\n\n@include nb-install-component() {\n    height: 100% !important;\n    overflow: auto;\n    position: relative;\n\n    nb-card, nb-card-body {\n        margin-bottom: 0;\n    }\n    nb-card-body {\n        padding: 0.5rem 1.5rem;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                          Login with Twitch                                                                                                                                                Nothing to display                                                        #                Value                                                                Title                {{stream.title}}                                        Channel                {{stream.user_name}}                                        Viewers                {{stream.viewer_count}}                                        Game                {{stream.game_name}}                                        Language                {{stream.language}}                                        Started at                {{stream.started_at}}                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'TtvStreamWatcherComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TtvUser.html":{"url":"interfaces/TtvUser.html","title":"interface - TtvUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TtvUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/ttv-user.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        broadcaster_type\n                                \n                                \n                                        created_at\n                                \n                                \n                                        description\n                                \n                                \n                                        display_name\n                                \n                                \n                                        profile_image_url\n                                \n                                \n                                        view_count\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        broadcaster_type\n                                    \n                                \n                                \n                                    \n                                        broadcaster_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                    \n                                \n                                \n                                    \n                                        created_at:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display_name\n                                    \n                                \n                                \n                                    \n                                        display_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profile_image_url\n                                    \n                                \n                                \n                                    \n                                        profile_image_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        view_count\n                                    \n                                \n                                \n                                    \n                                        view_count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TtvUser {\n    display_name: string;\n    broadcaster_type: string;\n    description: string;\n    profile_image_url: string;\n    view_count: number;\n    created_at: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TtvUserWatcherComponent.html":{"url":"components/TtvUserWatcherComponent.html","title":"component - TtvUserWatcherComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TtvUserWatcherComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    DashboardWidget\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-ttv-user-watcher\n            \n\n            \n                styleUrls\n                ./ttv-user-watcher.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./ttv-user-watcher.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                faTwitch\n                            \n                            \n                                id\n                            \n                            \n                                isLoading\n                            \n                            \n                                isTwitchAuthed\n                            \n                            \n                                refreshRate\n                            \n                            \n                                request\n                            \n                            \n                                search\n                            \n                            \n                                searchBuffer\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearRequest\n                            \n                            \n                                getUserErrorCb\n                            \n                            \n                                getUserInfos\n                            \n                            \n                                getUserNextCb\n                            \n                            \n                                loadConfig\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onLoginClick\n                            \n                            \n                                onSubmit\n                            \n                            \n                                reset\n                            \n                            \n                                saveConfig\n                            \n                            \n                                setRefreshRate\n                            \n                            \n                                startRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearRequest\n                        \n                        \n                    \n                \n            \n            \n                \nclearRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserErrorCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserErrorCb(error)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserInfos()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserNextCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserNextCb(user)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \nloadConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onLoginClick\n                        \n                        \n                    \n                \n            \n            \n                \nonLoginClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startRequest\n                        \n                        \n                    \n                \n            \n            \n                \nstartRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            faTwitch\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : faTwitch\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isTwitchAuthed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshRate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchBuffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TtvUser\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { interval, Subscription } from 'rxjs';\nimport { faTwitch } from '@fortawesome/free-brands-svg-icons';\nimport { mergeMap } from 'rxjs/operators';\nimport { TtvUser } from '../../../../shared/interfaces/ttv-user';\n\n@Component({\n    selector: 'app-ttv-user-watcher',\n    templateUrl: './ttv-user-watcher.component.html',\n    styleUrls: [ './ttv-user-watcher.component.scss' ]\n})\nexport class TtvUserWatcherComponent implements OnInit,\n                                                OnDestroy,\n                                                DashboardWidget {\n    id: string;\n    refreshRate: number;\n\n    isTwitchAuthed = false;\n    isLoading = true;\n    searchBuffer = '';\n    search = '';\n    user: TtvUser = null;\n    request: Subscription;\n    faTwitch = faTwitch;\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate === rate) {\n            return;\n        }\n        this.refreshRate = rate;\n        if (this.search.trim()) {\n            this.startRequest();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.dashboardService.isTwitchLogged().subscribe(isAuthenticated => {\n            this.isTwitchAuthed = isAuthenticated.authenticated;\n            if (!this.isTwitchAuthed) {\n                this.isLoading = false;\n                return;\n            }\n            this.loadConfig();\n        }, _ => {\n            this.isLoading = false;\n            this.isTwitchAuthed = false;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.clearRequest();\n    }\n\n    onLoginClick(): void {\n        window.location.href = '/api/connect/twitch';\n    }\n\n    reset(): void {\n        this.clearRequest();\n        this.search = '';\n        this.isLoading = false;\n        this.user = null;\n        this.saveConfig();\n    }\n\n    clearRequest(): void {\n        if (this.request && !this.request.closed) {\n            this.request.unsubscribe();\n            this.request = null;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.searchBuffer.trim() === '') {\n            this.reset();\n            return;\n        }\n\n        this.search = this.searchBuffer;\n        if (!this.request) {\n            this.startRequest();\n        }\n        this.getUserInfos();\n        this.saveConfig();\n    }\n\n    getUserInfos(): void {\n        this.isLoading = true;\n        this.dashboardService.getTwitchUserInfos(this.search)\n            .subscribe(\n                (user) => this.getUserNextCb(user),\n                (error) => this.getUserErrorCb(error)\n            );\n    }\n\n    getUserNextCb(user): void {\n        if (!user) {\n            this.reset();\n        } else {\n            user.created_at = new Date(user.created_at).toLocaleDateString();\n            this.user = user;\n            this.isLoading = false;\n        }\n    }\n\n    getUserErrorCb(error): void {\n        if (error && error.status === 403) {\n            this.isTwitchAuthed = false;\n        }\n        this.reset();\n    }\n\n    startRequest(): void {\n        this.clearRequest();\n        this.request = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getTwitchUserInfos(this.search);\n        })).subscribe(\n            (user) => this.getUserNextCb(user),\n            (error) => this.getUserErrorCb(error)\n        );\n    }\n\n    loadConfig(): void {\n        this.isLoading = true;\n        this.dashboardService.getWidgetConfig(this.id).subscribe(config => {\n            this.searchBuffer = config.query;\n            this.onSubmit();\n        }, _ => {\n            this.isLoading = false;\n        });\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.search.trim()}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n}\n\n    \n\n    \n        \n\n\n    \n        \n            \n            &nbsp; Login with Twitch\n        \n    \n\n\n    \n        \n            \n                \n                    \n                    \n                \n            \n        \n    \n    \n        Nothing to display\n    \n    \n        \n            \n                \n                    \n                        \n                    \n                \n\n                \n                    \n                        \n                            Username\n                            {{user.display_name}}\n                        \n\n                        \n                            Partner\n                            {{user.broadcaster_type === 'partner' ? 'Yes' : 'No'}}\n                        \n\n                        \n                            Views\n                            {{user.view_count}}\n                        \n\n                        \n                            Creation\n                            {{user.created_at}}\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./ttv-user-watcher.component.scss\n                \n                @import '../../../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../../../themes';\n\n@include nb-install-component() {\n    height: 100%;\n    position: relative;\n\n\n    nb-card, nb-card-body {\n        margin-bottom: 2px;\n    }\n    nb-card-body {\n        padding: 0.5rem 1.5rem;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                      Login with Twitch                                                                                                                                                Nothing to display                                                                                                                                                                                                                    Username                            {{user.display_name}}                                                                            Partner                            {{user.broadcaster_type === \\'partner\\' ? \\'Yes\\' : \\'No\\'}}                                                                            Views                            {{user.view_count}}                                                                            Creation                            {{user.created_at}}                                                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'TtvUserWatcherComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/user.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayName\n                                \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface User {\n    email: string;\n    displayName: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UsersComponent.html":{"url":"components/UsersComponent.html","title":"component - UsersComponent","body":"\n                   \n\n\n\n\n\n  Components\n  UsersComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/users/users.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-users\n            \n\n            \n                styleUrls\n                ./users.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./users.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                faTrash\n                            \n                            \n                                isLoading\n                            \n                            \n                                items\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onDeleteClick\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/users/users.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/users/users.component.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDeleteClick\n                        \n                        \n                    \n                \n            \n            \n                \nonDeleteClick(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/users/users.component.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            errorMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/users/users.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            faTrash\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : faTrash\n                        \n                    \n                        \n                            \n                                    Defined in src/app/users/users.component.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/users/users.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            items\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     NbMenuItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        {\n            title: 'Home',\n            icon: 'home-outline',\n            link: '/home',\n            home: true\n        },\n        {\n            title: 'Users',\n            icon: 'people-outline',\n            link: '/users',\n            home: false\n        }\n    ]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/users/users.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ()[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/users/users.component.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { NbMenuItem } from '@nebular/theme';\nimport { User } from '../shared/interfaces/user';\nimport { DashboardService } from '../shared/services/dashboard.service';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { Id } from '../shared/interfaces/id';\n\n@Component({\n    selector: 'app-users',\n    templateUrl: './users.component.html',\n    styleUrls: [ './users.component.scss' ]\n})\nexport class UsersComponent implements OnInit {\n\n    faTrash = faTrash;\n    items: NbMenuItem[] = [\n        {\n            title: 'Home',\n            icon: 'home-outline',\n            link: '/home',\n            home: true\n        },\n        {\n            title: 'Users',\n            icon: 'people-outline',\n            link: '/users',\n            home: false\n        }\n    ];\n    users: (User & Id)[] = [];\n    isLoading = true;\n    errorMessage = null;\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.dashboardService.getUsers().subscribe(users => {\n                this.users = users;\n                this.isLoading = false;\n            },\n            error => {\n                this.errorMessage = 'Something went wrong.';\n                this.isLoading = false;\n            });\n    }\n\n    onDeleteClick(id: string): void {\n        this.isLoading = true;\n        this.dashboardService.deleteUser(id).subscribe((users) => {\n            this.isLoading = false;\n            this.users = users;\n        }, error => {\n            this.errorMessage = 'Something went wrong.';\n            this.isLoading = false;\n        });\n    }\n\n}\n\n    \n\n    \n        \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n            \n        \n        \n            \n                {{errorMessage}}\n            \n        \n        \n            \n                \n                \n                    Action\n                    Username\n                    Email\n                \n                \n                \n                \n                    \n                        \n                    \n                    {{user.displayName}}\n                    {{user.email}}\n                \n                \n            \n        \n    \n\n    \n        \n    \n\n\n\n    \n\n    \n                \n                    ./users.component.scss\n                \n                nb-icon:hover {\n    color: red;\n    cursor: pointer;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                    {{errorMessage}}                                                                                            Action                    Username                    Email                                                                                                                                                    {{user.displayName}}                    {{user.email}}                                                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'UsersComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_declarations\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nUsersComponent\n\nUsersComponent\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersComponent->UsersModule\n\n\n\n\n\nGridModule\n\nGridModule\n\nUsersModule -->\n\nGridModule->UsersModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nUsersModule -->\n\nHomeModule->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            UsersComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GridModule\n                        \n                        \n                            HomeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UsersComponent } from './users.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n    NbActionsModule,\n    NbCardModule,\n    NbContextMenuModule,\n    NbFormFieldModule,\n    NbIconModule,\n    NbLayoutModule,\n    NbMenuModule,\n    NbSidebarModule,\n    NbSpinnerModule,\n    NbUserModule\n} from '@nebular/theme';\nimport { GridModule } from '../home/grid/grid.module';\nimport { NbEvaIconsModule } from '@nebular/eva-icons';\nimport { HomeModule } from '../home/home.module';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\n\n@NgModule({\n    declarations: [ UsersComponent ],\n    imports: [\n        CommonModule,\n        GridModule,\n        NbLayoutModule,\n        NbSidebarModule,\n        NbMenuModule,\n        NgbModule,\n        NbActionsModule,\n        NbUserModule,\n        NbContextMenuModule,\n        NbIconModule,\n        NbEvaIconsModule,\n        HomeModule,\n        NbSpinnerModule,\n        NbCardModule,\n        FontAwesomeModule,\n        NbFormFieldModule\n    ]\n})\nexport class UsersModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VerifyAuthComponent.html":{"url":"components/VerifyAuthComponent.html","title":"component - VerifyAuthComponent","body":"\n                   \n\n\n\n\n\n  Components\n  VerifyAuthComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/auth/verify-auth/verify-auth.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-verify-auth\n            \n\n            \n                styleUrls\n                ./verify-auth.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./verify-auth.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient, authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/auth/verify-auth/verify-auth.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/auth/verify-auth/verify-auth.component.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthService } from '../../shared/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-verify-auth',\n    templateUrl: './verify-auth.component.html',\n    styleUrls: [ './verify-auth.component.scss' ]\n})\nexport class VerifyAuthComponent implements OnInit {\n\n    constructor(private httpClient: HttpClient, private authService: AuthService, private router: Router) {\n    }\n\n    ngOnInit(): void {\n        this.httpClient.get('/api/auth/ping', {\n            withCredentials: true\n        }).subscribe(async (_) => {\n            this.authService.setIsLogin(true);\n            await this.router.navigateByUrl('/home');\n        }, async (error) => {\n            this.authService.setIsLogin(false);\n            await this.router.navigateByUrl('/auth/login');\n        });\n    }\n\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./verify-auth.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'VerifyAuthComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Weather.html":{"url":"interfaces/Weather.html","title":"interface - Weather","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Weather\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/weather.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        day\n                                \n                                \n                                        feelslike\n                                \n                                \n                                        humidity\n                                \n                                \n                                        imageUrl\n                                \n                                \n                                        observationpoint\n                                \n                                \n                                        observationtime\n                                \n                                \n                                        skytext\n                                \n                                \n                                        temperature\n                                \n                                \n                                        winddisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        day\n                                    \n                                \n                                \n                                    \n                                        day:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        feelslike\n                                    \n                                \n                                \n                                    \n                                        feelslike:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        humidity\n                                    \n                                \n                                \n                                    \n                                        humidity:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageUrl\n                                    \n                                \n                                \n                                    \n                                        imageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        observationpoint\n                                    \n                                \n                                \n                                    \n                                        observationpoint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        observationtime\n                                    \n                                \n                                \n                                    \n                                        observationtime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skytext\n                                    \n                                \n                                \n                                    \n                                        skytext:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        temperature\n                                    \n                                \n                                \n                                    \n                                        temperature:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winddisplay\n                                    \n                                \n                                \n                                    \n                                        winddisplay:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Weather {\n    observationpoint: string;\n    temperature: string;\n    skytext: string;\n    feelslike: string;\n    humidity: string;\n    day: string;\n    imageUrl: string;\n    date: string;\n    observationtime: string;\n    winddisplay: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/WeatherComponent.html":{"url":"components/WeatherComponent.html","title":"component - WeatherComponent","body":"\n                   \n\n\n\n\n\n  Components\n  WeatherComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/widgets/weather/weather.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    DashboardWidget\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-weather\n            \n\n            \n                styleUrls\n                ./weather.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./weather.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                isLoading\n                            \n                            \n                                refreshRate\n                            \n                            \n                                request\n                            \n                            \n                                search\n                            \n                            \n                                searchBuffer\n                            \n                            \n                                weather\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearRequest\n                            \n                            \n                                getWeatherErrorCb\n                            \n                            \n                                getWeatherInfos\n                            \n                            \n                                getWeatherNextCb\n                            \n                            \n                                loadConfig\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                            \n                                reset\n                            \n                            \n                                saveConfig\n                            \n                            \n                                setRefreshRate\n                            \n                            \n                                startRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/widgets/weather/weather.component.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearRequest\n                        \n                        \n                    \n                \n            \n            \n                \nclearRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWeatherErrorCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetWeatherErrorCb(error)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWeatherInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetWeatherInfos()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getWeatherNextCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetWeatherNextCb(weather)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    weather\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \nloadConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startRequest\n                        \n                        \n                    \n                \n            \n            \n                \nstartRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshRate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchBuffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Weather\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/weather/weather.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { interval, Subscription } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { Weather } from '../../../../shared/interfaces/weather';\n\n@Component({\n    selector: 'app-weather',\n    templateUrl: './weather.component.html',\n    styleUrls: [ './weather.component.scss' ]\n})\nexport class WeatherComponent implements OnInit,\n                                         OnDestroy,\n                                         DashboardWidget {\n    id: string;\n    refreshRate: number;\n\n    isLoading = true;\n    searchBuffer = '';\n    search = '';\n    weather: Weather = null;\n    request: Subscription;\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate === rate) {\n            return;\n        }\n        this.refreshRate = rate;\n        if (this.search.trim()) {\n            this.startRequest();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.loadConfig();\n    }\n\n    ngOnDestroy(): void {\n        this.clearRequest();\n    }\n\n    reset(): void {\n        this.clearRequest();\n        this.search = '';\n        this.isLoading = false;\n        this.weather = null;\n        this.saveConfig();\n    }\n\n    clearRequest(): void {\n        if (this.request && !this.request.closed) {\n            this.request.unsubscribe();\n            this.request = null;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.searchBuffer.trim() === '') {\n            this.reset();\n            return;\n        }\n\n        this.search = this.searchBuffer;\n        if (!this.request) {\n            this.startRequest();\n        }\n        this.getWeatherInfos();\n        this.saveConfig();\n    }\n\n    getWeatherInfos(): void {\n        this.isLoading = true;\n        this.dashboardService.getWeatherInfosByCity(this.search)\n            .subscribe(\n                (channel) => this.getWeatherNextCb(channel),\n                (error) => this.getWeatherErrorCb(error)\n            );\n    }\n\n    getWeatherNextCb(weather): void {\n        if (!weather) {\n            this.reset();\n        } else {\n            this.weather = {\n                ...weather[0],\n                date: new Date(weather[0].date + ` ${weather[0].observationtime}`).toLocaleString()\n            };\n            this.isLoading = false;\n        }\n    }\n\n    getWeatherErrorCb(error): void {\n        this.reset();\n    }\n\n    startRequest(): void {\n        this.clearRequest();\n        this.request = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getWeatherInfosByCity(this.search);\n        })).subscribe(\n            (weather) => this.getWeatherNextCb(weather),\n            (error) => this.getWeatherErrorCb(error)\n        );\n    }\n\n    loadConfig(): void {\n        this.isLoading = true;\n        this.dashboardService.getWidgetConfig(this.id).subscribe(config => {\n            this.searchBuffer = config.query;\n            this.onSubmit();\n        }, _ => {\n            this.isLoading = false;\n        });\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.search.trim()}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n}\n\n    \n\n    \n        \n\n\n    \n        \n            \n                \n                    \n                    \n                \n            \n        \n    \n    \n        Nothing to display\n    \n    \n        \n            \n            {{weather.temperature}}°C\n            {{weather.skytext}}\n            {{weather.observationpoint}}\n        \n        \n            \n            \n                #\n                Value\n            \n            \n            \n            \n                Feels like\n                {{weather.feelslike}}°C\n            \n            \n                Humidity\n                {{weather.humidity}}%\n            \n            \n                Date\n                {{weather.date}}\n            \n            \n                Wind speed\n                {{weather.winddisplay}}\n            \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./weather.component.scss\n                \n                @import '../../../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../../../themes';\n\n@include nb-install-component() {\n    height: 100%;\n    position: relative;\n    overflow: auto;\n\n    nb-card, nb-card-body {\n        margin-bottom: 2px;\n    }\n    nb-card-body {\n        padding: 0.5rem 1.5rem;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                    Nothing to display                                        {{weather.temperature}}°C            {{weather.skytext}}            {{weather.observationpoint}}                                                        #                Value                                                                Feels like                {{weather.feelslike}}°C                                        Humidity                {{weather.humidity}}%                                        Date                {{weather.date}}                                        Wind speed                {{weather.winddisplay}}                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'WeatherComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WidgetConfig.html":{"url":"interfaces/WidgetConfig.html","title":"interface - WidgetConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WidgetConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/widget-config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        query\n                                \n                                \n                                        refreshRate\n                                \n                                \n                                        type\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                    \n                                \n                                \n                                    \n                                        query:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshRate\n                                    \n                                \n                                \n                                    \n                                        refreshRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface WidgetConfig {\n    id: string;\n    type: string;\n    x: number;\n    y: number;\n    refreshRate: number;\n    query: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WidgetGridConfig.html":{"url":"interfaces/WidgetGridConfig.html","title":"interface - WidgetGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WidgetGridConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/widget-grid-config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        refreshRate\n                                \n                                \n                                        type\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshRate\n                                    \n                                \n                                \n                                    \n                                        refreshRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface WidgetGridConfig {\n    id: string;\n    type: string;\n    x: number;\n    y: number;\n    refreshRate: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WidgetProps.html":{"url":"interfaces/WidgetProps.html","title":"interface - WidgetProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WidgetProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/home/grid/widgets/dashboard-widgets.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cols\n                                \n                                \n                                        desc\n                                \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                                \n                                        rows\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cols\n                                    \n                                \n                                \n                                    \n                                        cols:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        desc\n                                    \n                                \n                                \n                                    \n                                        desc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rows\n                                    \n                                \n                                \n                                    \n                                        rows:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { YtChannelWatcherComponent } from './yt-channel-watcher/yt-channel-watcher.component';\nimport { YtVideoWatcherComponent } from './yt-video-watcher/yt-video-watcher.component';\nimport { TtvUserWatcherComponent } from './ttv-user-watcher/ttv-user-watcher.component';\nimport { TtvStreamWatcherComponent } from './ttv-stream-watcher/ttv-stream-watcher.component';\nimport { MsCalendarComponent } from './ms-calendar/ms-calendar.component';\nimport { MsMailComponent } from './ms-mail-component/ms-mail.component';\nimport { SpotifyArtistComponent } from './spotify-artist/spotify-artist.component';\nimport { RdSubredditWatcherComponent } from './rd-subreddit-watcher/rd-subreddit-watcher.component';\nimport { WeatherComponent } from './weather/weather.component';\n\nexport interface WidgetProps {\n    id: string;\n    name: string;\n    desc: string;\n    cols: number;\n    rows: number;\n}\n\nexport interface DashboardWidget {\n    id: string;\n\n    setRefreshRate(rate: number): void;\n}\n\nexport const widgetComponents = {\n    msCalendar: MsCalendarComponent,\n    msMail: MsMailComponent,\n    rdSubredditWatcher: RdSubredditWatcherComponent,\n    spotifyArtist: SpotifyArtistComponent,\n    ttvStreamWatcher: TtvStreamWatcherComponent,\n    ttvUserWatcher: TtvUserWatcherComponent,\n    weather: WeatherComponent,\n    ytChannelWatcher: YtChannelWatcherComponent,\n    ytVideoWatcher: YtVideoWatcherComponent\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WidgetQueryConfig.html":{"url":"interfaces/WidgetQueryConfig.html","title":"interface - WidgetQueryConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WidgetQueryConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/widget-query-config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        query\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                    \n                                \n                                \n                                    \n                                        query:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface WidgetQueryConfig {\n    id: string;\n    query: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/WidgetRenderDirective.html":{"url":"directives/WidgetRenderDirective.html","title":"directive - WidgetRenderDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  WidgetRenderDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/home/grid/shared/widget-render.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                            OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [appWidgetRender]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                component\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                componentRef\n                            \n                            \n                                widgetId\n                            \n                            \n                                widgetRefreshRate\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(container: ViewContainerRef, resolver: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/shared/widget-render.directive.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        resolver\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        componentRef\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/home/grid/shared/widget-render.directive.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        widgetId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/home/grid/shared/widget-render.directive.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        widgetRefreshRate\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/home/grid/shared/widget-render.directive.ts:19\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/shared/widget-render.directive.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ComponentRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/shared/widget-render.directive.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import {\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ViewContainerRef\n} from '@angular/core';\nimport { DashboardWidget, widgetComponents } from '../widgets/dashboard-widgets';\n\n@Directive({\n    selector: '[appWidgetRender]'\n})\nexport class WidgetRenderDirective implements OnChanges {\n\n    @Input() componentRef: string;\n    @Input() widgetId: string;\n    @Input() widgetRefreshRate: number;\n\n    component: ComponentRef;\n\n    constructor(private container: ViewContainerRef, private resolver: ComponentFactoryResolver) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.componentRef?.isFirstChange() === true) {\n            const component = widgetComponents[this.componentRef];\n\n            if (component && !this.component) {\n                const factory = this.resolver.resolveComponentFactory(component);\n\n                this.component = this.container.createComponent(factory);\n                this.component.instance.id = this.widgetId;\n                this.component.instance.setRefreshRate(this.widgetRefreshRate);\n            }\n        }\n        if (changes.widgetRefreshRate?.isFirstChange() === false) {\n            this.component.instance.setRefreshRate(this.widgetRefreshRate);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/YtChannel.html":{"url":"interfaces/YtChannel.html","title":"interface - YtChannel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  YtChannel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/yt-channel.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        country\n                                \n                                \n                                        description\n                                \n                                \n                                        statistics\n                                \n                                \n                                        thumbnail\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statistics\n                                    \n                                \n                                \n                                    \n                                        statistics:         YtChannelSwagStats\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         YtChannelSwagStats\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thumbnail\n                                    \n                                \n                                \n                                    \n                                        thumbnail:         Thumbnail\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Thumbnail\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Thumbnail } from './thumbnail';\n\ninterface YtChannelSwagStats {\n    viewCount: number;\n    subscriberCount: number;\n    videoCount: number;\n}\n\nexport interface YtChannel {\n    title: string;\n    description: string;\n    thumbnail: Thumbnail;\n    country: string;\n    statistics: YtChannelSwagStats;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/YtChannelSwagStats.html":{"url":"interfaces/YtChannelSwagStats.html","title":"interface - YtChannelSwagStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  YtChannelSwagStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/yt-channel.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        subscriberCount\n                                \n                                \n                                        videoCount\n                                \n                                \n                                        viewCount\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        subscriberCount\n                                    \n                                \n                                \n                                    \n                                        subscriberCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videoCount\n                                    \n                                \n                                \n                                    \n                                        videoCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewCount\n                                    \n                                \n                                \n                                    \n                                        viewCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Thumbnail } from './thumbnail';\n\ninterface YtChannelSwagStats {\n    viewCount: number;\n    subscriberCount: number;\n    videoCount: number;\n}\n\nexport interface YtChannel {\n    title: string;\n    description: string;\n    thumbnail: Thumbnail;\n    country: string;\n    statistics: YtChannelSwagStats;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/YtChannelWatcherComponent.html":{"url":"components/YtChannelWatcherComponent.html","title":"component - YtChannelWatcherComponent","body":"\n                   \n\n\n\n\n\n  Components\n  YtChannelWatcherComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    DashboardWidget\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-yt-subscriber-count\n            \n\n            \n                styleUrls\n                ./yt-channel-watcher.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./yt-channel-watcher.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channel\n                            \n                            \n                                faGoogle\n                            \n                            \n                                id\n                            \n                            \n                                isGoogleAuthed\n                            \n                            \n                                isLoading\n                            \n                            \n                                refreshRate\n                            \n                            \n                                request\n                            \n                            \n                                search\n                            \n                            \n                                searchBuffer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearRequest\n                            \n                            \n                                getChannelErrorCb\n                            \n                            \n                                getChannelInfos\n                            \n                            \n                                getChannelNextCb\n                            \n                            \n                                loadConfig\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onLoginClick\n                            \n                            \n                                onSubmit\n                            \n                            \n                                reset\n                            \n                            \n                                saveConfig\n                            \n                            \n                                setRefreshRate\n                            \n                            \n                                startRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearRequest\n                        \n                        \n                    \n                \n            \n            \n                \nclearRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getChannelErrorCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetChannelErrorCb(error)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getChannelInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetChannelInfos()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getChannelNextCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetChannelNextCb(channel)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channel\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \nloadConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onLoginClick\n                        \n                        \n                    \n                \n            \n            \n                \nonLoginClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startRequest\n                        \n                        \n                    \n                \n            \n            \n                \nstartRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            channel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         YtChannel\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            faGoogle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : faGoogle\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isGoogleAuthed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshRate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchBuffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons';\nimport { interval, Subscription } from 'rxjs';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { mergeMap } from 'rxjs/operators';\nimport { YtChannel } from '../../../../shared/interfaces/yt-channel';\n\n@Component({\n    selector: 'app-yt-subscriber-count',\n    templateUrl: './yt-channel-watcher.component.html',\n    styleUrls: [ './yt-channel-watcher.component.scss' ]\n})\nexport class YtChannelWatcherComponent implements OnInit,\n                                                  OnDestroy,\n                                                  DashboardWidget {\n    id: string;\n    refreshRate: number;\n\n    isGoogleAuthed = false;\n    isLoading = true;\n    searchBuffer = '';\n    search = '';\n    channel: YtChannel = null;\n    request: Subscription;\n    faGoogle = faGoogle;\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate === rate) {\n            return;\n        }\n        this.refreshRate = rate;\n        if (this.search.trim()) {\n            this.startRequest();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.dashboardService.isGoogleLogged().subscribe(isAuthenticated => {\n            this.isGoogleAuthed = isAuthenticated.authenticated;\n            if (!this.isGoogleAuthed) {\n                this.isLoading = false;\n                return;\n            }\n            this.loadConfig();\n        }, _ => {\n            this.isLoading = false;\n            this.isGoogleAuthed = false;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.clearRequest();\n    }\n\n    onLoginClick(): void {\n        window.location.href = '/api/connect/google';\n    }\n\n    reset(): void {\n        this.clearRequest();\n        this.search = '';\n        this.isLoading = false;\n        this.channel = null;\n        this.saveConfig();\n    }\n\n    clearRequest(): void {\n        if (this.request && !this.request.closed) {\n            this.request.unsubscribe();\n            this.request = null;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.searchBuffer.trim() === '') {\n            this.reset();\n            return;\n        }\n\n        this.search = this.searchBuffer;\n        if (!this.request) {\n            this.startRequest();\n        }\n        this.getChannelInfos();\n        this.saveConfig();\n    }\n\n    getChannelInfos(): void {\n        this.isLoading = true;\n        this.dashboardService.getYoutubeChannelInfos(this.search)\n            .subscribe(\n                (channel) => this.getChannelNextCb(channel),\n                (error) => this.getChannelErrorCb(error)\n            );\n    }\n\n    getChannelNextCb(channel): void {\n        if (!channel) {\n            this.reset();\n        } else {\n            this.channel = channel;\n            this.isLoading = false;\n        }\n    }\n\n    getChannelErrorCb(error): void {\n        if (error && error.status === 403) {\n            this.isGoogleAuthed = false;\n        }\n        this.reset();\n    }\n\n    startRequest(): void {\n        this.clearRequest();\n        this.request = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getYoutubeChannelInfos(this.search);\n        })).subscribe(\n            (channel) => this.getChannelNextCb(channel),\n            (error) => this.getChannelErrorCb(error)\n        );\n    }\n\n    loadConfig(): void {\n        this.isLoading = true;\n        this.dashboardService.getWidgetConfig(this.id).subscribe(config => {\n            this.searchBuffer = config.query;\n            this.onSubmit();\n        }, _ => {\n            this.isLoading = false;\n        });\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.search.trim()}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n\n}\n\n    \n\n    \n        \n\n\n    \n        \n            \n            &nbsp; Login with Google\n        \n    \n\n\n    \n        \n            \n                \n                    \n                    \n                \n            \n        \n    \n    \n        Nothing to display\n    \n    \n        \n            \n                \n                    \n                        \n                    \n                \n\n                \n                    \n                        \n                            Username\n                            {{channel.title}}\n                        \n\n                        \n                            Country\n                            {{channel.country}}\n                        \n\n                        \n                            Views\n                            {{channel.statistics.viewCount}}\n                        \n\n                        \n                            Subs\n                            {{channel.statistics.subscriberCount}}\n                        \n                        \n                            Videos\n                            {{channel.statistics.videoCount}}\n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./yt-channel-watcher.component.scss\n                \n                @import '../../../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../../../themes';\n\n@include nb-install-component() {\n    height: 100%;\n    position: relative;\n\n    nb-card, nb-card-body {\n        margin-bottom: 2px;\n    }\n    nb-card-body {\n        padding: 0.5rem 1.5rem;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                      Login with Google                                                                                                                                                Nothing to display                                                                                                                                                                                                                    Username                            {{channel.title}}                                                                            Country                            {{channel.country}}                                                                            Views                            {{channel.statistics.viewCount}}                                                                            Subs                            {{channel.statistics.subscriberCount}}                                                                            Videos                            {{channel.statistics.videoCount}}                                                                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'YtChannelWatcherComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/YtVideo.html":{"url":"interfaces/YtVideo.html","title":"interface - YtVideo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  YtVideo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/yt-video.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        channelTitle\n                                \n                                \n                                        description\n                                \n                                \n                                        statistics\n                                \n                                \n                                        thumbnail\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channelTitle\n                                    \n                                \n                                \n                                    \n                                        channelTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statistics\n                                    \n                                \n                                \n                                    \n                                        statistics:         YtVideoSwagStats\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         YtVideoSwagStats\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thumbnail\n                                    \n                                \n                                \n                                    \n                                        thumbnail:         Thumbnail\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Thumbnail\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Thumbnail } from './thumbnail';\n\ninterface YtVideoSwagStats {\n    viewCount: number;\n    likeCount: number;\n    dislikeCount: number;\n    commentCount: number;\n    favoriteCount: number;\n}\n\nexport interface YtVideo {\n    title: string;\n    description: string;\n    thumbnail: Thumbnail;\n    channelTitle: string;\n    statistics: YtVideoSwagStats;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/YtVideoSwagStats.html":{"url":"interfaces/YtVideoSwagStats.html","title":"interface - YtVideoSwagStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  YtVideoSwagStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/interfaces/yt-video.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        commentCount\n                                \n                                \n                                        dislikeCount\n                                \n                                \n                                        favoriteCount\n                                \n                                \n                                        likeCount\n                                \n                                \n                                        viewCount\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        commentCount\n                                    \n                                \n                                \n                                    \n                                        commentCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dislikeCount\n                                    \n                                \n                                \n                                    \n                                        dislikeCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favoriteCount\n                                    \n                                \n                                \n                                    \n                                        favoriteCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likeCount\n                                    \n                                \n                                \n                                    \n                                        likeCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewCount\n                                    \n                                \n                                \n                                    \n                                        viewCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Thumbnail } from './thumbnail';\n\ninterface YtVideoSwagStats {\n    viewCount: number;\n    likeCount: number;\n    dislikeCount: number;\n    commentCount: number;\n    favoriteCount: number;\n}\n\nexport interface YtVideo {\n    title: string;\n    description: string;\n    thumbnail: Thumbnail;\n    channelTitle: string;\n    statistics: YtVideoSwagStats;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/YtVideoWatcherComponent.html":{"url":"components/YtVideoWatcherComponent.html","title":"component - YtVideoWatcherComponent","body":"\n                   \n\n\n\n\n\n  Components\n  YtVideoWatcherComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    DashboardWidget\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-yt-video-watcher\n            \n\n            \n                styleUrls\n                ./yt-video-watcher.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./yt-video-watcher.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                faComment\n                            \n                            \n                                faGoogle\n                            \n                            \n                                faThumbDown\n                            \n                            \n                                faThumbUp\n                            \n                            \n                                id\n                            \n                            \n                                isGoogleAuthed\n                            \n                            \n                                isLoading\n                            \n                            \n                                refreshRate\n                            \n                            \n                                request\n                            \n                            \n                                search\n                            \n                            \n                                searchBuffer\n                            \n                            \n                                video\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearRequest\n                            \n                            \n                                getVideoErrorCb\n                            \n                            \n                                getVideoInfos\n                            \n                            \n                                getVideoNextCb\n                            \n                            \n                                loadConfig\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onLoginClick\n                            \n                            \n                                onSubmit\n                            \n                            \n                                reset\n                            \n                            \n                                saveConfig\n                            \n                            \n                                setRefreshRate\n                            \n                            \n                                startRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dashboardService: DashboardService)\n                    \n                \n                        \n                            \n                                Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dashboardService\n                                                  \n                                                        \n                                                                        DashboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearRequest\n                        \n                        \n                    \n                \n            \n            \n                \nclearRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVideoErrorCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetVideoErrorCb(error)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVideoInfos\n                        \n                        \n                    \n                \n            \n            \n                \ngetVideoInfos()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVideoNextCb\n                        \n                        \n                    \n                \n            \n            \n                \ngetVideoNextCb(video)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    video\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \nloadConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onLoginClick\n                        \n                        \n                    \n                \n            \n            \n                \nonLoginClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsaveConfig()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRefreshRate\n                        \n                        \n                    \n                \n            \n            \n                \nsetRefreshRate(rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startRequest\n                        \n                        \n                    \n                \n            \n            \n                \nstartRequest()\n                \n            \n\n\n            \n                \n                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            faComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : faComment\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            faGoogle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : faGoogle\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            faThumbDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : faThumbsDown\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            faThumbUp\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : faThumbsUp\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isGoogleAuthed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            refreshRate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            searchBuffer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            video\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         YtVideo\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { DashboardService } from '../../../../shared/services/dashboard.service';\nimport { interval, Subscription } from 'rxjs';\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons';\nimport { DashboardWidget } from '../dashboard-widgets';\nimport { faComment, faThumbsDown, faThumbsUp } from '@fortawesome/free-solid-svg-icons';\nimport { mergeMap } from 'rxjs/operators';\nimport { YtVideo } from '../../../../shared/interfaces/yt-video';\n\n@Component({\n    selector: 'app-yt-video-watcher',\n    templateUrl: './yt-video-watcher.component.html',\n    styleUrls: [ './yt-video-watcher.component.scss' ]\n})\nexport class YtVideoWatcherComponent implements OnInit,\n                                                OnDestroy,\n                                                DashboardWidget {\n    id: string;\n    refreshRate: number;\n\n    isGoogleAuthed = false;\n    isLoading = true;\n    searchBuffer = '';\n    search = '';\n    video: YtVideo = null;\n    request: Subscription;\n    faGoogle = faGoogle;\n    faThumbUp = faThumbsUp;\n    faThumbDown = faThumbsDown;\n    faComment = faComment;\n\n    setRefreshRate(rate: number): void {\n        if (this.refreshRate === rate) {\n            return;\n        }\n        this.refreshRate = rate;\n        if (this.search.trim()) {\n            this.startRequest();\n        }\n    }\n\n    constructor(private dashboardService: DashboardService) {\n    }\n\n    ngOnInit(): void {\n        this.dashboardService.isGoogleLogged().subscribe(isAuthenticated => {\n            this.isGoogleAuthed = isAuthenticated.authenticated;\n            if (!this.isGoogleAuthed) {\n                this.isLoading = false;\n                return;\n            }\n            this.loadConfig();\n        }, _ => {\n            this.isLoading = false;\n            this.isGoogleAuthed = false;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.clearRequest();\n    }\n\n    onLoginClick(): void {\n        window.location.href = '/api/connect/google';\n    }\n\n    reset(): void {\n        this.clearRequest();\n        this.search = '';\n        this.isLoading = false;\n        this.video = null;\n        this.saveConfig();\n    }\n\n    clearRequest(): void {\n        if (this.request && !this.request.closed) {\n            this.request.unsubscribe();\n            this.request = null;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.searchBuffer.trim() === '') {\n            this.reset();\n            return;\n        }\n\n        this.search = this.searchBuffer;\n        if (!this.request) {\n            this.startRequest();\n        }\n        this.getVideoInfos();\n        this.saveConfig();\n    }\n\n    getVideoInfos(): void {\n        this.isLoading = true;\n        this.dashboardService.getYoutubeVideoInfos(this.search)\n            .subscribe(\n                (video) => this.getVideoNextCb(video),\n                (error) => this.getVideoErrorCb(error)\n            );\n    }\n\n    getVideoNextCb(video): void {\n        if (!video) {\n            this.reset();\n        } else {\n            this.video = video;\n            this.isLoading = false;\n        }\n    }\n\n    getVideoErrorCb(error): void {\n        if (error && error.status === 403) {\n            this.isGoogleAuthed = false;\n        }\n        this.reset();\n    }\n\n    startRequest(): void {\n        this.clearRequest();\n        this.request = interval(this.refreshRate * 1000).pipe(mergeMap(() => {\n            return this.dashboardService.getYoutubeVideoInfos(this.search);\n        })).subscribe(\n            (video) => this.getVideoNextCb(video),\n            (error) => this.getVideoErrorCb(error)\n        );\n    }\n\n    loadConfig(): void {\n        this.isLoading = true;\n        this.dashboardService.getWidgetConfig(this.id).subscribe(config => {\n            this.searchBuffer = config.query;\n            this.onSubmit();\n        }, _ => {\n            this.isLoading = false;\n        });\n    }\n\n    saveConfig(): void {\n        this.dashboardService.saveQueryConfig({id: this.id, query: this.search.trim()}).subscribe({\n            error: err => {\n                console.error(err);\n            }\n        });\n    }\n}\n\n    \n\n    \n        \n\n\n    \n        \n            \n            &nbsp; Login with Google\n        \n    \n\n\n    \n        \n            \n                \n                    \n                    \n                \n            \n        \n    \n    \n        Nothing to display\n    \n    \n        \n            \n        \n        \n            \n            \n                #\n                Value\n            \n            \n            \n            \n                Title\n                {{video.title}}\n            \n            \n                Channel\n                {{video.channelTitle}}\n            \n            \n                Views\n                {{video.statistics.viewCount}}\n            \n            \n                \n                    \n                    Likes\n                \n                {{video.statistics.likeCount}}\n            \n            \n                \n                    \n                    Dislikes\n                \n                {{video.statistics.dislikeCount}}\n            \n            \n                \n                    \n                    Comments\n                \n                {{video.statistics.commentCount}}\n            \n            \n        \n    \n\n\n    \n\n    \n                \n                    ./yt-video-watcher.component.scss\n                \n                @import '../../../../../../node_modules/bootstrap/scss/mixins/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/global/breakpoints';\n@import '../../../../../../node_modules/@nebular/theme/styles/theming';\n@import '../../../../../themes';\n\n@include nb-install-component() {\n    height: 100%;\n    overflow: auto;\n    position: relative;\n\n    nb-card, nb-card-body {\n        margin-bottom: 2px;\n    }\n    nb-card-body {\n        padding: 0.5rem 1.5rem;\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                      Login with Google                                                                                                                                                Nothing to display                                                                                    #                Value                                                                Title                {{video.title}}                                        Channel                {{video.channelTitle}}                                        Views                {{video.statistics.viewCount}}                                                                                Likes                                {{video.statistics.likeCount}}                                                                                Dislikes                                {{video.statistics.dislikeCount}}                                                                                Comments                                {{video.statistics.commentCount}}                                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'GridHeaderComponent', 'selector': 'app-grid-header'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'HomeComponent', 'selector': 'app-home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'MsCalendarComponent', 'selector': 'app-ms-calendar'},{'name': 'MsMailComponent', 'selector': 'app-ms-mail-component'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OfficeOAuthCallbackComponent', 'selector': 'app-office-oauth-callback'},{'name': 'OfficeOAuthComponent', 'selector': 'app-office-oauth'},{'name': 'RdSubredditWatcherComponent', 'selector': 'app-rd-subreddit-watcher'},{'name': 'RefreshRateInputDialogComponent', 'selector': 'app-refresh-rate-input-dialog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'SpotifyArtistComponent', 'selector': 'app-spotify-artist'},{'name': 'TtvStreamWatcherComponent', 'selector': 'app-ttv-stream-watcher'},{'name': 'TtvUserWatcherComponent', 'selector': 'app-ttv-user-watcher'},{'name': 'UsersComponent', 'selector': 'app-users'},{'name': 'VerifyAuthComponent', 'selector': 'app-verify-auth'},{'name': 'WeatherComponent', 'selector': 'app-weather'},{'name': 'YtChannelWatcherComponent', 'selector': 'app-yt-subscriber-count'},{'name': 'YtVideoWatcherComponent', 'selector': 'app-yt-video-watcher'}];\n    var DIRECTIVES = [{'name': 'WidgetRenderDirective', 'selector': '[appWidgetRender]'}];\n    var ACTUAL_COMPONENT = {'name': 'YtVideoWatcherComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app/auth/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/auth/login/login.component.ts\n            \n            interface\n            OAuthLogin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/auth/office-oauth-callback/office-oauth-callback.component.ts\n            \n            component\n            OfficeOAuthCallbackComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/auth/office-oauth-callback/office-oauth-callback.component.ts\n            \n            interface\n            IResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/auth/office-oauth/office-oauth.component.ts\n            \n            component\n            OfficeOAuthComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/auth/register/register.component.ts\n            \n            component\n            RegisterComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/auth/verify-auth/verify-auth.component.ts\n            \n            component\n            VerifyAuthComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/home/footer/footer.component.ts\n            \n            component\n            FooterComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/home/grid/grid-header/grid-header.component.ts\n            \n            component\n            GridHeaderComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/home/grid/grid-header/refresh-rate-input-dialog/refresh-rate-input-dialog.component.ts\n            \n            component\n            RefreshRateInputDialogComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/home/grid/grid.component.ts\n            \n            component\n            GridComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/home/grid/grid.service.ts\n            \n            injectable\n            GridService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/home/grid/grid.service.ts\n            \n            variable\n            gridConfigKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/home/grid/shared/dashboard-services.ts\n            \n            interface\n            DashboardServiceProps\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/home/grid/shared/dashboard-services.ts\n            \n            variable\n            dashboardServices\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/home/grid/shared/widget-render.directive.ts\n            \n            directive\n            WidgetRenderDirective\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/dashboard-widgets.ts\n            \n            interface\n            DashboardWidget\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/dashboard-widgets.ts\n            \n            interface\n            WidgetProps\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/dashboard-widgets.ts\n            \n            variable\n            widgetComponents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/ms-calendar/ms-calendar.component.ts\n            \n            component\n            MsCalendarComponent\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/ms-mail-component/ms-mail.component.ts\n            \n            component\n            MsMailComponent\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts\n            \n            component\n            RdSubredditWatcherComponent\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/rd-subreddit-watcher/rd-subreddit-watcher.component.ts\n            \n            interface\n            SubredditCreationFormatted\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/spotify-artist/spotify-artist.component.ts\n            \n            component\n            SpotifyArtistComponent\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/ttv-stream-watcher/ttv-stream-watcher.component.ts\n            \n            component\n            TtvStreamWatcherComponent\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/ttv-user-watcher/ttv-user-watcher.component.ts\n            \n            component\n            TtvUserWatcherComponent\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/weather/weather.component.ts\n            \n            component\n            WeatherComponent\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/yt-channel-watcher/yt-channel-watcher.component.ts\n            \n            component\n            YtChannelWatcherComponent\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/app/home/grid/widgets/yt-video-watcher/yt-video-watcher.component.ts\n            \n            component\n            YtVideoWatcherComponent\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/app/home/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/home/home.component.ts\n            \n            component\n            HomeComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/not-found/not-found.component.ts\n            \n            component\n            NotFoundComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/interceptors/auth.interceptor.ts\n            \n            interceptor\n            AuthInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/authenticated.ts\n            \n            interface\n            Authenticated\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/id.ts\n            \n            interface\n            Id\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/microsoft-calendar-event.ts\n            \n            interface\n            MicrosoftCalendarEvent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/microsoft-calendar.ts\n            \n            interface\n            MicrosoftCalendar\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/microsoft-mail.ts\n            \n            interface\n            MicrosoftMail\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/microsoft-mailbox.ts\n            \n            interface\n            MicrosoftMailbox\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/spotify-artist.ts\n            \n            interface\n            SpotifyArtist\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/subreddit.ts\n            \n            interface\n            Subreddit\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/thumbnail.ts\n            \n            interface\n            Thumbnail\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/ttv-stream.ts\n            \n            interface\n            TtvStream\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/ttv-user.ts\n            \n            interface\n            TtvUser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/user.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/weather.ts\n            \n            interface\n            Weather\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/widget-config.ts\n            \n            interface\n            WidgetConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/widget-grid-config.ts\n            \n            interface\n            WidgetGridConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/widget-query-config.ts\n            \n            interface\n            WidgetQueryConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/yt-channel.ts\n            \n            interface\n            YtChannel\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/yt-channel.ts\n            \n            interface\n            YtChannelSwagStats\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/yt-video.ts\n            \n            interface\n            YtVideo\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/shared/interfaces/yt-video.ts\n            \n            interface\n            YtVideoSwagStats\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/shared/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/services/dashboard.service.ts\n            \n            injectable\n            DashboardService\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/app/users/users.component.ts\n            \n            component\n            UsersComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~10.2.0\n        \n            @angular/cdk : ^10.2.1\n        \n            @angular/common : ~10.2.0\n        \n            @angular/compiler : ~10.2.0\n        \n            @angular/core : ~10.2.0\n        \n            @angular/forms : ~10.2.0\n        \n            @angular/localize : ~10.2.0\n        \n            @angular/platform-browser : ~10.2.0\n        \n            @angular/platform-browser-dynamic : ~10.2.0\n        \n            @angular/router : ~10.2.0\n        \n            @azure/msal-browser : ^2.6.0\n        \n            @fortawesome/angular-fontawesome : ^0.7.0\n        \n            @fortawesome/fontawesome-svg-core : ^1.2.28\n        \n            @fortawesome/free-brands-svg-icons : ^5.13.0\n        \n            @fortawesome/free-regular-svg-icons : ^5.13.0\n        \n            @fortawesome/free-solid-svg-icons : ^5.13.0\n        \n            @nebular/auth : ^6.2.1\n        \n            @nebular/eva-icons : ^6.2.1\n        \n            @nebular/theme : ^6.2.1\n        \n            @ng-bootstrap/ng-bootstrap : ^8.0.0\n        \n            angular-gridster2 : ^10.1.7\n        \n            angular2-uuid : ^1.1.1\n        \n            axios : ^0.21.0\n        \n            bootstrap : ^4.5.3\n        \n            eva-icons : ^1.1.3\n        \n            jsonwebtoken : ^8.5.1\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.0.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nClient\nThis project was generated with Angular CLI version 10.2.0.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotFoundModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_declarations\n\n\n\ncluster_GridModule\n\n\n\ncluster_GridModule_declarations\n\n\n\ncluster_GridModule_exports\n\n\n\ncluster_HomeModule\n\n\n\ncluster_HomeModule_declarations\n\n\n\ncluster_HomeModule_exports\n\n\n\ncluster_NotFoundModule\n\n\n\ncluster_NotFoundModule_declarations\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHomeModule\n\nHomeModule\n\nAppModule -->\n\nHomeModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nHomeModule->UsersModule\n\n\n\n\n\nFooterComponent \n\nFooterComponent \n\nFooterComponent  -->\n\nHomeModule->FooterComponent \n\n\n\n\n\nHeaderComponent \n\nHeaderComponent \n\nHeaderComponent  -->\n\nHomeModule->HeaderComponent \n\n\n\n\n\nNotFoundModule\n\nNotFoundModule\n\nAppModule -->\n\nNotFoundModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAuthModule -->\n\nLoginComponent->AuthModule\n\n\n\n\n\nOfficeOAuthCallbackComponent\n\nOfficeOAuthCallbackComponent\n\nAuthModule -->\n\nOfficeOAuthCallbackComponent->AuthModule\n\n\n\n\n\nOfficeOAuthComponent\n\nOfficeOAuthComponent\n\nAuthModule -->\n\nOfficeOAuthComponent->AuthModule\n\n\n\n\n\nRegisterComponent\n\nRegisterComponent\n\nAuthModule -->\n\nRegisterComponent->AuthModule\n\n\n\n\n\nVerifyAuthComponent\n\nVerifyAuthComponent\n\nAuthModule -->\n\nVerifyAuthComponent->AuthModule\n\n\n\n\n\nGridComponent\n\nGridComponent\n\n\n\nGridModule\n\nGridModule\n\nGridModule -->\n\nGridComponent->GridModule\n\n\n\n\n\nGridHeaderComponent\n\nGridHeaderComponent\n\nGridModule -->\n\nGridHeaderComponent->GridModule\n\n\n\n\n\nMsCalendarComponent\n\nMsCalendarComponent\n\nGridModule -->\n\nMsCalendarComponent->GridModule\n\n\n\n\n\nMsMailComponent\n\nMsMailComponent\n\nGridModule -->\n\nMsMailComponent->GridModule\n\n\n\n\n\nRdSubredditWatcherComponent\n\nRdSubredditWatcherComponent\n\nGridModule -->\n\nRdSubredditWatcherComponent->GridModule\n\n\n\n\n\nRefreshRateInputDialogComponent\n\nRefreshRateInputDialogComponent\n\nGridModule -->\n\nRefreshRateInputDialogComponent->GridModule\n\n\n\n\n\nSpotifyArtistComponent\n\nSpotifyArtistComponent\n\nGridModule -->\n\nSpotifyArtistComponent->GridModule\n\n\n\n\n\nTtvStreamWatcherComponent\n\nTtvStreamWatcherComponent\n\nGridModule -->\n\nTtvStreamWatcherComponent->GridModule\n\n\n\n\n\nTtvUserWatcherComponent\n\nTtvUserWatcherComponent\n\nGridModule -->\n\nTtvUserWatcherComponent->GridModule\n\n\n\n\n\nWeatherComponent\n\nWeatherComponent\n\nGridModule -->\n\nWeatherComponent->GridModule\n\n\n\n\n\nWidgetRenderDirective\n\nWidgetRenderDirective\n\nGridModule -->\n\nWidgetRenderDirective->GridModule\n\n\n\n\n\nYtChannelWatcherComponent\n\nYtChannelWatcherComponent\n\nGridModule -->\n\nYtChannelWatcherComponent->GridModule\n\n\n\n\n\nYtVideoWatcherComponent\n\nYtVideoWatcherComponent\n\nGridModule -->\n\nYtVideoWatcherComponent->GridModule\n\n\n\nHomeModule -->\n\nGridModule->HomeModule\n\n\n\nUsersModule -->\n\nGridModule->UsersModule\n\n\n\n\n\nGridComponent \n\nGridComponent \n\nGridComponent  -->\n\nGridModule->GridComponent \n\n\n\n\n\nFooterComponent\n\nFooterComponent\n\nHomeModule -->\n\nFooterComponent->HomeModule\n\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\nHomeModule -->\n\nHeaderComponent->HomeModule\n\n\n\n\n\nHomeComponent\n\nHomeComponent\n\nHomeModule -->\n\nHomeComponent->HomeModule\n\n\n\n\n\nNotFoundComponent\n\nNotFoundComponent\n\nNotFoundModule -->\n\nNotFoundComponent->NotFoundModule\n\n\n\n\n\nUsersComponent\n\nUsersComponent\n\nUsersModule -->\n\nUsersComponent->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    23 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    26 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        12 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            dashboardServices   (src/.../dashboard-services.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            gridConfigKey   (src/.../grid.service.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            widgetComponents   (src/.../dashboard-widgets.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n\n\n            \n        \n\n    src/app/home/grid/shared/dashboard-services.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dashboardServices\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DashboardServiceProps[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    {\n        icon: faGoogle,\n        name: 'Google service',\n        widgets: [\n            {\n                id: 'ytChannelWatcher',\n                name: 'Youtube channel watcher',\n                desc: 'Displays stats of a given Youtube channel.',\n                cols: 4,\n                rows: 3\n            },\n            {\n                id: 'ytVideoWatcher',\n                name: 'Youtube video watcher',\n                desc: 'Displays stats of a given Youtube video.',\n                cols: 5,\n                rows: 4\n            }\n        ]\n    },\n    {\n        icon: faMicrosoft,\n        name: 'Microsoft service',\n        widgets: [\n            {\n                id: 'msCalendar',\n                name: 'Microsoft calendar resume',\n                desc: 'Shows your calendar events',\n                cols: 3,\n                rows: 5\n            },\n            {\n                id: 'msMail',\n                name: 'Microsoft mail center',\n                desc: 'Easily catch up with your unread emails!',\n                cols: 4,\n                rows: 5\n            }\n        ]\n    },\n    {\n        icon: faTwitch,\n        name: 'Twitch service',\n        widgets: [\n            {\n                id: 'ttvUserWatcher',\n                name: 'Twitch user watcher',\n                desc: 'Use this widget to display stats of a given Twitch user.',\n                cols: 4,\n                rows: 3\n            },\n            {\n                id: 'ttvStreamWatcher',\n                name: 'Twitch stream watcher',\n                desc: 'Use this widget to display stats of a given Twitch online streamer.',\n                cols: 4,\n                rows: 3\n            }\n        ]\n    },\n    {\n        icon: faReddit,\n        name: 'Reddit service',\n        widgets: [\n            {\n                id: 'rdSubredditWatcher',\n                name: 'Reddit subreddit watcher',\n                desc: 'Use this widget to display stats of a given Reddit subreddit',\n                cols: 4,\n                rows: 3\n            }\n        ]\n    },\n    {\n        icon: faSun,\n        name: 'Weather service',\n        widgets: [\n            {\n                id: 'weather',\n                name: 'Weather viewer',\n                desc: 'Use this widget to display a city current weather',\n                cols: 3,\n                rows: 4\n            }\n        ]\n    },\n    {\n        icon: faSpotify,\n        name: 'Spotify service',\n        widgets: [\n            {\n                id: 'spotifyArtist',\n                name: 'Spotify artist statistics',\n                desc: 'Monitor stats of a given spotify artist.',\n                cols: 4,\n                rows: 2\n            }\n        ]\n    }\n]\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    production: true,\n    thisUrl: 'http://localhost:80',\n    // apiUrl: 'http://localhost:8080'\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    production: false,\n    thisUrl: 'http://localhost:4200',\n    // apiUrl: 'http://localhost:8080'\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/home/grid/grid.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            gridConfigKey\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'gridConfig'\n                        \n                    \n\n\n            \n        \n\n    src/app/home/grid/widgets/dashboard-widgets.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            widgetComponents\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    msCalendar: MsCalendarComponent,\n    msMail: MsMailComponent,\n    rdSubredditWatcher: RdSubredditWatcherComponent,\n    spotifyArtist: SpotifyArtistComponent,\n    ttvStreamWatcher: TtvStreamWatcherComponent,\n    ttvUserWatcher: TtvUserWatcherComponent,\n    weather: WeatherComponent,\n    ytChannelWatcher: YtChannelWatcherComponent,\n    ytVideoWatcher: YtVideoWatcherComponent\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
